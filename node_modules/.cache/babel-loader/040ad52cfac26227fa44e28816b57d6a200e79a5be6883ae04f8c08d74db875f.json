{"ast":null,"code":"/*!\n * Photo Sphere Viewer / Virtual Tour Plugin 5.13.2\n * @copyright 2015-2025 Damien \"Mistic\" Sorel\n * @licence MIT (https://opensource.org/licenses/MIT)\n */\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/events.ts\nvar events_exports = {};\n__export(events_exports, {\n  EnterArrowEvent: () => EnterArrowEvent,\n  LeaveArrowEvent: () => LeaveArrowEvent,\n  NodeChangedEvent: () => NodeChangedEvent\n});\nimport { TypedEvent } from \"@photo-sphere-viewer/core\";\nvar _NodeChangedEvent = class _NodeChangedEvent extends TypedEvent {\n  /** @internal */\n  constructor(node, data) {\n    super(_NodeChangedEvent.type);\n    this.node = node;\n    this.data = data;\n  }\n};\n_NodeChangedEvent.type = \"node-changed\";\nvar NodeChangedEvent = _NodeChangedEvent;\nvar _EnterArrowEvent = class _EnterArrowEvent extends TypedEvent {\n  /** @internal */\n  constructor(link, node) {\n    super(_EnterArrowEvent.type);\n    this.link = link;\n    this.node = node;\n  }\n};\n_EnterArrowEvent.type = \"enter-arrow\";\nvar EnterArrowEvent = _EnterArrowEvent;\nvar _LeaveArrowEvent = class _LeaveArrowEvent extends TypedEvent {\n  /** @internal */\n  constructor(link, node) {\n    super(_LeaveArrowEvent.type);\n    this.link = link;\n    this.node = node;\n  }\n};\n_LeaveArrowEvent.type = \"leave-arrow\";\nvar LeaveArrowEvent = _LeaveArrowEvent;\n\n// src/VirtualTourPlugin.ts\nimport { AbstractConfigurablePlugin, PSVError as PSVError4, events as events2, utils as utils5 } from \"@photo-sphere-viewer/core\";\nimport { MathUtils as MathUtils3 } from \"three\";\n\n// src/ArrowsRenderer.ts\nimport { AbstractComponent, events, utils } from \"@photo-sphere-viewer/core\";\nimport { MathUtils, PerspectiveCamera, Scene } from \"three\";\n\n// ../../node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\nimport { Matrix4, Object3D, Vector2, Vector3 } from \"three\";\nvar CSS2DObject = class extends Object3D {\n  /**\n   * Constructs a new CSS2D object.\n   *\n   * @param {DOMElement} [element] - The DOM element.\n   */\n  constructor(element = document.createElement(\"div\")) {\n    super();\n    this.isCSS2DObject = true;\n    this.element = element;\n    this.element.style.position = \"absolute\";\n    this.element.style.userSelect = \"none\";\n    this.element.setAttribute(\"draggable\", false);\n    this.center = new Vector2(0.5, 0.5);\n    this.addEventListener(\"removed\", function () {\n      this.traverse(function (object) {\n        if (object.element instanceof object.element.ownerDocument.defaultView.Element && object.element.parentNode !== null) {\n          object.element.remove();\n        }\n      });\n    });\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.element = source.element.cloneNode(true);\n    this.center = source.center;\n    return this;\n  }\n};\nvar _vector = new Vector3();\nvar _viewMatrix = new Matrix4();\nvar _viewProjectionMatrix = new Matrix4();\nvar _a = new Vector3();\nvar _b = new Vector3();\nvar CSS2DRenderer = class {\n  /**\n   * Constructs a new CSS2D renderer.\n   *\n   * @param {CSS2DRenderer~Parameters} [parameters] - The parameters.\n   */\n  constructor(parameters = {}) {\n    const _this = this;\n    let _width, _height;\n    let _widthHalf, _heightHalf;\n    const cache = {\n      objects: /* @__PURE__ */new WeakMap()\n    };\n    const domElement = parameters.element !== void 0 ? parameters.element : document.createElement(\"div\");\n    domElement.style.overflow = \"hidden\";\n    this.domElement = domElement;\n    this.getSize = function () {\n      return {\n        width: _width,\n        height: _height\n      };\n    };\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      _viewMatrix.copy(camera.matrixWorldInverse);\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n      renderObject(scene, scene, camera);\n      zOrder(scene);\n    };\n    this.setSize = function (width, height) {\n      _width = width;\n      _height = height;\n      _widthHalf = _width / 2;\n      _heightHalf = _height / 2;\n      domElement.style.width = width + \"px\";\n      domElement.style.height = height + \"px\";\n    };\n    function hideObject(object) {\n      if (object.isCSS2DObject) object.element.style.display = \"none\";\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        hideObject(object.children[i]);\n      }\n    }\n    function renderObject(object, scene, camera) {\n      if (object.visible === false) {\n        hideObject(object);\n        return;\n      }\n      if (object.isCSS2DObject) {\n        _vector.setFromMatrixPosition(object.matrixWorld);\n        _vector.applyMatrix4(_viewProjectionMatrix);\n        const visible = _vector.z >= -1 && _vector.z <= 1 && object.layers.test(camera.layers) === true;\n        const element = object.element;\n        element.style.display = visible === true ? \"\" : \"none\";\n        if (visible === true) {\n          object.onBeforeRender(_this, scene, camera);\n          element.style.transform = \"translate(\" + -100 * object.center.x + \"%,\" + -100 * object.center.y + \"%)translate(\" + (_vector.x * _widthHalf + _widthHalf) + \"px,\" + (-_vector.y * _heightHalf + _heightHalf) + \"px)\";\n          if (element.parentNode !== domElement) {\n            domElement.appendChild(element);\n          }\n          object.onAfterRender(_this, scene, camera);\n        }\n        const objectData = {\n          distanceToCameraSquared: getDistanceToSquared(camera, object)\n        };\n        cache.objects.set(object, objectData);\n      }\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        renderObject(object.children[i], scene, camera);\n      }\n    }\n    function getDistanceToSquared(object1, object2) {\n      _a.setFromMatrixPosition(object1.matrixWorld);\n      _b.setFromMatrixPosition(object2.matrixWorld);\n      return _a.distanceToSquared(_b);\n    }\n    function filterAndFlatten(scene) {\n      const result = [];\n      scene.traverseVisible(function (object) {\n        if (object.isCSS2DObject) result.push(object);\n      });\n      return result;\n    }\n    function zOrder(scene) {\n      const sorted = filterAndFlatten(scene).sort(function (a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n          return b.renderOrder - a.renderOrder;\n        }\n        const distanceA = cache.objects.get(a).distanceToCameraSquared;\n        const distanceB = cache.objects.get(b).distanceToCameraSquared;\n        return distanceA - distanceB;\n      });\n      const zMax = sorted.length;\n      for (let i = 0, l = sorted.length; i < l; i++) {\n        sorted[i].element.style.zIndex = zMax - i;\n      }\n    }\n  }\n};\n\n// ../../node_modules/three/examples/jsm/renderers/CSS3DRenderer.js\nimport { Matrix4 as Matrix42, Object3D as Object3D2, Quaternion, Vector3 as Vector32 } from \"three\";\nvar _position = new Vector32();\nvar _quaternion = new Quaternion();\nvar _scale = new Vector32();\nvar CSS3DObject = class extends Object3D2 {\n  /**\n   * Constructs a new CSS3D object.\n   *\n   * @param {DOMElement} [element] - The DOM element.\n   */\n  constructor(element = document.createElement(\"div\")) {\n    super();\n    this.isCSS3DObject = true;\n    this.element = element;\n    this.element.style.position = \"absolute\";\n    this.element.style.pointerEvents = \"auto\";\n    this.element.style.userSelect = \"none\";\n    this.element.setAttribute(\"draggable\", false);\n    this.addEventListener(\"removed\", function () {\n      this.traverse(function (object) {\n        if (object.element instanceof object.element.ownerDocument.defaultView.Element && object.element.parentNode !== null) {\n          object.element.remove();\n        }\n      });\n    });\n  }\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.element = source.element.cloneNode(true);\n    return this;\n  }\n};\nvar _matrix = new Matrix42();\nvar _matrix2 = new Matrix42();\nvar CSS3DRenderer = class {\n  /**\n   * Constructs a new CSS3D renderer.\n   *\n   * @param {CSS3DRenderer~Parameters} [parameters] - The parameters.\n   */\n  constructor(parameters = {}) {\n    const _this = this;\n    let _width, _height;\n    let _widthHalf, _heightHalf;\n    const cache = {\n      camera: {\n        style: \"\"\n      },\n      objects: /* @__PURE__ */new WeakMap()\n    };\n    const domElement = parameters.element !== void 0 ? parameters.element : document.createElement(\"div\");\n    domElement.style.overflow = \"hidden\";\n    this.domElement = domElement;\n    const viewElement = document.createElement(\"div\");\n    viewElement.style.transformOrigin = \"0 0\";\n    viewElement.style.pointerEvents = \"none\";\n    domElement.appendChild(viewElement);\n    const cameraElement = document.createElement(\"div\");\n    cameraElement.style.transformStyle = \"preserve-3d\";\n    viewElement.appendChild(cameraElement);\n    this.getSize = function () {\n      return {\n        width: _width,\n        height: _height\n      };\n    };\n    this.render = function (scene, camera) {\n      const fov = camera.projectionMatrix.elements[5] * _heightHalf;\n      if (camera.view && camera.view.enabled) {\n        viewElement.style.transform = `translate( ${-camera.view.offsetX * (_width / camera.view.width)}px, ${-camera.view.offsetY * (_height / camera.view.height)}px )`;\n        viewElement.style.transform += `scale( ${camera.view.fullWidth / camera.view.width}, ${camera.view.fullHeight / camera.view.height} )`;\n      } else {\n        viewElement.style.transform = \"\";\n      }\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      let tx, ty;\n      if (camera.isOrthographicCamera) {\n        tx = -(camera.right + camera.left) / 2;\n        ty = (camera.top + camera.bottom) / 2;\n      }\n      const scaleByViewOffset = camera.view && camera.view.enabled ? camera.view.height / camera.view.fullHeight : 1;\n      const cameraCSSMatrix = camera.isOrthographicCamera ? `scale( ${scaleByViewOffset} )scale(` + fov + \")translate(\" + epsilon(tx) + \"px,\" + epsilon(ty) + \"px)\" + getCameraCSSMatrix(camera.matrixWorldInverse) : `scale( ${scaleByViewOffset} )translateZ(` + fov + \"px)\" + getCameraCSSMatrix(camera.matrixWorldInverse);\n      const perspective = camera.isPerspectiveCamera ? \"perspective(\" + fov + \"px) \" : \"\";\n      const style = perspective + cameraCSSMatrix + \"translate(\" + _widthHalf + \"px,\" + _heightHalf + \"px)\";\n      if (cache.camera.style !== style) {\n        cameraElement.style.transform = style;\n        cache.camera.style = style;\n      }\n      renderObject(scene, scene, camera, cameraCSSMatrix);\n    };\n    this.setSize = function (width, height) {\n      _width = width;\n      _height = height;\n      _widthHalf = _width / 2;\n      _heightHalf = _height / 2;\n      domElement.style.width = width + \"px\";\n      domElement.style.height = height + \"px\";\n      viewElement.style.width = width + \"px\";\n      viewElement.style.height = height + \"px\";\n      cameraElement.style.width = width + \"px\";\n      cameraElement.style.height = height + \"px\";\n    };\n    function epsilon(value) {\n      return Math.abs(value) < 1e-10 ? 0 : value;\n    }\n    function getCameraCSSMatrix(matrix) {\n      const elements = matrix.elements;\n      return \"matrix3d(\" + epsilon(elements[0]) + \",\" + epsilon(-elements[1]) + \",\" + epsilon(elements[2]) + \",\" + epsilon(elements[3]) + \",\" + epsilon(elements[4]) + \",\" + epsilon(-elements[5]) + \",\" + epsilon(elements[6]) + \",\" + epsilon(elements[7]) + \",\" + epsilon(elements[8]) + \",\" + epsilon(-elements[9]) + \",\" + epsilon(elements[10]) + \",\" + epsilon(elements[11]) + \",\" + epsilon(elements[12]) + \",\" + epsilon(-elements[13]) + \",\" + epsilon(elements[14]) + \",\" + epsilon(elements[15]) + \")\";\n    }\n    function getObjectCSSMatrix(matrix) {\n      const elements = matrix.elements;\n      const matrix3d = \"matrix3d(\" + epsilon(elements[0]) + \",\" + epsilon(elements[1]) + \",\" + epsilon(elements[2]) + \",\" + epsilon(elements[3]) + \",\" + epsilon(-elements[4]) + \",\" + epsilon(-elements[5]) + \",\" + epsilon(-elements[6]) + \",\" + epsilon(-elements[7]) + \",\" + epsilon(elements[8]) + \",\" + epsilon(elements[9]) + \",\" + epsilon(elements[10]) + \",\" + epsilon(elements[11]) + \",\" + epsilon(elements[12]) + \",\" + epsilon(elements[13]) + \",\" + epsilon(elements[14]) + \",\" + epsilon(elements[15]) + \")\";\n      return \"translate(-50%,-50%)\" + matrix3d;\n    }\n    function hideObject(object) {\n      if (object.isCSS3DObject) object.element.style.display = \"none\";\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        hideObject(object.children[i]);\n      }\n    }\n    function renderObject(object, scene, camera, cameraCSSMatrix) {\n      if (object.visible === false) {\n        hideObject(object);\n        return;\n      }\n      if (object.isCSS3DObject) {\n        const visible = object.layers.test(camera.layers) === true;\n        const element = object.element;\n        element.style.display = visible === true ? \"\" : \"none\";\n        if (visible === true) {\n          object.onBeforeRender(_this, scene, camera);\n          let style;\n          if (object.isCSS3DSprite) {\n            _matrix.copy(camera.matrixWorldInverse);\n            _matrix.transpose();\n            if (object.rotation2D !== 0) _matrix.multiply(_matrix2.makeRotationZ(object.rotation2D));\n            object.matrixWorld.decompose(_position, _quaternion, _scale);\n            _matrix.setPosition(_position);\n            _matrix.scale(_scale);\n            _matrix.elements[3] = 0;\n            _matrix.elements[7] = 0;\n            _matrix.elements[11] = 0;\n            _matrix.elements[15] = 1;\n            style = getObjectCSSMatrix(_matrix);\n          } else {\n            style = getObjectCSSMatrix(object.matrixWorld);\n          }\n          const cachedObject = cache.objects.get(object);\n          if (cachedObject === void 0 || cachedObject.style !== style) {\n            element.style.transform = style;\n            const objectData = {\n              style\n            };\n            cache.objects.set(object, objectData);\n          }\n          if (element.parentNode !== cameraElement) {\n            cameraElement.appendChild(element);\n          }\n          object.onAfterRender(_this, scene, camera);\n        }\n      }\n      for (let i = 0, l = object.children.length; i < l; i++) {\n        renderObject(object.children[i], scene, camera, cameraCSSMatrix);\n      }\n    }\n  }\n};\n\n// src/arrow.svg\nvar arrow_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\\n    <path fill-rule=\"even-odd\" fill=\"currentColor\" d=\"\\n        M50,50 m45,0\\n        a45,45 0 1,0 -90,0\\n        a45,45 0 1,0  90,0\\n\\n        M50,50 m38,0\\n        a38,38 0 0,1 -76,0\\n        a38,38 0 0,1  76,0\\n\\n        M50,50 m30,0\\n        a30,30 0 1,0 -60,0\\n        a30,30 0 1,0  60,0\\n        \\n        M50,40 m2.5,-2.5\\n        l17.5,17.5\\n        a 2.5,2.5 0 0 1 -5,5\\n        l-15,-15\\n        l-15,15\\n        a 2.5,2.5 0 0 1 -5,-5\\n        l17.5,-17.5\\n        a 3.5,3.5 0 0 1 5,0\\n    \"/>\\n</svg>';\n\n// src/constants.ts\nvar LINK_DATA = \"tourLink\";\nvar LINK_ID = \"__tour-link__\";\nvar LOADING_TOOLTIP = {\n  className: \"psv-virtual-tour-tooltip\",\n  content: `<div class=\"psv-virtual-tour-loader\"><div></div><div></div><div></div></div>`\n};\nvar DEFAULT_ARROW = {\n  element: () => {\n    const button = document.createElement(\"button\");\n    button.className = \"psv-virtual-tour-arrow\";\n    button.innerHTML = arrow_default;\n    return button;\n  },\n  size: {\n    width: 80,\n    height: 80\n  }\n};\n\n// src/ArrowsRenderer.ts\nvar ARROW_DATA = \"arrow\";\nvar ArrowsRenderer = class extends AbstractComponent {\n  constructor(parent, plugin) {\n    super(parent, {\n      className: \"psv-virtual-tour-arrows\"\n    });\n    this.plugin = plugin;\n    this.renderer = this.is3D ? new CSS3DRenderer({\n      element: this.container\n    }) : new CSS2DRenderer({\n      element: this.container\n    });\n    this.camera = this.is3D ? new PerspectiveCamera(30, 1) : null;\n    this.scene = new Scene();\n    this.viewer.addEventListener(events.ReadyEvent.type, this, {\n      once: true\n    });\n    this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n    this.viewer.addEventListener(events.SizeUpdatedEvent.type, this);\n    this.viewer.addEventListener(events.RenderEvent.type, this);\n    this.viewer.addEventListener(events.ClickEvent.type, this);\n    this.container.addEventListener(\"mouseenter\", this, true);\n    this.container.addEventListener(\"mouseleave\", this, true);\n    this.container.addEventListener(\"mousemove\", this, true);\n    this.container.addEventListener(\"contextmenu\", e => e.preventDefault());\n  }\n  get is3D() {\n    return this.plugin.is3D;\n  }\n  get arrowsPosition() {\n    return this.plugin.config.arrowsPosition;\n  }\n  get arrowStyle() {\n    return this.plugin.config.arrowStyle;\n  }\n  init() {\n    if (this.is3D) {\n      this.gallery = this.viewer.getPlugin(\"gallery\");\n      this.gallery?.addEventListener(\"show-gallery\", this);\n      this.gallery?.addEventListener(\"hide-gallery\", this);\n    }\n  }\n  destroy() {\n    this.viewer.removeEventListener(events.ReadyEvent.type, this);\n    this.viewer.removeEventListener(events.PositionUpdatedEvent.type, this);\n    this.viewer.removeEventListener(events.SizeUpdatedEvent.type, this);\n    this.viewer.removeEventListener(events.RenderEvent.type, this);\n    this.viewer.removeEventListener(events.ClickEvent.type, this);\n    this.gallery?.removeEventListener(\"show-gallery\", this);\n    this.gallery?.removeEventListener(\"hide-gallery\", this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    switch (e.type) {\n      case events.ReadyEvent.type:\n      case events.SizeUpdatedEvent.type:\n      case events.PositionUpdatedEvent.type:\n        this.__updateCamera();\n        break;\n      case events.RenderEvent.type:\n        this.render();\n        break;\n      case events.ClickEvent.type:\n        {\n          if (e.data.rightclick) {\n            break;\n          }\n          const link = this.__getTargetLink(e.data.target, true);\n          if (link) {\n            this.plugin.setCurrentNode(link.nodeId, null, link);\n          }\n          break;\n        }\n      case \"mouseenter\":\n        {\n          const link = this.__getTargetLink(utils.getEventTarget(e));\n          if (link) {\n            this.plugin.__onEnterArrow(link, e);\n          }\n          break;\n        }\n      case \"mouseleave\":\n        {\n          const link = this.__getTargetLink(utils.getEventTarget(e));\n          if (link) {\n            this.plugin.__onLeaveArrow(link);\n          }\n          break;\n        }\n      case \"mousemove\":\n        {\n          const link = this.__getTargetLink(utils.getEventTarget(e), true);\n          if (link) {\n            this.plugin.__onHoverArrow(e);\n          }\n          break;\n        }\n      case \"hide-gallery\":\n        this.__onToggleGallery(false);\n        break;\n      case \"show-gallery\":\n        if (!e.fullscreen) {\n          this.__onToggleGallery(true);\n        }\n        break;\n    }\n  }\n  __updateCamera() {\n    const size = this.viewer.getSize();\n    this.renderer.setSize(size.width, size.height);\n    if (this.is3D) {\n      const position = this.viewer.getPosition();\n      position.pitch = MathUtils.clamp(position.pitch, -this.arrowsPosition.maxPitch, -this.arrowsPosition.minPitch);\n      this.viewer.dataHelper.sphericalCoordsToVector3(position, this.camera.position, size.height * 2).negate();\n      this.camera.lookAt(0, 0, 0);\n      this.camera.translateY(size.height / 3);\n      this.camera.updateProjectionMatrix();\n    }\n  }\n  render() {\n    if (this.is3D) {\n      const position = this.viewer.getPosition();\n      const objectsAndDist = [];\n      let minDist = Number.MAX_SAFE_INTEGER;\n      this.scene.children.forEach(object => {\n        const data = object.userData[ARROW_DATA];\n        if (data.conflict) {\n          const distance2 = Math.abs(utils.getShortestArc(position.yaw, data.yaw));\n          minDist = Math.min(minDist, distance2);\n          objectsAndDist.push([object, distance2]);\n        }\n      });\n      objectsAndDist.forEach(([object, distance2]) => {\n        const fade = distance2 !== minDist;\n        object.element.style.opacity = fade ? \"0.5\" : null;\n        object.element.style.zIndex = fade ? \"-1\" : null;\n      });\n      this.renderer.render(this.scene, this.camera);\n    } else {\n      this.renderer.render(this.scene, this.viewer.renderer.camera);\n    }\n  }\n  clear() {\n    this.scene.clear();\n  }\n  __buildArrowElement(link, style) {\n    if (style?.image) {\n      const image = document.createElement(\"img\");\n      image.src = style.image;\n      return image;\n    } else if (style?.element) {\n      if (typeof style.element === \"function\") {\n        return style.element(link);\n      } else {\n        return style.element;\n      }\n    }\n  }\n  addLinkArrow(link, position, depth = 1) {\n    let element = this.__buildArrowElement(link, link.arrowStyle);\n    if (!element) {\n      element = this.__buildArrowElement(link, this.arrowStyle);\n    }\n    element[LINK_DATA] = link;\n    const conf = {\n      ...this.arrowStyle,\n      ...link.arrowStyle\n    };\n    element.classList.add(\"psv-virtual-tour-link\");\n    if (conf.className) {\n      utils.addClasses(element, conf.className);\n    }\n    if (conf.style) {\n      Object.assign(element.style, conf.style);\n    }\n    if (this.is3D) {\n      element.style.width = conf.size.width * 1.5 + \"px\";\n      element.style.height = conf.size.height * 1.5 + \"px\";\n      let conflict = false;\n      this.scene.children.forEach(object2 => {\n        const data = object2.userData[ARROW_DATA];\n        if (Math.abs(utils.getShortestArc(data.yaw, position.yaw)) < this.arrowsPosition.linkOverlapAngle) {\n          data.conflict = true;\n          conflict = true;\n        }\n      });\n      const object = new CSS3DObject(element);\n      object.userData[ARROW_DATA] = {\n        yaw: position.yaw,\n        conflict\n      };\n      object.rotation.set(-Math.PI / 2, 0, Math.PI - position.yaw);\n      this.viewer.dataHelper.sphericalCoordsToVector3({\n        yaw: position.yaw,\n        pitch: 0\n      }, object.position, depth * 100);\n      this.scene.add(object);\n    } else {\n      element.style.width = conf.size.width + \"px\";\n      element.style.height = conf.size.height + \"px\";\n      element.style.pointerEvents = \"auto\";\n      const object = new CSS2DObject(element);\n      this.viewer.dataHelper.sphericalCoordsToVector3(position, object.position);\n      this.scene.add(object);\n    }\n  }\n  __getTargetLink(target, closest = false) {\n    const target2 = closest ? utils.getClosest(target, \".psv-virtual-tour-link\") : target;\n    return target2 ? target2[LINK_DATA] : void 0;\n  }\n  __onToggleGallery(visible) {\n    if (!visible) {\n      this.container.style.marginBottom = \"\";\n    } else {\n      this.container.style.marginBottom = this.viewer.container.querySelector(\".psv-gallery\").offsetHeight + \"px\";\n    }\n  }\n};\n\n// src/datasources/ClientSideDatasource.ts\nimport { PSVError as PSVError2, utils as utils3 } from \"@photo-sphere-viewer/core\";\n\n// src/datasources/AbstractDataSource.ts\nimport { PSVError, utils as utils2 } from \"@photo-sphere-viewer/core\";\nvar AbstractDatasource = class {\n  constructor(plugin, viewer) {\n    this.plugin = plugin;\n    this.viewer = viewer;\n    this.nodes = {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  destroy() {}\n  /**\n   * Checks the configuration of a node\n   */\n  checkNode(node) {\n    if (!node.id) {\n      throw new PSVError(\"No id given for node\");\n    }\n    if (!node.panorama) {\n      throw new PSVError(`No panorama provided for node ${node.id}`);\n    }\n    if (this.plugin.isGps && !(node.gps?.length >= 2)) {\n      throw new PSVError(`No GPS position provided for node ${node.id}`);\n    }\n    if (!this.plugin.isGps && node.markers?.some(marker => marker.gps && !marker.position)) {\n      throw new PSVError(`Cannot use GPS positioning for markers in manual mode`);\n    }\n    if (!node.links) {\n      utils2.logWarn(`Node ${node.id} has no links`);\n      node.links = [];\n    }\n  }\n  /**\n   * Checks the configuration of a link\n   */\n  checkLink(node, link) {\n    if (!link.nodeId) {\n      throw new PSVError(`Link of node ${node.id} has no target id`);\n    }\n    if (link.nodeId === node.id) {\n      throw new PSVError(`Node ${node.id} links to itself`);\n    }\n    if (!this.plugin.isGps && !utils2.isExtendedPosition(link.position)) {\n      throw new PSVError(`No position provided for link ${link.nodeId} of node ${node.id}`);\n    }\n    if (this.plugin.isGps && !link.gps) {\n      throw new PSVError(`No GPS position provided for link ${link.nodeId} of node ${node.id}`);\n    }\n  }\n};\n\n// src/datasources/ClientSideDatasource.ts\nvar ClientSideDatasource = class extends AbstractDatasource {\n  async loadNode(nodeId) {\n    if (this.nodes[nodeId]) {\n      return this.nodes[nodeId];\n    } else {\n      throw new PSVError2(`Node ${nodeId} not found`);\n    }\n  }\n  setNodes(rawNodes) {\n    if (!rawNodes?.length) {\n      throw new PSVError2(\"No nodes provided\");\n    }\n    const nodes = {};\n    const linkedNodes = {};\n    rawNodes.forEach(node => {\n      this.checkNode(node);\n      if (nodes[node.id]) {\n        throw new PSVError2(`Duplicate node ${node.id}`);\n      }\n      nodes[node.id] = node;\n    });\n    rawNodes.forEach(node => {\n      this.__checkLinks(node, nodes);\n      node.links.forEach(link => {\n        linkedNodes[link.nodeId] = true;\n      });\n    });\n    rawNodes.forEach(node => {\n      if (!linkedNodes[node.id]) {\n        utils3.logWarn(`Node ${node.id} is never linked to`);\n      }\n    });\n    this.nodes = nodes;\n  }\n  updateNode(rawNode) {\n    if (!rawNode.id) {\n      throw new PSVError2(\"No id given for node\");\n    }\n    const node = this.nodes[rawNode.id];\n    if (!node) {\n      throw new PSVError2(`Node ${rawNode.id} does not exist`);\n    }\n    Object.assign(node, rawNode);\n    this.checkNode(node);\n    this.__checkLinks(node, this.nodes);\n    return node;\n  }\n  __checkLinks(node, nodes) {\n    node.links.forEach(link => {\n      if (!nodes[link.nodeId]) {\n        throw new PSVError2(`Target node ${link.nodeId} of node ${node.id} does not exists`);\n      }\n      link.gps = link.gps || nodes[link.nodeId].gps;\n      this.checkLink(node, link);\n    });\n  }\n};\n\n// src/datasources/ServerSideDatasource.ts\nimport { PSVError as PSVError3 } from \"@photo-sphere-viewer/core\";\nvar ServerSideDatasource = class extends AbstractDatasource {\n  constructor(plugin, viewer) {\n    super(plugin, viewer);\n    if (!plugin.config.getNode) {\n      throw new PSVError3(\"Missing getNode() option.\");\n    }\n    this.nodeResolver = plugin.config.getNode;\n  }\n  async loadNode(nodeId) {\n    if (this.nodes[nodeId]) {\n      return this.nodes[nodeId];\n    } else {\n      const node = await this.nodeResolver(nodeId);\n      this.checkNode(node);\n      node.links.forEach(link => {\n        this.checkLink(node, link);\n      });\n      this.nodes[nodeId] = node;\n      return node;\n    }\n  }\n  clearCache() {\n    this.nodes = {};\n  }\n};\n\n// src/utils.ts\nimport { utils as utils4 } from \"@photo-sphere-viewer/core\";\nimport { MathUtils as MathUtils2 } from \"three\";\nfunction gpsToSpherical(gps1, gps2) {\n  const p1 = gpsDegToRad(gps1);\n  const p2 = gpsDegToRad(gps2);\n  const h1 = gps1[2] ?? 0;\n  const h2 = gps2[2] ?? 0;\n  let pitch = 0;\n  if (h1 !== h2) {\n    pitch = Math.atan((h2 - h1) / distance(p1, p2));\n  }\n  const yaw = bearing(p1, p2);\n  return {\n    yaw,\n    pitch\n  };\n}\nfunction gpsDegToRad(gps) {\n  return [MathUtils2.degToRad(gps[0]), MathUtils2.degToRad(gps[1])];\n}\nfunction distance(p1, p2) {\n  return utils4.greatArcDistance(p1, p2) * 6371e3;\n}\nfunction bearing(p1, p2) {\n  const [long1, lat1] = p1;\n  const [long2, lat2] = p2;\n  const y = Math.sin(long2 - long1) * Math.cos(lat2);\n  const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(long2 - long1);\n  return Math.atan2(y, x);\n}\n\n// src/VirtualTourPlugin.ts\nvar getConfig = utils5.getConfigParser({\n  dataMode: \"client\",\n  positionMode: \"manual\",\n  renderMode: \"3d\",\n  nodes: null,\n  getNode: null,\n  startNodeId: null,\n  preload: false,\n  transitionOptions: {\n    showLoader: true,\n    speed: \"20rpm\",\n    effect: \"fade\",\n    rotation: true\n  },\n  linksOnCompass: true,\n  showLinkTooltip: true,\n  getLinkTooltip: null,\n  arrowStyle: DEFAULT_ARROW,\n  arrowsPosition: {\n    minPitch: 0.3,\n    maxPitch: Math.PI / 2,\n    linkOverlapAngle: Math.PI / 4,\n    linkPitchOffset: -0.1\n  },\n  map: null\n}, {\n  dataMode(dataMode) {\n    if (dataMode !== \"client\" && dataMode !== \"server\") {\n      throw new PSVError4(\"VirtualTourPlugin: invalid dataMode\");\n    }\n    return dataMode;\n  },\n  positionMode(positionMode) {\n    if (positionMode !== \"gps\" && positionMode !== \"manual\") {\n      throw new PSVError4(\"VirtualTourPlugin: invalid positionMode\");\n    }\n    return positionMode;\n  },\n  renderMode(renderMode) {\n    if (renderMode !== \"3d\" && renderMode !== \"2d\") {\n      throw new PSVError4(\"VirtualTourPlugin: invalid renderMode\");\n    }\n    return renderMode;\n  },\n  arrowsPosition(arrowsPosition, {\n    defValue\n  }) {\n    return {\n      ...defValue,\n      ...arrowsPosition\n    };\n  },\n  arrowStyle(arrowStyle, {\n    defValue\n  }) {\n    return {\n      ...defValue,\n      ...arrowStyle\n    };\n  },\n  map(map, {\n    rawConfig\n  }) {\n    if (map) {\n      if (rawConfig.dataMode === \"server\") {\n        utils5.logWarn(\"VirtualTourPlugin: The map cannot be used in server side mode\");\n        return null;\n      }\n      if (!map.imageUrl) {\n        utils5.logWarn('VirtualTourPlugin: configuring the map requires at least \"imageUrl\"');\n        return null;\n      }\n    }\n    return map;\n  }\n});\nvar VirtualTourPlugin = class extends AbstractConfigurablePlugin {\n  constructor(viewer, config) {\n    super(viewer, config);\n    this.state = {\n      currentNode: null,\n      currentTooltip: null,\n      loadingNode: null,\n      preload: {}\n    };\n    this.arrowsRenderer = new ArrowsRenderer(this.viewer, this);\n  }\n  get is3D() {\n    return this.config.renderMode === \"3d\";\n  }\n  get isServerSide() {\n    return this.config.dataMode === \"server\";\n  }\n  get isGps() {\n    return this.config.positionMode === \"gps\";\n  }\n  /**\n   * @internal\n   */\n  init() {\n    super.init();\n    this.arrowsRenderer.init();\n    utils5.checkStylesheet(this.viewer.container, \"virtual-tour-plugin\");\n    this.markers = this.viewer.getPlugin(\"markers\");\n    this.compass = this.viewer.getPlugin(\"compass\");\n    if (this.markers?.config.markers) {\n      utils5.logWarn(\"No default markers can be configured on the MarkersPlugin when using the VirtualTourPlugin. Consider defining `markers` on each tour node.\");\n      delete this.markers.config.markers;\n    }\n    if (this.isGps) {\n      this.plan = this.viewer.getPlugin(\"plan\");\n    }\n    if (!this.isServerSide) {\n      this.gallery = this.viewer.getPlugin(\"gallery\");\n      this.map = this.viewer.getPlugin(\"map\");\n      if (this.config.map && !this.map) {\n        utils5.logWarn(\"The map is configured on the VirtualTourPlugin but the MapPlugin is not loaded.\");\n      }\n    }\n    this.datasource = this.isServerSide ? new ServerSideDatasource(this, this.viewer) : new ClientSideDatasource(this, this.viewer);\n    if (this.map) {\n      this.map.addEventListener(\"select-hotspot\", this);\n      this.map.setImage(this.config.map.imageUrl);\n    }\n    this.plan?.addEventListener(\"select-hotspot\", this);\n    if (this.isServerSide) {\n      if (this.config.startNodeId) {\n        this.setCurrentNode(this.config.startNodeId);\n      }\n    } else if (this.config.nodes) {\n      this.setNodes(this.config.nodes, this.config.startNodeId);\n      delete this.config.nodes;\n    }\n  }\n  /**\n   * @internal\n   */\n  destroy() {\n    this.map?.removeEventListener(\"select-hotspot\", this);\n    this.plan?.removeEventListener(\"select-hotspot\", this);\n    this.datasource.destroy();\n    this.arrowsRenderer.destroy();\n    delete this.datasource;\n    delete this.markers;\n    delete this.compass;\n    delete this.gallery;\n    delete this.arrowsRenderer;\n    super.destroy();\n  }\n  /**\n   * @internal\n   */\n  handleEvent(e) {\n    if (e instanceof events2.ClickEvent) {\n      const link = e.data.objects.find(o => o.userData[LINK_DATA])?.userData[LINK_DATA];\n      if (link) {\n        this.setCurrentNode(link.nodeId, null, link);\n      }\n    } else if (e.type === \"select-hotspot\") {\n      const id = e.hotspotId;\n      if (id.startsWith(LINK_ID)) {\n        this.setCurrentNode(id.substring(LINK_ID.length));\n      }\n    }\n  }\n  /**\n   * Returns the current node\n   */\n  getCurrentNode() {\n    return this.state.currentNode;\n  }\n  /**\n   * Sets the nodes (client mode only)\n   * @throws {@link PSVError} if not in client mode\n   */\n  setNodes(nodes, startNodeId) {\n    if (this.isServerSide) {\n      throw new PSVError4(\"Cannot set nodes in server side mode\");\n    }\n    this.__hideTooltip();\n    this.state.currentNode = null;\n    this.datasource.setNodes(nodes);\n    if (!startNodeId) {\n      startNodeId = nodes[0].id;\n    } else if (!this.datasource.nodes[startNodeId]) {\n      startNodeId = nodes[0].id;\n      utils5.logWarn(`startNodeId not found is provided nodes, resetted to ${startNodeId}`);\n    }\n    this.setCurrentNode(startNodeId);\n    this.__setGalleryItems();\n    this.__setMapHotspots();\n    this.__setPlanHotspots();\n  }\n  /**\n   * Changes the current node\n   * @returns {Promise<boolean>} resolves false if the loading was aborted by another call\n   */\n  setCurrentNode(nodeId, options, fromLink) {\n    if (nodeId === this.state.currentNode?.id && !options?.forceUpdate) {\n      return Promise.resolve(true);\n    }\n    if (options?.forceUpdate && this.isServerSide) {\n      this.datasource.clearCache();\n    }\n    this.viewer.hideError();\n    this.state.loadingNode = nodeId;\n    const fromNode = this.state.currentNode;\n    const fromLinkPosition = fromNode && fromLink ? this.__getLinkPosition(fromNode, fromLink) : null;\n    return Promise.resolve(this.state.preload[nodeId]).then(() => {\n      if (this.state.loadingNode !== nodeId) {\n        throw utils5.getAbortError();\n      }\n      return this.datasource.loadNode(nodeId);\n    }).then(node => {\n      if (this.state.loadingNode !== nodeId) {\n        throw utils5.getAbortError();\n      }\n      const transitionOptions = {\n        ...getConfig.defaults.transitionOptions,\n        rotateTo: fromLinkPosition,\n        zoomTo: fromLinkPosition ? this.viewer.getZoomLevel() : null,\n        // prevents the adapter to apply InitialHorizontalFOVDegrees\n        ...(typeof this.config.transitionOptions === \"function\" ? this.config.transitionOptions(node, fromNode, fromLink) : this.config.transitionOptions),\n        ...options\n      };\n      if (!transitionOptions.effect) {\n        transitionOptions.effect = \"none\";\n      }\n      this.viewer.panel.hide(\"description\");\n      this.__hideTooltip();\n      this.arrowsRenderer.clear();\n      if (this.gallery?.config.hideOnClick) {\n        this.gallery.hide();\n      }\n      if (this.map?.config.minimizeOnHotspotClick) {\n        this.map.minimize();\n      }\n      if (this.plan?.config.minimizeOnHotspotClick) {\n        this.plan.minimize();\n      }\n      if (transitionOptions.rotation && transitionOptions.effect === \"none\") {\n        return this.viewer.animate({\n          ...transitionOptions.rotateTo,\n          zoom: transitionOptions.zoomTo,\n          speed: transitionOptions.speed\n        }).then(() => [node, transitionOptions]);\n      } else {\n        return Promise.resolve([node, transitionOptions]);\n      }\n    }).then(([node, transitionOptions]) => {\n      if (this.state.loadingNode !== nodeId) {\n        throw utils5.getAbortError();\n      }\n      this.markers?.clearMarkers();\n      if (this.config.linksOnCompass) {\n        this.compass?.clearHotspots();\n      }\n      return this.viewer.setPanorama(node.panorama, {\n        caption: node.caption,\n        description: node.description,\n        panoData: node.panoData,\n        sphereCorrection: node.sphereCorrection,\n        showLoader: transitionOptions.showLoader,\n        position: transitionOptions.rotateTo,\n        zoom: transitionOptions.zoomTo,\n        transition: transitionOptions.effect === \"none\" ? false : {\n          effect: transitionOptions.effect,\n          rotation: transitionOptions.rotation,\n          speed: transitionOptions.speed\n        }\n      }).then(completed => {\n        if (!completed) {\n          throw utils5.getAbortError();\n        }\n        return node;\n      });\n    }).then(node => {\n      if (this.state.loadingNode !== nodeId) {\n        throw utils5.getAbortError();\n      }\n      this.state.currentNode = node;\n      if (this.map) {\n        this.map.setCenter(this.__getNodeMapPosition(node) ?? this.map.config.center);\n      }\n      this.plan?.setCoordinates(node.gps);\n      this.__addNodeMarkers(node);\n      this.__renderLinks(node);\n      this.__preload(node);\n      this.state.loadingNode = null;\n      this.dispatchEvent(new NodeChangedEvent(node, {\n        fromNode,\n        fromLink,\n        fromLinkPosition\n      }));\n      this.viewer.resetIdleTimer();\n      return true;\n    }).catch(err => {\n      if (utils5.isAbortError(err)) {\n        return false;\n      }\n      this.viewer.showError(this.viewer.config.lang.loadError);\n      this.viewer.loader.hide();\n      this.viewer.navbar.setCaption(\"\");\n      this.state.loadingNode = null;\n      throw err;\n    });\n  }\n  /**\n   * Rotate the view to face the link\n   */\n  async gotoLink(nodeId, speed = \"8rpm\") {\n    const position = this.getLinkPosition(nodeId);\n    if (!speed) {\n      this.viewer.rotate(position);\n    } else {\n      await this.viewer.animate({\n        ...position,\n        speed\n      });\n    }\n  }\n  /**\n   * Returns the position of a link in the viewer\n   */\n  getLinkPosition(nodeId) {\n    const link = this.state.currentNode?.links.find(link2 => link2.nodeId === nodeId);\n    if (!link) {\n      throw new PSVError4(`Cannot find link \"${nodeId}\"`);\n    }\n    return this.__getLinkPosition(this.state.currentNode, link);\n  }\n  /**\n   * Updates a node (client mode only)\n   * All properties but \"id\" are optional, the new config will be merged with the previous\n   * @throws {@link PSVError} if not in client mode\n   */\n  updateNode(newNode) {\n    if (this.isServerSide) {\n      throw new PSVError4(\"Cannot update node in server side mode\");\n    }\n    const node = this.datasource.updateNode(newNode);\n    if (newNode.name || newNode.thumbnail || newNode.panorama) {\n      this.__setGalleryItems();\n    }\n    if (newNode.name || newNode.gps || newNode.map) {\n      this.__setMapHotspots();\n    }\n    if (newNode.name || newNode.gps || newNode.plan) {\n      this.__setPlanHotspots();\n    }\n    if (this.state.currentNode?.id === node.id) {\n      this.__hideTooltip();\n      if (newNode.panorama || newNode.panoData || newNode.sphereCorrection) {\n        this.setCurrentNode(node.id, {\n          forceUpdate: true\n        });\n        return;\n      }\n      if (newNode.caption) {\n        this.viewer.setOption(\"caption\", node.caption);\n      }\n      if (newNode.description) {\n        this.viewer.setOption(\"description\", node.description);\n      }\n      if (newNode.links || newNode.gps) {\n        this.__renderLinks(node);\n      }\n      if (newNode.gps) {\n        this.plan?.setCoordinates(node.gps);\n      }\n      if (newNode.map || newNode.gps) {\n        this.map?.setCenter(this.__getNodeMapPosition(node));\n      }\n      if (newNode.markers || newNode.gps) {\n        this.__addNodeMarkers(node);\n      }\n    }\n  }\n  /**\n   * Updates the gallery plugin\n   */\n  __setGalleryItems() {\n    if (this.gallery) {\n      this.gallery.setItems(Object.values(this.datasource.nodes).filter(node => node.showInGallery !== false).map(node => ({\n        id: node.id,\n        panorama: node.panorama,\n        name: node.name,\n        thumbnail: node.thumbnail\n      })), id => {\n        this.setCurrentNode(id);\n      });\n    }\n  }\n  /**\n   * Update the map plugin\n   */\n  __setMapHotspots() {\n    if (this.map) {\n      this.map.setHotspots(Object.values(this.datasource.nodes).filter(node => node.map !== false).map(node => ({\n        tooltip: node.name,\n        ...(node.map || {}),\n        ...this.__getNodeMapPosition(node),\n        id: LINK_ID + node.id\n      })));\n    }\n  }\n  /**\n   * Updates the plan plugin\n   */\n  __setPlanHotspots() {\n    if (this.plan) {\n      this.plan.setHotspots(Object.values(this.datasource.nodes).filter(node => node.plan !== false).map(node => ({\n        tooltip: node.name,\n        ...(node.plan || {}),\n        coordinates: node.gps,\n        id: LINK_ID + node.id\n      })));\n    }\n  }\n  /**\n   * Adds the links for the node\n   */\n  __renderLinks(node) {\n    this.arrowsRenderer.clear();\n    const positions = [];\n    node.links.forEach(link => {\n      const position = this.__getLinkPosition(node, link);\n      position.yaw += link.linkOffset?.yaw ?? 0;\n      position.pitch += link.linkOffset?.pitch ?? 0;\n      if (this.isGps && !this.is3D) {\n        position.pitch += this.config.arrowsPosition.linkPitchOffset;\n      }\n      positions.push(position);\n      this.arrowsRenderer.addLinkArrow(link, position, link.linkOffset?.depth);\n    });\n    this.arrowsRenderer.render();\n    if (this.config.linksOnCompass) {\n      this.compass?.setHotspots(positions);\n    }\n  }\n  /**\n   * Computes the marker position for a link\n   */\n  __getLinkPosition(node, link) {\n    if (this.isGps) {\n      return gpsToSpherical(node.gps, link.gps);\n    } else {\n      return this.viewer.dataHelper.cleanPosition(link.position);\n    }\n  }\n  /**\n   * Returns the complete tootlip content for a node\n   */\n  async __getTooltipContent(link) {\n    const node = await this.datasource.loadNode(link.nodeId);\n    const elements = [];\n    if (node.name || node.thumbnail || node.caption) {\n      if (node.name) {\n        elements.push(`<h3>${node.name}</h3>`);\n      }\n      if (node.thumbnail) {\n        elements.push(`<img src=\"${node.thumbnail}\">`);\n      }\n      if (node.caption) {\n        elements.push(`<p>${node.caption}</p>`);\n      }\n    }\n    let content = elements.join(\"\");\n    if (this.config.getLinkTooltip) {\n      content = this.config.getLinkTooltip(content, link, node);\n    }\n    return content;\n  }\n  /** @internal */\n  __onEnterArrow(link, evt) {\n    const viewerPos = utils5.getPosition(this.viewer.container);\n    const viewerPoint = {\n      x: evt.clientX - viewerPos.x,\n      y: evt.clientY - viewerPos.y\n    };\n    if (this.config.showLinkTooltip) {\n      this.state.currentTooltip = this.viewer.createTooltip({\n        ...LOADING_TOOLTIP,\n        left: viewerPoint.x,\n        top: viewerPoint.y,\n        box: {\n          // separate the tooltip from the cursor\n          width: 20,\n          height: 20\n        }\n      });\n      this.__getTooltipContent(link).then(content => {\n        if (content) {\n          this.state.currentTooltip.update(content);\n        } else {\n          this.__hideTooltip();\n        }\n      });\n    }\n    this.map?.setActiveHotspot(LINK_ID + link.nodeId);\n    this.plan?.setActiveHotspot(LINK_ID + link.nodeId);\n    this.dispatchEvent(new EnterArrowEvent(link, this.state.currentNode));\n  }\n  /** @internal */\n  __onHoverArrow(evt) {\n    const viewerPos = utils5.getPosition(this.viewer.container);\n    const viewerPoint = {\n      x: evt.clientX - viewerPos.x,\n      y: evt.clientY - viewerPos.y\n    };\n    this.state.currentTooltip?.move({\n      left: viewerPoint.x,\n      top: viewerPoint.y\n    });\n  }\n  /** @internal */\n  __onLeaveArrow(link) {\n    this.__hideTooltip();\n    this.map?.setActiveHotspot(null);\n    this.plan?.setActiveHotspot(null);\n    this.dispatchEvent(new LeaveArrowEvent(link, this.state.currentNode));\n  }\n  /**\n   * Hides the tooltip\n   */\n  __hideTooltip() {\n    this.state.currentTooltip?.hide();\n    this.state.currentTooltip = null;\n  }\n  /**\n   * Manage the preload of the linked panoramas\n   */\n  __preload(node) {\n    if (!this.config.preload) {\n      return;\n    }\n    this.state.preload[node.id] = true;\n    this.state.currentNode.links.filter(link => !this.state.preload[link.nodeId]).filter(link => {\n      if (typeof this.config.preload === \"function\") {\n        return this.config.preload(this.state.currentNode, link);\n      } else {\n        return true;\n      }\n    }).forEach(link => {\n      this.state.preload[link.nodeId] = this.datasource.loadNode(link.nodeId).then(linkNode => {\n        return this.viewer.textureLoader.preloadPanorama(linkNode.panorama);\n      }).then(() => {\n        this.state.preload[link.nodeId] = true;\n      }).catch(() => {\n        delete this.state.preload[link.nodeId];\n      });\n    });\n  }\n  /**\n   * Changes the markers to the ones defined on the node\n   */\n  __addNodeMarkers(node) {\n    if (node.markers) {\n      if (this.markers) {\n        this.markers.setMarkers(node.markers.map(marker => {\n          if (marker.gps && this.isGps) {\n            marker.position = gpsToSpherical(node.gps, marker.gps);\n            if (marker.data?.[\"map\"]) {\n              Object.assign(marker.data[\"map\"], this.__getGpsMapPosition(marker.gps));\n            }\n            if (marker.data?.[\"plan\"]) {\n              marker.data[\"plan\"].coordinates = marker.gps;\n            }\n          }\n          return marker;\n        }));\n      } else {\n        utils5.logWarn(`Node ${node.id} markers ignored because the plugin is not loaded.`);\n      }\n    }\n  }\n  /**\n   * Gets the position of a node on the map, if applicable\n   */\n  __getNodeMapPosition(node) {\n    const fromGps = this.__getGpsMapPosition(node.gps);\n    if (fromGps) {\n      return fromGps;\n    } else if (node.map) {\n      return {\n        x: node.map.x,\n        y: node.map.y\n      };\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Gets a gps position on the map\n   */\n  __getGpsMapPosition(gps) {\n    const map = this.config.map;\n    if (this.isGps && map && map.extent && map.size) {\n      return {\n        x: MathUtils3.mapLinear(gps[0], map.extent[0], map.extent[2], 0, map.size.width),\n        y: MathUtils3.mapLinear(gps[1], map.extent[1], map.extent[3], 0, map.size.height)\n      };\n    } else {\n      return null;\n    }\n  }\n};\nVirtualTourPlugin.id = \"virtual-tour\";\nVirtualTourPlugin.VERSION = \"5.13.2\";\nVirtualTourPlugin.configParser = getConfig;\nVirtualTourPlugin.readonlyOptions = Object.keys(getConfig.defaults);\nexport { VirtualTourPlugin, events_exports as events };","map":{"version":3,"names":["events_exports","__export","EnterArrowEvent","LeaveArrowEvent","NodeChangedEvent","TypedEvent","_NodeChangedEvent","constructor","node","data","type","_EnterArrowEvent","link","_LeaveArrowEvent","AbstractConfigurablePlugin","PSVError","PSVError4","events","events2","utils","utils5","MathUtils","MathUtils3","AbstractComponent","PerspectiveCamera","Scene","Matrix4","Object3D","Vector2","Vector3","CSS2DObject","element","document","createElement","isCSS2DObject","style","position","userSelect","setAttribute","center","addEventListener","traverse","object","ownerDocument","defaultView","Element","parentNode","remove","copy","source","recursive","cloneNode","_vector","_viewMatrix","_viewProjectionMatrix","_a","_b","CSS2DRenderer","parameters","_this","_width","_height","_widthHalf","_heightHalf","cache","objects","WeakMap","domElement","overflow","getSize","width","height","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","renderObject","zOrder","setSize","hideObject","display","i","l","children","length","visible","setFromMatrixPosition","matrixWorld","applyMatrix4","z","layers","test","onBeforeRender","transform","x","y","appendChild","onAfterRender","objectData","distanceToCameraSquared","getDistanceToSquared","set","object1","object2","distanceToSquared","filterAndFlatten","result","traverseVisible","push","sorted","sort","a","b","renderOrder","distanceA","get","distanceB","zMax","zIndex","Matrix42","Object3D2","Quaternion","Vector32","_position","_quaternion","_scale","CSS3DObject","isCSS3DObject","pointerEvents","_matrix","_matrix2","CSS3DRenderer","viewElement","transformOrigin","cameraElement","transformStyle","fov","elements","view","enabled","offsetX","offsetY","fullWidth","fullHeight","tx","ty","isOrthographicCamera","right","left","top","bottom","scaleByViewOffset","cameraCSSMatrix","epsilon","getCameraCSSMatrix","perspective","isPerspectiveCamera","value","Math","abs","matrix","getObjectCSSMatrix","matrix3d","isCSS3DSprite","transpose","rotation2D","multiply","makeRotationZ","decompose","setPosition","scale","cachedObject","arrow_default","LINK_DATA","LINK_ID","LOADING_TOOLTIP","className","content","DEFAULT_ARROW","button","innerHTML","size","ARROW_DATA","ArrowsRenderer","plugin","renderer","is3D","container","viewer","ReadyEvent","once","PositionUpdatedEvent","SizeUpdatedEvent","RenderEvent","ClickEvent","e","preventDefault","arrowsPosition","config","arrowStyle","init","gallery","getPlugin","destroy","removeEventListener","handleEvent","__updateCamera","rightclick","__getTargetLink","target","setCurrentNode","nodeId","getEventTarget","__onEnterArrow","__onLeaveArrow","__onHoverArrow","__onToggleGallery","fullscreen","getPosition","pitch","clamp","maxPitch","minPitch","dataHelper","sphericalCoordsToVector3","negate","lookAt","translateY","updateProjectionMatrix","objectsAndDist","minDist","Number","MAX_SAFE_INTEGER","forEach","userData","conflict","distance2","getShortestArc","yaw","min","fade","opacity","clear","__buildArrowElement","image","src","addLinkArrow","depth","conf","classList","add","addClasses","Object","assign","linkOverlapAngle","rotation","PI","closest","target2","getClosest","marginBottom","querySelector","offsetHeight","PSVError2","utils3","utils2","AbstractDatasource","nodes","checkNode","id","panorama","isGps","gps","markers","some","marker","links","logWarn","checkLink","isExtendedPosition","ClientSideDatasource","loadNode","setNodes","rawNodes","linkedNodes","__checkLinks","updateNode","rawNode","PSVError3","ServerSideDatasource","getNode","nodeResolver","clearCache","utils4","MathUtils2","gpsToSpherical","gps1","gps2","p1","gpsDegToRad","p2","h1","h2","atan","distance","bearing","degToRad","greatArcDistance","long1","lat1","long2","lat2","sin","cos","atan2","getConfig","getConfigParser","dataMode","positionMode","renderMode","startNodeId","preload","transitionOptions","showLoader","speed","effect","linksOnCompass","showLinkTooltip","getLinkTooltip","linkPitchOffset","map","defValue","rawConfig","imageUrl","VirtualTourPlugin","state","currentNode","currentTooltip","loadingNode","arrowsRenderer","isServerSide","checkStylesheet","compass","plan","datasource","setImage","find","o","hotspotId","startsWith","substring","getCurrentNode","__hideTooltip","__setGalleryItems","__setMapHotspots","__setPlanHotspots","options","fromLink","forceUpdate","Promise","resolve","hideError","fromNode","fromLinkPosition","__getLinkPosition","then","getAbortError","defaults","rotateTo","zoomTo","getZoomLevel","panel","hide","hideOnClick","minimizeOnHotspotClick","minimize","animate","zoom","clearMarkers","clearHotspots","setPanorama","caption","description","panoData","sphereCorrection","transition","completed","setCenter","__getNodeMapPosition","setCoordinates","__addNodeMarkers","__renderLinks","__preload","dispatchEvent","resetIdleTimer","catch","err","isAbortError","showError","lang","loadError","loader","navbar","setCaption","gotoLink","getLinkPosition","rotate","link2","newNode","name","thumbnail","setOption","setItems","values","filter","showInGallery","setHotspots","tooltip","coordinates","positions","linkOffset","cleanPosition","__getTooltipContent","join","evt","viewerPos","viewerPoint","clientX","clientY","createTooltip","box","update","setActiveHotspot","move","linkNode","textureLoader","preloadPanorama","setMarkers","__getGpsMapPosition","fromGps","extent","mapLinear","VERSION","configParser","readonlyOptions","keys"],"sources":["/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/events.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/VirtualTourPlugin.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/ArrowsRenderer.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/node_modules/three/examples/jsm/renderers/CSS2DRenderer.js","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/node_modules/three/examples/jsm/renderers/CSS3DRenderer.js","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/arrow.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/constants.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/datasources/ClientSideDatasource.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/datasources/AbstractDataSource.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/datasources/ServerSideDatasource.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/virtual-tour-plugin/src/utils.ts"],"sourcesContent":["import { Position, TypedEvent } from '@photo-sphere-viewer/core';\nimport { VirtualTourLink, VirtualTourNode } from './model';\nimport type { VirtualTourPlugin } from './VirtualTourPlugin';\n\n/**\n * @event Triggered when the current node changes\n */\nexport class NodeChangedEvent extends TypedEvent<VirtualTourPlugin> {\n    static override readonly type = 'node-changed';\n    override type: 'node-changed';\n\n    /** @internal */\n    constructor(\n        public readonly node: VirtualTourNode,\n        public readonly data: {\n            fromNode: VirtualTourNode;\n            fromLink: VirtualTourLink;\n            fromLinkPosition: Position;\n        },\n    ) {\n        super(NodeChangedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the user puts the cursor hover a marker\n */\nexport class EnterArrowEvent extends TypedEvent<VirtualTourPlugin> {\n    static override readonly type = 'enter-arrow';\n    override type: 'enter-arrow';\n\n    /** @internal */\n    constructor(\n        public readonly link: VirtualTourLink,\n        public readonly node: VirtualTourNode,\n    ) {\n        super(EnterArrowEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the user puts the cursor away from an arrow\n */\nexport class LeaveArrowEvent extends TypedEvent<VirtualTourPlugin> {\n    static override readonly type = 'leave-arrow';\n    override type: 'leave-arrow';\n\n    /** @internal */\n    constructor(\n        public readonly link: VirtualTourLink,\n        public readonly node: VirtualTourNode,\n    ) {\n        super(LeaveArrowEvent.type);\n    }\n}\n\nexport type VirtualTourEvents =\n    | NodeChangedEvent\n    | EnterArrowEvent\n    | LeaveArrowEvent;\n","import type { CompassPlugin } from '@photo-sphere-viewer/compass-plugin';\nimport type { Point, Position, Tooltip, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractConfigurablePlugin, PSVError, events, utils } from '@photo-sphere-viewer/core';\nimport type { GalleryPlugin } from '@photo-sphere-viewer/gallery-plugin';\nimport type { MapPlugin, events as mapEvents } from '@photo-sphere-viewer/map-plugin';\nimport type { MarkersPlugin } from '@photo-sphere-viewer/markers-plugin';\nimport type { PlanPlugin, events as planEvents } from '@photo-sphere-viewer/plan-plugin';\nimport { MathUtils } from 'three';\nimport { ArrowsRenderer } from './ArrowsRenderer';\nimport { DEFAULT_ARROW, LINK_DATA, LINK_ID, LOADING_TOOLTIP } from './constants';\nimport { AbstractDatasource } from './datasources/AbstractDataSource';\nimport { ClientSideDatasource } from './datasources/ClientSideDatasource';\nimport { ServerSideDatasource } from './datasources/ServerSideDatasource';\nimport { EnterArrowEvent, LeaveArrowEvent, NodeChangedEvent, VirtualTourEvents } from './events';\nimport {\n    GpsPosition,\n    VirtualTourLink,\n    VirtualTourNode,\n    VirtualTourPluginConfig,\n    VirtualTourTransitionOptions,\n} from './model';\nimport { gpsToSpherical } from './utils';\n\nconst getConfig = utils.getConfigParser<VirtualTourPluginConfig>(\n    {\n        dataMode: 'client',\n        positionMode: 'manual',\n        renderMode: '3d',\n        nodes: null,\n        getNode: null,\n        startNodeId: null,\n        preload: false,\n        transitionOptions: {\n            showLoader: true,\n            speed: '20rpm',\n            effect: 'fade',\n            rotation: true,\n        },\n        linksOnCompass: true,\n        showLinkTooltip: true,\n        getLinkTooltip: null,\n        arrowStyle: DEFAULT_ARROW,\n        arrowsPosition: {\n            minPitch: 0.3,\n            maxPitch: Math.PI / 2,\n            linkOverlapAngle: Math.PI / 4,\n            linkPitchOffset: -0.1,\n        },\n        map: null,\n    },\n    {\n        dataMode(dataMode) {\n            if (dataMode !== 'client' && dataMode !== 'server') {\n                throw new PSVError('VirtualTourPlugin: invalid dataMode');\n            }\n            return dataMode;\n        },\n        positionMode(positionMode) {\n            if (positionMode !== 'gps' && positionMode !== 'manual') {\n                throw new PSVError('VirtualTourPlugin: invalid positionMode');\n            }\n            return positionMode;\n        },\n        renderMode(renderMode) {\n            if (renderMode !== '3d' && renderMode !== '2d') {\n                throw new PSVError('VirtualTourPlugin: invalid renderMode');\n            }\n            return renderMode;\n        },\n        arrowsPosition(arrowsPosition, { defValue }) {\n            return { ...defValue, ...arrowsPosition };\n        },\n        arrowStyle(arrowStyle, { defValue }) {\n            return { ...defValue, ...arrowStyle };\n        },\n        map(map, { rawConfig }) {\n            if (map) {\n                if (rawConfig.dataMode === 'server') {\n                    utils.logWarn('VirtualTourPlugin: The map cannot be used in server side mode');\n                    return null;\n                }\n                if (!map.imageUrl) {\n                    utils.logWarn('VirtualTourPlugin: configuring the map requires at least \"imageUrl\"');\n                    return null;\n                }\n            }\n            return map;\n        },\n    },\n);\n\n/**\n * Creates virtual tours by linking multiple panoramas\n */\nexport class VirtualTourPlugin extends AbstractConfigurablePlugin<\n    VirtualTourPluginConfig,\n    VirtualTourPluginConfig,\n    never,\n    VirtualTourEvents\n> {\n    static override readonly id = 'virtual-tour';\n    static override readonly VERSION = PKG_VERSION;\n    static override readonly configParser = getConfig;\n    static override readonly readonlyOptions = Object.keys(getConfig.defaults);\n\n    private readonly state = {\n        currentNode: null as VirtualTourNode,\n        currentTooltip: null as Tooltip,\n        loadingNode: null as string,\n        preload: {} as Record<string, boolean | Promise<any>>,\n    };\n\n    private datasource: AbstractDatasource;\n    private arrowsRenderer: ArrowsRenderer;\n\n    private map?: MapPlugin;\n    private plan?: PlanPlugin;\n    private markers?: MarkersPlugin;\n    private compass?: CompassPlugin;\n    private gallery?: GalleryPlugin;\n\n    get is3D(): boolean {\n        return this.config.renderMode === '3d';\n    }\n\n    get isServerSide(): boolean {\n        return this.config.dataMode === 'server';\n    }\n\n    get isGps(): boolean {\n        return this.config.positionMode === 'gps';\n    }\n\n    constructor(viewer: Viewer, config: VirtualTourPluginConfig) {\n        super(viewer, config);\n\n        this.arrowsRenderer = new ArrowsRenderer(this.viewer, this);\n    }\n\n    /**\n     * @internal\n     */\n    override init() {\n        super.init();\n\n        this.arrowsRenderer.init();\n\n        utils.checkStylesheet(this.viewer.container, 'virtual-tour-plugin');\n\n        this.markers = this.viewer.getPlugin('markers');\n        this.compass = this.viewer.getPlugin('compass');\n\n        if (this.markers?.config.markers) {\n            utils.logWarn(\n                'No default markers can be configured on the MarkersPlugin when using the VirtualTourPlugin. '\n                + 'Consider defining `markers` on each tour node.',\n            );\n            delete this.markers.config.markers;\n        }\n\n        if (this.isGps) {\n            this.plan = this.viewer.getPlugin('plan');\n        }\n\n        if (!this.isServerSide) {\n            this.gallery = this.viewer.getPlugin('gallery');\n            this.map = this.viewer.getPlugin('map');\n\n            if (this.config.map && !this.map) {\n                utils.logWarn('The map is configured on the VirtualTourPlugin but the MapPlugin is not loaded.');\n            }\n        }\n\n        this.datasource = this.isServerSide\n            ? new ServerSideDatasource(this, this.viewer)\n            : new ClientSideDatasource(this, this.viewer);\n\n        if (this.map) {\n            this.map.addEventListener('select-hotspot', this);\n            this.map.setImage(this.config.map.imageUrl);\n        }\n\n        this.plan?.addEventListener('select-hotspot', this);\n\n        if (this.isServerSide) {\n            if (this.config.startNodeId) {\n                this.setCurrentNode(this.config.startNodeId);\n            }\n        } else if (this.config.nodes) {\n            this.setNodes(this.config.nodes, this.config.startNodeId);\n            delete this.config.nodes;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.map?.removeEventListener('select-hotspot', this);\n        this.plan?.removeEventListener('select-hotspot', this);\n\n        this.datasource.destroy();\n        this.arrowsRenderer.destroy();\n\n        delete this.datasource;\n        delete this.markers;\n        delete this.compass;\n        delete this.gallery;\n        delete this.arrowsRenderer;\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.ClickEvent) {\n            const link = e.data.objects.find(o => o.userData[LINK_DATA])?.userData[LINK_DATA];\n            if (link) {\n                this.setCurrentNode(link.nodeId, null, link);\n            }\n        } else if (e.type === 'select-hotspot') {\n            const id = (e as mapEvents.SelectHotspot | planEvents.SelectHotspot).hotspotId;\n            if (id.startsWith(LINK_ID)) {\n                this.setCurrentNode(id.substring(LINK_ID.length));\n            }\n        }\n    }\n\n    /**\n     * Returns the current node\n     */\n    getCurrentNode(): VirtualTourNode {\n        return this.state.currentNode;\n    }\n\n    /**\n     * Sets the nodes (client mode only)\n     * @throws {@link PSVError} if not in client mode\n     */\n    setNodes(nodes: VirtualTourNode[], startNodeId?: string) {\n        if (this.isServerSide) {\n            throw new PSVError('Cannot set nodes in server side mode');\n        }\n\n        this.__hideTooltip();\n        this.state.currentNode = null;\n\n        (this.datasource as ClientSideDatasource).setNodes(nodes);\n\n        if (!startNodeId) {\n            startNodeId = nodes[0].id;\n        } else if (!this.datasource.nodes[startNodeId]) {\n            startNodeId = nodes[0].id;\n            utils.logWarn(`startNodeId not found is provided nodes, resetted to ${startNodeId}`);\n        }\n        this.setCurrentNode(startNodeId);\n\n        this.__setGalleryItems();\n        this.__setMapHotspots();\n        this.__setPlanHotspots();\n    }\n\n    /**\n     * Changes the current node\n     * @returns {Promise<boolean>} resolves false if the loading was aborted by another call\n     */\n    setCurrentNode(\n        nodeId: string,\n        options?: VirtualTourTransitionOptions & {\n            /**\n             * reload the node even if already loaded\n             */\n            forceUpdate?: boolean;\n        },\n        fromLink?: VirtualTourLink,\n    ): Promise<boolean> {\n        if (nodeId === this.state.currentNode?.id && !options?.forceUpdate) {\n            return Promise.resolve(true);\n        }\n\n        if (options?.forceUpdate && this.isServerSide) {\n            (this.datasource as ServerSideDatasource).clearCache();\n        }\n\n        this.viewer.hideError();\n\n        this.state.loadingNode = nodeId;\n\n        const fromNode = this.state.currentNode;\n        const fromLinkPosition = fromNode && fromLink ? this.__getLinkPosition(fromNode, fromLink) : null;\n\n        // if this node is already preloading, wait for it\n        return Promise.resolve(this.state.preload[nodeId])\n            .then(() => {\n                if (this.state.loadingNode !== nodeId) {\n                    throw utils.getAbortError();\n                }\n\n                return this.datasource.loadNode(nodeId);\n            })\n            .then((node) => {\n                if (this.state.loadingNode !== nodeId) {\n                    throw utils.getAbortError();\n                }\n\n                const transitionOptions: VirtualTourTransitionOptions = {\n                    ...getConfig.defaults.transitionOptions,\n                    rotateTo: fromLinkPosition,\n                    zoomTo: fromLinkPosition ? this.viewer.getZoomLevel() : null, // prevents the adapter to apply InitialHorizontalFOVDegrees\n                    ...(typeof this.config.transitionOptions === 'function'\n                        ? this.config.transitionOptions(node, fromNode, fromLink)\n                        : this.config.transitionOptions),\n                    ...options,\n                };\n\n                if (!transitionOptions.effect) {\n                    transitionOptions.effect = 'none';\n                }\n\n                this.viewer.panel.hide('description');\n\n                this.__hideTooltip();\n\n                this.arrowsRenderer.clear();\n\n                if (this.gallery?.config.hideOnClick) {\n                    this.gallery.hide();\n                }\n                if (this.map?.config.minimizeOnHotspotClick) {\n                    this.map.minimize();\n                }\n                if (this.plan?.config.minimizeOnHotspotClick) {\n                    this.plan.minimize();\n                }\n\n                if (transitionOptions.rotation && transitionOptions.effect === 'none') {\n                    return this.viewer\n                        .animate({\n                            ...transitionOptions.rotateTo,\n                            zoom: transitionOptions.zoomTo,\n                            speed: transitionOptions.speed,\n                        })\n                        .then(() => [node, transitionOptions] as [VirtualTourNode, VirtualTourTransitionOptions]);\n                } else {\n                    return Promise.resolve([node, transitionOptions] as [VirtualTourNode, VirtualTourTransitionOptions]);\n                }\n            })\n            .then(([node, transitionOptions]) => {\n                if (this.state.loadingNode !== nodeId) {\n                    throw utils.getAbortError();\n                }\n\n                this.markers?.clearMarkers();\n\n                if (this.config.linksOnCompass) {\n                    this.compass?.clearHotspots();\n                }\n\n                return this.viewer\n                    .setPanorama(node.panorama, {\n                        caption: node.caption,\n                        description: node.description,\n                        panoData: node.panoData,\n                        sphereCorrection: node.sphereCorrection,\n                        showLoader: transitionOptions.showLoader,\n                        position: transitionOptions.rotateTo,\n                        zoom: transitionOptions.zoomTo,\n                        transition: transitionOptions.effect === 'none'\n                            ? false\n                            : {\n                                    effect: transitionOptions.effect,\n                                    rotation: transitionOptions.rotation,\n                                    speed: transitionOptions.speed,\n                                },\n                    })\n                    .then((completed) => {\n                        if (!completed) {\n                            throw utils.getAbortError();\n                        }\n\n                        return node;\n                    });\n            })\n            .then((node) => {\n                if (this.state.loadingNode !== nodeId) {\n                    throw utils.getAbortError();\n                }\n\n                this.state.currentNode = node;\n\n                if (this.map) {\n                    // if the node is not visible in the map, we don't know where to center the map\n                    // so we keep the current center\n                    this.map.setCenter(this.__getNodeMapPosition(node) ?? this.map.config.center);\n                }\n                this.plan?.setCoordinates(node.gps);\n\n                this.__addNodeMarkers(node);\n                this.__renderLinks(node);\n                this.__preload(node);\n\n                this.state.loadingNode = null;\n\n                this.dispatchEvent(\n                    new NodeChangedEvent(node, {\n                        fromNode,\n                        fromLink,\n                        fromLinkPosition,\n                    }),\n                );\n\n                this.viewer.resetIdleTimer();\n\n                return true;\n            })\n            .catch((err) => {\n                if (utils.isAbortError(err)) {\n                    return false;\n                }\n\n                this.viewer.showError(this.viewer.config.lang.loadError);\n\n                this.viewer.loader.hide();\n                this.viewer.navbar.setCaption('');\n\n                this.state.loadingNode = null;\n\n                throw err;\n            });\n    }\n\n    /**\n     * Rotate the view to face the link\n     */\n    async gotoLink(nodeId: string, speed: string | number = '8rpm'): Promise<void> {\n        const position = this.getLinkPosition(nodeId);\n\n        if (!speed) {\n            this.viewer.rotate(position);\n        } else {\n            await this.viewer.animate({\n                ...position,\n                speed,\n            });\n        }\n    }\n\n    /**\n     * Returns the position of a link in the viewer\n     */\n    getLinkPosition(nodeId: string): Position {\n        const link = this.state.currentNode?.links.find(link => link.nodeId === nodeId);\n\n        if (!link) {\n            throw new PSVError(`Cannot find link \"${nodeId}\"`);\n        }\n\n        return this.__getLinkPosition(this.state.currentNode, link);\n    }\n\n    /**\n     * Updates a node (client mode only)\n     * All properties but \"id\" are optional, the new config will be merged with the previous\n     * @throws {@link PSVError} if not in client mode\n     */\n    updateNode(newNode: Partial<VirtualTourNode> & { id: VirtualTourNode['id'] }) {\n        if (this.isServerSide) {\n            throw new PSVError('Cannot update node in server side mode');\n        }\n\n        const node = (this.datasource as ClientSideDatasource).updateNode(newNode);\n\n        if (newNode.name || newNode.thumbnail || newNode.panorama) {\n            this.__setGalleryItems();\n        }\n        if (newNode.name || newNode.gps || newNode.map) {\n            this.__setMapHotspots();\n        }\n        if (newNode.name || newNode.gps || newNode.plan) {\n            this.__setPlanHotspots();\n        }\n\n        if (this.state.currentNode?.id === node.id) {\n            this.__hideTooltip();\n\n            if (newNode.panorama || newNode.panoData || newNode.sphereCorrection) {\n                this.setCurrentNode(node.id, { forceUpdate: true });\n                return;\n            }\n\n            if (newNode.caption) {\n                this.viewer.setOption('caption', node.caption);\n            }\n            if (newNode.description) {\n                this.viewer.setOption('description', node.description);\n            }\n\n            if (newNode.links || newNode.gps) {\n                this.__renderLinks(node);\n            }\n\n            if (newNode.gps) {\n                this.plan?.setCoordinates(node.gps);\n            }\n\n            if (newNode.map || newNode.gps) {\n                this.map?.setCenter(this.__getNodeMapPosition(node));\n            }\n\n            if (newNode.markers || newNode.gps) {\n                this.__addNodeMarkers(node);\n            }\n        }\n    }\n\n    /**\n     * Updates the gallery plugin\n     */\n    private __setGalleryItems() {\n        if (this.gallery) {\n            this.gallery.setItems(\n                Object.values(this.datasource.nodes)\n                    .filter(node => node.showInGallery !== false)\n                    .map(node => ({\n                        id: node.id,\n                        panorama: node.panorama,\n                        name: node.name,\n                        thumbnail: node.thumbnail,\n                    })),\n                (id) => {\n                    this.setCurrentNode(id as string);\n                },\n            );\n        }\n    }\n\n    /**\n     * Update the map plugin\n     */\n    private __setMapHotspots() {\n        if (this.map) {\n            this.map.setHotspots(\n                Object.values(this.datasource.nodes)\n                    .filter(node => node.map !== false)\n                    .map(node => ({\n                        tooltip: node.name,\n                        ...(node.map || {}),\n                        ...this.__getNodeMapPosition(node),\n                        id: LINK_ID + node.id,\n                    })),\n            );\n        }\n    }\n\n    /**\n     * Updates the plan plugin\n     */\n    private __setPlanHotspots() {\n        if (this.plan) {\n            this.plan.setHotspots(\n                Object.values(this.datasource.nodes)\n                    .filter(node => node.plan !== false)\n                    .map(node => ({\n                        tooltip: node.name,\n                        ...(node.plan || {}),\n                        coordinates: node.gps,\n                        id: LINK_ID + node.id,\n                    })),\n            );\n        }\n    }\n\n    /**\n     * Adds the links for the node\n     */\n    private __renderLinks(node: VirtualTourNode) {\n        this.arrowsRenderer.clear();\n\n        const positions: Position[] = [];\n\n        node.links.forEach((link) => {\n            const position = this.__getLinkPosition(node, link);\n            position.yaw += link.linkOffset?.yaw ?? 0;\n            position.pitch += link.linkOffset?.pitch ?? 0;\n\n            if (this.isGps && !this.is3D) {\n                position.pitch += this.config.arrowsPosition.linkPitchOffset;\n            }\n\n            positions.push(position);\n\n            this.arrowsRenderer.addLinkArrow(link, position, link.linkOffset?.depth);\n        });\n\n        this.arrowsRenderer.render();\n\n        if (this.config.linksOnCompass) {\n            this.compass?.setHotspots(positions);\n        }\n    }\n\n    /**\n     * Computes the marker position for a link\n     */\n    private __getLinkPosition(node: VirtualTourNode, link: VirtualTourLink): Position {\n        if (this.isGps) {\n            return gpsToSpherical(node.gps, link.gps);\n        } else {\n            return this.viewer.dataHelper.cleanPosition(link.position);\n        }\n    }\n\n    /**\n     * Returns the complete tootlip content for a node\n     */\n    private async __getTooltipContent(link: VirtualTourLink): Promise<string> {\n        const node = await this.datasource.loadNode(link.nodeId);\n        const elements: string[] = [];\n\n        if (node.name || node.thumbnail || node.caption) {\n            if (node.name) {\n                elements.push(`<h3>${node.name}</h3>`);\n            }\n            if (node.thumbnail) {\n                elements.push(`<img src=\"${node.thumbnail}\">`);\n            }\n            if (node.caption) {\n                elements.push(`<p>${node.caption}</p>`);\n            }\n        }\n\n        let content = elements.join('');\n        if (this.config.getLinkTooltip) {\n            content = this.config.getLinkTooltip(content, link, node);\n        }\n        return content;\n    }\n\n    /** @internal */\n    __onEnterArrow(link: VirtualTourLink, evt: MouseEvent) {\n        const viewerPos = utils.getPosition(this.viewer.container);\n\n        const viewerPoint: Point = {\n            x: evt.clientX - viewerPos.x,\n            y: evt.clientY - viewerPos.y,\n        };\n\n        if (this.config.showLinkTooltip) {\n            this.state.currentTooltip = this.viewer.createTooltip({\n                ...LOADING_TOOLTIP,\n                left: viewerPoint.x,\n                top: viewerPoint.y,\n                box: {\n                    // separate the tooltip from the cursor\n                    width: 20,\n                    height: 20,\n                },\n            });\n\n            this.__getTooltipContent(link).then((content) => {\n                if (content) {\n                    this.state.currentTooltip.update(content);\n                } else {\n                    this.__hideTooltip();\n                }\n            });\n        }\n\n        this.map?.setActiveHotspot(LINK_ID + link.nodeId);\n        this.plan?.setActiveHotspot(LINK_ID + link.nodeId);\n\n        this.dispatchEvent(new EnterArrowEvent(link, this.state.currentNode));\n    }\n\n    /** @internal */\n    __onHoverArrow(evt: MouseEvent) {\n        const viewerPos = utils.getPosition(this.viewer.container);\n\n        const viewerPoint: Point = {\n            x: evt.clientX - viewerPos.x,\n            y: evt.clientY - viewerPos.y,\n        };\n\n        this.state.currentTooltip?.move({\n            left: viewerPoint.x,\n            top: viewerPoint.y,\n        });\n    }\n\n    /** @internal */\n    __onLeaveArrow(link: VirtualTourLink) {\n        this.__hideTooltip();\n\n        this.map?.setActiveHotspot(null);\n        this.plan?.setActiveHotspot(null);\n\n        this.dispatchEvent(new LeaveArrowEvent(link, this.state.currentNode));\n    }\n\n    /**\n     * Hides the tooltip\n     */\n    private __hideTooltip() {\n        this.state.currentTooltip?.hide();\n        this.state.currentTooltip = null;\n    }\n\n    /**\n     * Manage the preload of the linked panoramas\n     */\n    private __preload(node: VirtualTourNode) {\n        if (!this.config.preload) {\n            return;\n        }\n\n        this.state.preload[node.id] = true;\n\n        this.state.currentNode.links\n            .filter(link => !this.state.preload[link.nodeId])\n            .filter((link) => {\n                if (typeof this.config.preload === 'function') {\n                    return this.config.preload(this.state.currentNode, link);\n                } else {\n                    return true;\n                }\n            })\n            .forEach((link) => {\n                this.state.preload[link.nodeId] = this.datasource\n                    .loadNode(link.nodeId)\n                    .then((linkNode) => {\n                        return this.viewer.textureLoader.preloadPanorama(linkNode.panorama);\n                    })\n                    .then(() => {\n                        this.state.preload[link.nodeId] = true;\n                    })\n                    .catch(() => {\n                        delete this.state.preload[link.nodeId];\n                    });\n            });\n    }\n\n    /**\n     * Changes the markers to the ones defined on the node\n     */\n    private __addNodeMarkers(node: VirtualTourNode) {\n        if (node.markers) {\n            if (this.markers) {\n                this.markers.setMarkers(\n                    node.markers.map((marker) => {\n                        if (marker.gps && this.isGps) {\n                            marker.position = gpsToSpherical(node.gps, marker.gps);\n                            if (marker.data?.['map']) {\n                                Object.assign(marker.data['map'], this.__getGpsMapPosition(marker.gps));\n                            }\n                            if (marker.data?.['plan']) {\n                                marker.data['plan'].coordinates = marker.gps;\n                            }\n                        }\n                        return marker;\n                    }),\n                );\n            } else {\n                utils.logWarn(`Node ${node.id} markers ignored because the plugin is not loaded.`);\n            }\n        }\n    }\n\n    /**\n     * Gets the position of a node on the map, if applicable\n     */\n    private __getNodeMapPosition(node: VirtualTourNode): Point {\n        const fromGps = this.__getGpsMapPosition(node.gps);\n        if (fromGps) {\n            return fromGps;\n        } else if (node.map) {\n            return { x: node.map.x, y: node.map.y };\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Gets a gps position on the map\n     */\n    private __getGpsMapPosition(gps: GpsPosition): Point {\n        const map = this.config.map;\n        if (this.isGps && map && map.extent && map.size) {\n            return {\n                x: MathUtils.mapLinear(gps[0], map.extent[0], map.extent[2], 0, map.size.width),\n                y: MathUtils.mapLinear(gps[1], map.extent[1], map.extent[3], 0, map.size.height),\n            };\n        } else {\n            return null;\n        }\n    }\n}\n","import { AbstractComponent, events, Position, utils, type Viewer } from '@photo-sphere-viewer/core';\nimport type { GalleryPlugin, events as GalleryEvents } from '@photo-sphere-viewer/gallery-plugin';\nimport { MathUtils, PerspectiveCamera, Scene } from 'three';\nimport { CSS2DObject, CSS2DRenderer } from 'three/examples/jsm/renderers/CSS2DRenderer.js';\nimport { CSS3DObject, CSS3DRenderer } from 'three/examples/jsm/renderers/CSS3DRenderer.js';\nimport { LINK_DATA } from './constants';\nimport { VirtualTourArrowStyle, VirtualTourLink } from './model';\nimport { type VirtualTourPlugin } from './VirtualTourPlugin';\n\nconst ARROW_DATA = 'arrow';\n\ntype ArrowData = {\n    yaw: number;\n    conflict: boolean;\n};\n\n/**\n * @internal\n */\nexport class ArrowsRenderer extends AbstractComponent {\n    private renderer: CSS3DRenderer | CSS2DRenderer;\n    private scene: Scene;\n    private camera: PerspectiveCamera;\n\n    private gallery?: GalleryPlugin;\n\n    get is3D() {\n        return this.plugin.is3D;\n    }\n\n    get arrowsPosition() {\n        return this.plugin.config.arrowsPosition;\n    }\n\n    get arrowStyle() {\n        return this.plugin.config.arrowStyle;\n    }\n\n    constructor(parent: Viewer, private plugin: VirtualTourPlugin) {\n        super(parent, {\n            className: 'psv-virtual-tour-arrows',\n        });\n\n        this.renderer = this.is3D\n            ? new CSS3DRenderer({\n                element: this.container,\n            })\n            : new CSS2DRenderer({\n                element: this.container,\n            });\n\n        this.camera = this.is3D ? new PerspectiveCamera(30, 1) : null;\n        this.scene = new Scene();\n\n        this.viewer.addEventListener(events.ReadyEvent.type, this, { once: true });\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.RenderEvent.type, this);\n        this.viewer.addEventListener(events.ClickEvent.type, this);\n\n        this.container.addEventListener('mouseenter', this, true);\n        this.container.addEventListener('mouseleave', this, true);\n        this.container.addEventListener('mousemove', this, true);\n\n        this.container.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    init() {\n        if (this.is3D) {\n            this.gallery = this.viewer.getPlugin('gallery');\n\n            this.gallery?.addEventListener('show-gallery', this);\n            this.gallery?.addEventListener('hide-gallery', this);\n        }\n    }\n\n    override destroy(): void {\n        this.viewer.removeEventListener(events.ReadyEvent.type, this);\n        this.viewer.removeEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.RenderEvent.type, this);\n        this.viewer.removeEventListener(events.ClickEvent.type, this);\n\n        this.gallery?.removeEventListener('show-gallery', this);\n        this.gallery?.removeEventListener('hide-gallery', this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case events.ReadyEvent.type:\n            case events.SizeUpdatedEvent.type:\n            case events.PositionUpdatedEvent.type:\n                this.__updateCamera();\n                break;\n            case events.RenderEvent.type:\n                this.render();\n                break;\n            case events.ClickEvent.type: {\n                if ((e as events.ClickEvent).data.rightclick) {\n                    break;\n                }\n                const link = this.__getTargetLink((e as events.ClickEvent).data.target, true);\n                if (link) {\n                    this.plugin.setCurrentNode(link.nodeId, null, link);\n                }\n                break;\n            }\n            case 'mouseenter': {\n                const link = this.__getTargetLink(utils.getEventTarget(e));\n                if (link) {\n                    this.plugin.__onEnterArrow(link, e as MouseEvent);\n                }\n                break;\n            }\n            case 'mouseleave': {\n                const link = this.__getTargetLink(utils.getEventTarget(e));\n                if (link) {\n                    this.plugin.__onLeaveArrow(link);\n                }\n                break;\n            }\n            case 'mousemove': {\n                const link = this.__getTargetLink(utils.getEventTarget(e), true);\n                if (link) {\n                    this.plugin.__onHoverArrow(e as MouseEvent);\n                }\n                break;\n            }\n            case 'hide-gallery':\n                this.__onToggleGallery(false);\n                break;\n            case 'show-gallery':\n                if (!(e as GalleryEvents.ShowGalleryEvent).fullscreen) {\n                    this.__onToggleGallery(true);\n                }\n                break;\n        }\n    }\n\n    private __updateCamera() {\n        const size = this.viewer.getSize();\n        this.renderer.setSize(size.width, size.height);\n\n        if (this.is3D) {\n            const position = this.viewer.getPosition();\n            position.pitch = MathUtils.clamp(position.pitch, -this.arrowsPosition.maxPitch, -this.arrowsPosition.minPitch);\n\n            this.viewer.dataHelper.sphericalCoordsToVector3(\n                position,\n                this.camera.position,\n                size.height * 2,\n            ).negate();\n\n            this.camera.lookAt(0, 0, 0);\n            this.camera.translateY(size.height / 3);\n            this.camera.updateProjectionMatrix();\n        }\n    }\n\n    render() {\n        if (this.is3D) {\n            const position = this.viewer.getPosition();\n\n            const objectsAndDist: Array<[CSS3DObject, number]> = [];\n            let minDist = Number.MAX_SAFE_INTEGER;\n            this.scene.children\n                .forEach((object) => {\n                    const data = object.userData[ARROW_DATA] as ArrowData;\n                    if (data.conflict) {\n                        const distance = Math.abs(utils.getShortestArc(position.yaw, data.yaw));\n                        minDist = Math.min(minDist, distance);\n                        objectsAndDist.push([object as CSS3DObject, distance]);\n                    }\n                });\n\n            objectsAndDist.forEach(([object, distance]) => {\n                const fade = distance !== minDist;\n                object.element.style.opacity = fade ? '0.5' : null;\n                object.element.style.zIndex = fade ? '-1' : null;\n            });\n\n            this.renderer.render(this.scene, this.camera);\n        } else {\n            this.renderer.render(this.scene, this.viewer.renderer.camera);\n        }\n    }\n\n    clear() {\n        this.scene.clear();\n    }\n\n    private __buildArrowElement(link: VirtualTourLink, style?: VirtualTourArrowStyle): HTMLElement {\n        if (style?.image) {\n            const image = document.createElement('img');\n            image.src = style.image;\n            return image;\n        } else if (style?.element) {\n            if (typeof style.element === 'function') {\n                return style.element(link);\n            } else {\n                return style.element;\n            }\n        }\n    }\n\n    addLinkArrow(link: VirtualTourLink, position: Position, depth = 1) {\n        let element = this.__buildArrowElement(link, link.arrowStyle);\n        if (!element) {\n            element = this.__buildArrowElement(link, this.arrowStyle);\n        }\n        (element as any)[LINK_DATA] = link;\n\n        const conf = {\n            ...this.arrowStyle,\n            ...link.arrowStyle,\n        };\n\n        element.classList.add('psv-virtual-tour-link');\n        if (conf.className) {\n            utils.addClasses(element, conf.className);\n        }\n        if (conf.style) {\n            Object.assign(element.style, conf.style);\n        }\n\n        if (this.is3D) {\n            // 1.5 ratio is arbitrary\n            element.style.width = conf.size.width * 1.5 + 'px';\n            element.style.height = conf.size.height * 1.5 + 'px';\n\n            let conflict = false;\n            this.scene.children.forEach((object) => {\n                const data = object.userData[ARROW_DATA] as ArrowData;\n                if (Math.abs(utils.getShortestArc(data.yaw, position.yaw)) < this.arrowsPosition.linkOverlapAngle) {\n                    data.conflict = true;\n                    conflict = true;\n                }\n            });\n\n            const object = new CSS3DObject(element);\n            object.userData[ARROW_DATA] = { yaw: position.yaw, conflict } as ArrowData;\n\n            object.rotation.set(-Math.PI / 2, 0, Math.PI - position.yaw);\n\n            this.viewer.dataHelper.sphericalCoordsToVector3(\n                { yaw: position.yaw, pitch: 0 },\n                object.position,\n                depth * 100,\n            );\n\n            this.scene.add(object);\n        } else {\n            element.style.width = conf.size.width + 'px';\n            element.style.height = conf.size.height + 'px';\n            element.style.pointerEvents = 'auto'; // CSS2DObject does not do it...\n\n            const object = new CSS2DObject(element);\n\n            this.viewer.dataHelper.sphericalCoordsToVector3(\n                position,\n                object.position,\n            );\n\n            this.scene.add(object);\n        }\n    }\n\n    private __getTargetLink(target: HTMLElement, closest = false): VirtualTourLink {\n        const target2 = closest ? utils.getClosest(target, '.psv-virtual-tour-link') : target;\n        return target2 ? (target2 as any)[LINK_DATA] : undefined;\n    }\n\n    private __onToggleGallery(visible: boolean) {\n        if (!visible) {\n            this.container.style.marginBottom = '';\n        } else {\n            this.container.style.marginBottom = (this.viewer.container.querySelector<HTMLElement>('.psv-gallery').offsetHeight) + 'px';\n        }\n    }\n}\n","import {\n\tMatrix4,\n\tObject3D,\n\tVector2,\n\tVector3\n} from 'three';\n\n/**\n * The only type of 3D object that is supported by {@link CSS2DRenderer}.\n *\n * @augments Object3D\n */\nclass CSS2DObject extends Object3D {\n\n\t/**\n\t * Constructs a new CSS2D object.\n\t *\n\t * @param {DOMElement} [element] - The DOM element.\n\t */\n\tconstructor( element = document.createElement( 'div' ) ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCSS2DObject = true;\n\n\t\t/**\n\t\t * The DOM element which defines the appearance of this 3D object.\n\t\t *\n\t\t * @type {DOMElement}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.element = element;\n\n\t\tthis.element.style.position = 'absolute';\n\t\tthis.element.style.userSelect = 'none';\n\n\t\tthis.element.setAttribute( 'draggable', false );\n\n\t\t/**\n\t\t * The 3D objects center point.\n\t\t * `( 0, 0 )` is the lower left, `( 1, 1 )` is the top right.\n\t\t *\n\t\t * @type {Vector2}\n\t\t * @default (0.5,0.5)\n\t\t */\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t\tthis.addEventListener( 'removed', function () {\n\n\t\t\tthis.traverse( function ( object ) {\n\n\t\t\t\tif (\n\t\t\t\t\tobject.element instanceof object.element.ownerDocument.defaultView.Element &&\n\t\t\t\t\tobject.element.parentNode !== null\n\t\t\t\t) {\n\n\t\t\t\t\tobject.element.remove();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.element = source.element.cloneNode( true );\n\n\t\tthis.center = source.center;\n\n\t\treturn this;\n\n\t}\n\n}\n\n//\n\nconst _vector = new Vector3();\nconst _viewMatrix = new Matrix4();\nconst _viewProjectionMatrix = new Matrix4();\nconst _a = new Vector3();\nconst _b = new Vector3();\n\n/**\n * This renderer is a simplified version of {@link CSS3DRenderer}. The only transformation that is\n * supported is translation.\n *\n * The renderer is very useful if you want to combine HTML based labels with 3D objects. Here too,\n * the respective DOM elements are wrapped into an instance of {@link CSS2DObject} and added to the\n * scene graph. All other types of renderable 3D objects (like meshes or point clouds) are ignored.\n *\n * `CSS2DRenderer` only supports 100% browser and display zoom.\n */\nclass CSS2DRenderer {\n\n\t/**\n\t * Constructs a new CSS2D renderer.\n\t *\n\t * @param {CSS2DRenderer~Parameters} [parameters] - The parameters.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\tconst _this = this;\n\n\t\tlet _width, _height;\n\t\tlet _widthHalf, _heightHalf;\n\n\t\tconst cache = {\n\t\t\tobjects: new WeakMap()\n\t\t};\n\n\t\tconst domElement = parameters.element !== undefined ? parameters.element : document.createElement( 'div' );\n\n\t\tdomElement.style.overflow = 'hidden';\n\n\t\t/**\n\t\t * The DOM where the renderer appends its child-elements.\n\t\t *\n\t\t * @type {DOMElement}\n\t\t */\n\t\tthis.domElement = domElement;\n\n\t\t/**\n\t\t * Returns an object containing the width and height of the renderer.\n\t\t *\n\t\t * @return {{width:number,height:number}} The size of the renderer.\n\t\t */\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\t/**\n\t\t * Renders the given scene using the given camera.\n\t\t *\n\t\t * @param {Object3D} scene - A scene or any other type of 3D object.\n\t\t * @param {Camera} camera - The camera.\n\t\t */\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\trenderObject( scene, scene, camera );\n\t\t\tzOrder( scene );\n\n\t\t};\n\n\t\t/**\n\t\t * Resizes the renderer to the given width and height.\n\t\t *\n\t\t * @param {number} width - The width of the renderer.\n\t\t * @param {number} height - The height of the renderer.\n\t\t */\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\n\t\t};\n\n\t\tfunction hideObject( object ) {\n\n\t\t\tif ( object.isCSS2DObject ) object.element.style.display = 'none';\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\thideObject( object.children[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera ) {\n\n\t\t\tif ( object.visible === false ) {\n\n\t\t\t\thideObject( object );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( object.isCSS2DObject ) {\n\n\t\t\t\t_vector.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t_vector.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tconst visible = ( _vector.z >= - 1 && _vector.z <= 1 ) && ( object.layers.test( camera.layers ) === true );\n\n\t\t\t\tconst element = object.element;\n\t\t\t\telement.style.display = visible === true ? '' : 'none';\n\n\t\t\t\tif ( visible === true ) {\n\n\t\t\t\t\tobject.onBeforeRender( _this, scene, camera );\n\n\t\t\t\t\telement.style.transform = 'translate(' + ( - 100 * object.center.x ) + '%,' + ( - 100 * object.center.y ) + '%)' + 'translate(' + ( _vector.x * _widthHalf + _widthHalf ) + 'px,' + ( - _vector.y * _heightHalf + _heightHalf ) + 'px)';\n\n\t\t\t\t\tif ( element.parentNode !== domElement ) {\n\n\t\t\t\t\t\tdomElement.appendChild( element );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.onAfterRender( _this, scene, camera );\n\n\t\t\t\t}\n\n\t\t\t\tconst objectData = {\n\t\t\t\t\tdistanceToCameraSquared: getDistanceToSquared( camera, object )\n\t\t\t\t};\n\n\t\t\t\tcache.objects.set( object, objectData );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( object.children[ i ], scene, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getDistanceToSquared( object1, object2 ) {\n\n\t\t\t_a.setFromMatrixPosition( object1.matrixWorld );\n\t\t\t_b.setFromMatrixPosition( object2.matrixWorld );\n\n\t\t\treturn _a.distanceToSquared( _b );\n\n\t\t}\n\n\t\tfunction filterAndFlatten( scene ) {\n\n\t\t\tconst result = [];\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isCSS2DObject ) result.push( object );\n\n\t\t\t} );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction zOrder( scene ) {\n\n\t\t\tconst sorted = filterAndFlatten( scene ).sort( function ( a, b ) {\n\n\t\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\t\treturn b.renderOrder - a.renderOrder;\n\n\t\t\t\t}\n\n\t\t\t\tconst distanceA = cache.objects.get( a ).distanceToCameraSquared;\n\t\t\t\tconst distanceB = cache.objects.get( b ).distanceToCameraSquared;\n\n\t\t\t\treturn distanceA - distanceB;\n\n\t\t\t} );\n\n\t\t\tconst zMax = sorted.length;\n\n\t\t\tfor ( let i = 0, l = sorted.length; i < l; i ++ ) {\n\n\t\t\t\tsorted[ i ].element.style.zIndex = zMax - i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Constructor parameters of `CSS2DRenderer`.\n *\n * @typedef {Object} CSS2DRenderer~Parameters\n * @property {DOMElement} [element] - A DOM element where the renderer appends its child-elements.\n * If not passed in here, a new div element will be created.\n **/\n\nexport { CSS2DObject, CSS2DRenderer };\n","import {\n\tMatrix4,\n\tObject3D,\n\tQuaternion,\n\tVector3\n} from 'three';\n\n// Based on http://www.emagix.net/academic/mscs-project/item/camera-sync-with-css3-and-webgl-threejs\n\nconst _position = new Vector3();\nconst _quaternion = new Quaternion();\nconst _scale = new Vector3();\n\n/**\n * The base 3D object that is supported by {@link CSS3DRenderer}.\n *\n * @augments Object3D\n */\nclass CSS3DObject extends Object3D {\n\n\t/**\n\t * Constructs a new CSS3D object.\n\t *\n\t * @param {DOMElement} [element] - The DOM element.\n\t */\n\tconstructor( element = document.createElement( 'div' ) ) {\n\n\t\tsuper();\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCSS3DObject = true;\n\n\t\t/**\n\t\t * The DOM element which defines the appearance of this 3D object.\n\t\t *\n\t\t * @type {DOMElement}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.element = element;\n\t\tthis.element.style.position = 'absolute';\n\t\tthis.element.style.pointerEvents = 'auto';\n\t\tthis.element.style.userSelect = 'none';\n\n\t\tthis.element.setAttribute( 'draggable', false );\n\n\t\tthis.addEventListener( 'removed', function () {\n\n\t\t\tthis.traverse( function ( object ) {\n\n\t\t\t\tif (\n\t\t\t\t\tobject.element instanceof object.element.ownerDocument.defaultView.Element &&\n\t\t\t\t\tobject.element.parentNode !== null\n\t\t\t\t) {\n\n\t\t\t\t\tobject.element.remove();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.element = source.element.cloneNode( true );\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * A specialized version of {@link CSS3DObject} that represents\n * DOM elements as sprites.\n *\n * @augments CSS3DObject\n */\nclass CSS3DSprite extends CSS3DObject {\n\n\t/**\n\t * Constructs a new CSS3D sprite object.\n\t *\n\t * @param {DOMElement} [element] - The DOM element.\n\t */\n\tconstructor( element ) {\n\n\t\tsuper( element );\n\n\t\t/**\n\t\t * This flag can be used for type testing.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t */\n\t\tthis.isCSS3DSprite = true;\n\n\t\t/**\n\t\t * The sprite's rotation in radians.\n\t\t *\n\t\t * @type {number}\n\t\t * @default 0\n\t\t */\n\t\tthis.rotation2D = 0;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.rotation2D = source.rotation2D;\n\n\t\treturn this;\n\n\t}\n\n}\n\n//\n\nconst _matrix = new Matrix4();\nconst _matrix2 = new Matrix4();\n\n/**\n * This renderer can be used to apply hierarchical 3D transformations to DOM elements\n * via the CSS3 [transform]{@link https://www.w3schools.com/cssref/css3_pr_transform.asp} property.\n * `CSS3DRenderer` is particularly interesting if you want to apply 3D effects to a website without\n * canvas based rendering. It can also be used in order to combine DOM elements with WebGLcontent.\n *\n * There are, however, some important limitations:\n *\n * - It's not possible to use the material system of *three.js*.\n * - It's also not possible to use geometries.\n * - The renderer only supports 100% browser and display zoom.\n *\n * So `CSS3DRenderer` is just focused on ordinary DOM elements. These elements are wrapped into special\n * 3D objects ({@link CSS3DObject} or {@link CSS3DSprite}) and then added to the scene graph.\n */\nclass CSS3DRenderer {\n\n\t/**\n\t * Constructs a new CSS3D renderer.\n\t *\n\t * @param {CSS3DRenderer~Parameters} [parameters] - The parameters.\n\t */\n\tconstructor( parameters = {} ) {\n\n\t\tconst _this = this;\n\n\t\tlet _width, _height;\n\t\tlet _widthHalf, _heightHalf;\n\n\t\tconst cache = {\n\t\t\tcamera: { style: '' },\n\t\t\tobjects: new WeakMap()\n\t\t};\n\n\t\tconst domElement = parameters.element !== undefined ? parameters.element : document.createElement( 'div' );\n\n\t\tdomElement.style.overflow = 'hidden';\n\n\t\t/**\n\t\t * The DOM where the renderer appends its child-elements.\n\t\t *\n\t\t * @type {DOMElement}\n\t\t */\n\t\tthis.domElement = domElement;\n\n\t\tconst viewElement = document.createElement( 'div' );\n\t\tviewElement.style.transformOrigin = '0 0';\n\t\tviewElement.style.pointerEvents = 'none';\n\t\tdomElement.appendChild( viewElement );\n\n\t\tconst cameraElement = document.createElement( 'div' );\n\n\t\tcameraElement.style.transformStyle = 'preserve-3d';\n\n\t\tviewElement.appendChild( cameraElement );\n\n\t\t/**\n\t\t * Returns an object containing the width and height of the renderer.\n\t\t *\n\t\t * @return {{width:number,height:number}} The size of the renderer.\n\t\t */\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\t/**\n\t\t * Renders the given scene using the given camera.\n\t\t *\n\t\t * @param {Object3D} scene - A scene or any other type of 3D object.\n\t\t * @param {Camera} camera - The camera.\n\t\t */\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tconst fov = camera.projectionMatrix.elements[ 5 ] * _heightHalf;\n\n\t\t\tif ( camera.view && camera.view.enabled ) {\n\n\t\t\t\t// view offset\n\t\t\t\tviewElement.style.transform = `translate( ${ - camera.view.offsetX * ( _width / camera.view.width ) }px, ${ - camera.view.offsetY * ( _height / camera.view.height ) }px )`;\n\n\t\t\t\t// view fullWidth and fullHeight, view width and height\n\t\t\t\tviewElement.style.transform += `scale( ${ camera.view.fullWidth / camera.view.width }, ${ camera.view.fullHeight / camera.view.height } )`;\n\n\t\t\t} else {\n\n\t\t\t\tviewElement.style.transform = '';\n\n\t\t\t}\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\tlet tx, ty;\n\n\t\t\tif ( camera.isOrthographicCamera ) {\n\n\t\t\t\ttx = - ( camera.right + camera.left ) / 2;\n\t\t\t\tty = ( camera.top + camera.bottom ) / 2;\n\n\t\t\t}\n\n\t\t\tconst scaleByViewOffset = camera.view && camera.view.enabled ? camera.view.height / camera.view.fullHeight : 1;\n\t\t\tconst cameraCSSMatrix = camera.isOrthographicCamera ?\n\t\t\t\t`scale( ${ scaleByViewOffset } )` + 'scale(' + fov + ')' + 'translate(' + epsilon( tx ) + 'px,' + epsilon( ty ) + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse ) :\n\t\t\t\t`scale( ${ scaleByViewOffset } )` + 'translateZ(' + fov + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse );\n\t\t\tconst perspective = camera.isPerspectiveCamera ? 'perspective(' + fov + 'px) ' : '';\n\n\t\t\tconst style = perspective + cameraCSSMatrix +\n\t\t\t\t'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';\n\n\t\t\tif ( cache.camera.style !== style ) {\n\n\t\t\t\tcameraElement.style.transform = style;\n\n\t\t\t\tcache.camera.style = style;\n\n\t\t\t}\n\n\t\t\trenderObject( scene, scene, camera, cameraCSSMatrix );\n\n\t\t};\n\n\t\t/**\n\t\t * Resizes the renderer to the given width and height.\n\t\t *\n\t\t * @param {number} width - The width of the renderer.\n\t\t * @param {number} height - The height of the renderer.\n\t\t */\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\n\t\t\tviewElement.style.width = width + 'px';\n\t\t\tviewElement.style.height = height + 'px';\n\n\t\t\tcameraElement.style.width = width + 'px';\n\t\t\tcameraElement.style.height = height + 'px';\n\n\t\t};\n\n\t\tfunction epsilon( value ) {\n\n\t\t\treturn Math.abs( value ) < 1e-10 ? 0 : value;\n\n\t\t}\n\n\t\tfunction getCameraCSSMatrix( matrix ) {\n\n\t\t\tconst elements = matrix.elements;\n\n\t\t\treturn 'matrix3d(' +\n\t\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 1 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 4 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 6 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 7 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 9 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 13 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 15 ] ) +\n\t\t\t')';\n\n\t\t}\n\n\t\tfunction getObjectCSSMatrix( matrix ) {\n\n\t\t\tconst elements = matrix.elements;\n\t\t\tconst matrix3d = 'matrix3d(' +\n\t\t\t\tepsilon( elements[ 0 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 1 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 2 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 3 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 4 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 5 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 6 ] ) + ',' +\n\t\t\t\tepsilon( - elements[ 7 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 8 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 9 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 10 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 11 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 12 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 13 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 14 ] ) + ',' +\n\t\t\t\tepsilon( elements[ 15 ] ) +\n\t\t\t')';\n\n\t\t\treturn 'translate(-50%,-50%)' + matrix3d;\n\n\t\t}\n\n\t\tfunction hideObject( object ) {\n\n\t\t\tif ( object.isCSS3DObject ) object.element.style.display = 'none';\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\thideObject( object.children[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, cameraCSSMatrix ) {\n\n\t\t\tif ( object.visible === false ) {\n\n\t\t\t\thideObject( object );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( object.isCSS3DObject ) {\n\n\t\t\t\tconst visible = ( object.layers.test( camera.layers ) === true );\n\n\t\t\t\tconst element = object.element;\n\t\t\t\telement.style.display = visible === true ? '' : 'none';\n\n\t\t\t\tif ( visible === true ) {\n\n\t\t\t\t\tobject.onBeforeRender( _this, scene, camera );\n\n\t\t\t\t\tlet style;\n\n\t\t\t\t\tif ( object.isCSS3DSprite ) {\n\n\t\t\t\t\t\t// http://swiftcoder.wordpress.com/2008/11/25/constructing-a-billboard-matrix/\n\n\t\t\t\t\t\t_matrix.copy( camera.matrixWorldInverse );\n\t\t\t\t\t\t_matrix.transpose();\n\n\t\t\t\t\t\tif ( object.rotation2D !== 0 ) _matrix.multiply( _matrix2.makeRotationZ( object.rotation2D ) );\n\n\t\t\t\t\t\tobject.matrixWorld.decompose( _position, _quaternion, _scale );\n\t\t\t\t\t\t_matrix.setPosition( _position );\n\t\t\t\t\t\t_matrix.scale( _scale );\n\n\t\t\t\t\t\t_matrix.elements[ 3 ] = 0;\n\t\t\t\t\t\t_matrix.elements[ 7 ] = 0;\n\t\t\t\t\t\t_matrix.elements[ 11 ] = 0;\n\t\t\t\t\t\t_matrix.elements[ 15 ] = 1;\n\n\t\t\t\t\t\tstyle = getObjectCSSMatrix( _matrix );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstyle = getObjectCSSMatrix( object.matrixWorld );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cachedObject = cache.objects.get( object );\n\n\t\t\t\t\tif ( cachedObject === undefined || cachedObject.style !== style ) {\n\n\t\t\t\t\t\telement.style.transform = style;\n\n\t\t\t\t\t\tconst objectData = { style: style };\n\t\t\t\t\t\tcache.objects.set( object, objectData );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( element.parentNode !== cameraElement ) {\n\n\t\t\t\t\t\tcameraElement.appendChild( element );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.onAfterRender( _this, scene, camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( object.children[ i ], scene, camera, cameraCSSMatrix );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Constructor parameters of `CSS3DRenderer`.\n *\n * @typedef {Object} CSS3DRenderer~Parameters\n * @property {DOMElement} [element] - A DOM element where the renderer appends its child-elements.\n * If not passed in here, a new div element will be created.\n **/\n\nexport { CSS3DObject, CSS3DSprite, CSS3DRenderer };\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n    <path fill-rule=\"even-odd\" fill=\"currentColor\" d=\"\n        M50,50 m45,0\n        a45,45 0 1,0 -90,0\n        a45,45 0 1,0  90,0\n\n        M50,50 m38,0\n        a38,38 0 0,1 -76,0\n        a38,38 0 0,1  76,0\n\n        M50,50 m30,0\n        a30,30 0 1,0 -60,0\n        a30,30 0 1,0  60,0\n        \n        M50,40 m2.5,-2.5\n        l17.5,17.5\n        a 2.5,2.5 0 0 1 -5,5\n        l-15,-15\n        l-15,15\n        a 2.5,2.5 0 0 1 -5,-5\n        l17.5,-17.5\n        a 3.5,3.5 0 0 1 5,0\n    \"/>\n</svg>","import arrowIconSvg from './arrow.svg';\nimport { VirtualTourArrowStyle } from './model';\n\nexport const LINK_DATA = 'tourLink';\nexport const LINK_ID = '__tour-link__';\n\nexport const LOADING_TOOLTIP = {\n    className: 'psv-virtual-tour-tooltip',\n    content: `<div class=\"psv-virtual-tour-loader\"><div></div><div></div><div></div></div>`,\n};\n\n/**\n * Default style of the link arrow\n */\nexport const DEFAULT_ARROW: VirtualTourArrowStyle = {\n    element: () => {\n        const button = document.createElement('button');\n        button.className = 'psv-virtual-tour-arrow';\n        button.innerHTML = arrowIconSvg;\n        return button;\n    },\n    size: { width: 80, height: 80 },\n};\n","import { PSVError, utils } from '@photo-sphere-viewer/core';\nimport { VirtualTourNode } from '../model';\nimport { AbstractDatasource } from './AbstractDataSource';\n\nexport class ClientSideDatasource extends AbstractDatasource {\n    async loadNode(nodeId: string) {\n        if (this.nodes[nodeId]) {\n            return this.nodes[nodeId];\n        } else {\n            throw new PSVError(`Node ${nodeId} not found`);\n        }\n    }\n\n    setNodes(rawNodes: VirtualTourNode[]) {\n        if (!rawNodes?.length) {\n            throw new PSVError('No nodes provided');\n        }\n\n        const nodes: Record<string, VirtualTourNode> = {};\n        const linkedNodes: Record<string, boolean> = {};\n\n        rawNodes.forEach((node) => {\n            this.checkNode(node);\n\n            if (nodes[node.id]) {\n                throw new PSVError(`Duplicate node ${node.id}`);\n            }\n\n            nodes[node.id] = node;\n        });\n\n        rawNodes.forEach((node) => {\n            this.__checkLinks(node, nodes);\n\n            node.links.forEach((link) => {\n                linkedNodes[link.nodeId] = true;\n            });\n        });\n\n        rawNodes.forEach((node) => {\n            if (!linkedNodes[node.id]) {\n                utils.logWarn(`Node ${node.id} is never linked to`);\n            }\n        });\n\n        this.nodes = nodes;\n    }\n\n    updateNode(rawNode: Partial<VirtualTourNode> & { id: VirtualTourNode['id'] }) {\n        if (!rawNode.id) {\n            throw new PSVError('No id given for node');\n        }\n\n        const node = this.nodes[rawNode.id];\n        if (!node) {\n            throw new PSVError(`Node ${rawNode.id} does not exist`);\n        }\n\n        Object.assign(node, rawNode);\n\n        this.checkNode(node);\n\n        this.__checkLinks(node, this.nodes);\n\n        return node;\n    }\n\n    private __checkLinks(node: VirtualTourNode, nodes: Record<string, VirtualTourNode>) {\n        node.links.forEach((link) => {\n            if (!nodes[link.nodeId]) {\n                throw new PSVError(`Target node ${link.nodeId} of node ${node.id} does not exists`);\n            }\n\n            link.gps = link.gps || nodes[link.nodeId].gps;\n\n            this.checkLink(node, link);\n        });\n    }\n}\n","import type { Viewer } from '@photo-sphere-viewer/core';\nimport { PSVError, utils } from '@photo-sphere-viewer/core';\nimport { VirtualTourLink, VirtualTourNode } from '../model';\nimport type { VirtualTourPlugin } from '../VirtualTourPlugin';\n\nexport abstract class AbstractDatasource {\n    nodes: Record<string, VirtualTourNode> = {};\n\n    constructor(\n        protected readonly plugin: VirtualTourPlugin,\n        protected readonly viewer: Viewer,\n    ) {}\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    destroy() {}\n\n    /**\n     * Loads a node\n     */\n    abstract loadNode(nodeId: string): Promise<VirtualTourNode>;\n\n    /**\n     * Checks the configuration of a node\n     */\n    protected checkNode(node: VirtualTourNode) {\n        if (!node.id) {\n            throw new PSVError('No id given for node');\n        }\n        if (!node.panorama) {\n            throw new PSVError(`No panorama provided for node ${node.id}`);\n        }\n        if (this.plugin.isGps && !(node.gps?.length >= 2)) {\n            throw new PSVError(`No GPS position provided for node ${node.id}`);\n        }\n        if (!this.plugin.isGps && node.markers?.some(marker => marker.gps && !marker.position)) {\n            throw new PSVError(`Cannot use GPS positioning for markers in manual mode`);\n        }\n        if (!node.links) {\n            utils.logWarn(`Node ${node.id} has no links`);\n            node.links = [];\n        }\n    }\n\n    /**\n     * Checks the configuration of a link\n     */\n    protected checkLink(node: VirtualTourNode, link: VirtualTourLink) {\n        if (!link.nodeId) {\n            throw new PSVError(`Link of node ${node.id} has no target id`);\n        }\n        if (link.nodeId === node.id) {\n            throw new PSVError(`Node ${node.id} links to itself`);\n        }\n        if (!this.plugin.isGps && !utils.isExtendedPosition(link.position)) {\n            throw new PSVError(`No position provided for link ${link.nodeId} of node ${node.id}`);\n        }\n        if (this.plugin.isGps && !link.gps) {\n            throw new PSVError(`No GPS position provided for link ${link.nodeId} of node ${node.id}`);\n        }\n    }\n}\n","import type { Viewer } from '@photo-sphere-viewer/core';\nimport { PSVError } from '@photo-sphere-viewer/core';\nimport { VirtualTourPluginConfig } from '../model';\nimport type { VirtualTourPlugin } from '../VirtualTourPlugin';\nimport { AbstractDatasource } from './AbstractDataSource';\n\nexport class ServerSideDatasource extends AbstractDatasource {\n    private readonly nodeResolver: VirtualTourPluginConfig['getNode'];\n\n    constructor(plugin: VirtualTourPlugin, viewer: Viewer) {\n        super(plugin, viewer);\n\n        if (!plugin.config.getNode) {\n            throw new PSVError('Missing getNode() option.');\n        }\n\n        this.nodeResolver = plugin.config.getNode;\n    }\n\n    async loadNode(nodeId: string) {\n        if (this.nodes[nodeId]) {\n            return this.nodes[nodeId];\n        } else {\n            const node = await this.nodeResolver(nodeId);\n\n            this.checkNode(node);\n\n            node.links.forEach((link) => {\n                this.checkLink(node, link);\n            });\n\n            this.nodes[nodeId] = node;\n\n            return node;\n        }\n    }\n\n    clearCache(): void {\n        this.nodes = {};\n    }\n}\n","import { Position, utils } from '@photo-sphere-viewer/core';\nimport { MathUtils } from 'three';\nimport { GpsPosition } from './model';\n\n/**\n * Returns the difference between two WS84 GPS points as yaw+pitch on the viewer\n */\nexport function gpsToSpherical(gps1: GpsPosition, gps2: GpsPosition): Position {\n    const p1 = gpsDegToRad(gps1);\n    const p2 = gpsDegToRad(gps2);\n    const h1 = gps1[2] ?? 0;\n    const h2 = gps2[2] ?? 0;\n\n    let pitch = 0;\n    if (h1 !== h2) {\n        pitch = Math.atan((h2 - h1) / distance(p1, p2));\n    }\n\n    const yaw = bearing(p1, p2);\n\n    return { yaw, pitch };\n}\n\nfunction gpsDegToRad(gps: GpsPosition): [number, number] {\n    return [MathUtils.degToRad(gps[0]), MathUtils.degToRad(gps[1])];\n}\n\n/**\n * Returns the distance between two GPS points\n */\nfunction distance(p1: [number, number], p2: [number, number]): number {\n    return utils.greatArcDistance(p1, p2) * 6371e3;\n}\n\n/**\n * Returns the bearing between two GPS points\n * @link http://www.movable-type.co.uk/scripts/latlong.html\n */\nfunction bearing(p1: [number, number], p2: [number, number]): number {\n    const [long1, lat1] = p1;\n    const [long2, lat2] = p2;\n\n    const y = Math.sin(long2 - long1) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(long2 - long1);\n    return Math.atan2(y, x);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}