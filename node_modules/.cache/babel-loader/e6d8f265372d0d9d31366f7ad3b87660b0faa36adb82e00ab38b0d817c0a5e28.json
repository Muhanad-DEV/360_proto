{"ast":null,"code":"var _jsxFileName = \"/Users/stan/Downloads/360_proto.html/src/components/VirtualTour.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Viewer } from '@photo-sphere-viewer/core';\nimport { VirtualTourPlugin } from '@photo-sphere-viewer/virtual-tour-plugin';\n\n// Import required CSS\nimport '@photo-sphere-viewer/core/index.css';\nimport '@photo-sphere-viewer/virtual-tour-plugin/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VirtualTour() {\n  _s();\n  const viewerContainerRef = useRef(null);\n  const viewerRef = useRef(null);\n  useEffect(() => {\n    if (!viewerContainerRef.current) return;\n\n    // Base URL pointing to the public/images folder\n    const baseUrl = process.env.PUBLIC_URL + '/images/';\n    const caption = 'Tour of SQU - Virtual Tour';\n\n    // Function to calculate bearing between two GPS points\n    const calculateBearing = (lat1, lon1, lat2, lon2) => {\n      const toRadians = degrees => degrees * (Math.PI / 180);\n      const toDegrees = radians => radians * (180 / Math.PI);\n      const dLon = toRadians(lon2 - lon1);\n      const lat1Rad = toRadians(lat1);\n      const lat2Rad = toRadians(lat2);\n      const y = Math.sin(dLon) * Math.cos(lat2Rad);\n      const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLon);\n      const bearing = Math.atan2(y, x);\n      return bearing; // Return in radians for direct use in Photo Sphere Viewer\n    };\n\n    // GPS coordinates for each location\n    const locations = {\n      '1': {\n        lat: 23.591921,\n        lon: 58.168091\n      },\n      '2': {\n        lat: 23.592076,\n        lon: 58.168081\n      },\n      '3': {\n        lat: 23.592016,\n        lon: 58.168205\n      },\n      '4': {\n        lat: 23.592019,\n        lon: 58.168344\n      }\n    };\n\n    // Calculate precise arrow directions based on GPS coordinates\n    const nodes = [{\n      id: '1',\n      panorama: baseUrl + 'IMG_20250526_162018_00_003.jpg',\n      thumbnail: baseUrl + 'IMG_20250526_162018_00_003.jpg',\n      name: 'Node 1 - Starting Point',\n      caption: `[1] ${caption}`,\n      gps: [locations['1'].lon, locations['1'].lat, 0],\n      // [longitude, latitude, altitude]\n      links: [{\n        nodeId: '2',\n        gps: [locations['2'].lon, locations['2'].lat, 0],\n        position: {\n          yaw: calculateBearing(locations['1'].lat, locations['1'].lon, locations['2'].lat, locations['2'].lon),\n          pitch: 0\n        }\n      }]\n    }, {\n      id: '2',\n      panorama: baseUrl + 'IMG_20250526_162353_00_006.jpg',\n      thumbnail: baseUrl + 'IMG_20250526_162353_00_006.jpg',\n      name: 'Node 2 - Corridor',\n      caption: `[2] ${caption}`,\n      gps: [locations['2'].lon, locations['2'].lat, 0],\n      links: [{\n        nodeId: '1',\n        gps: [locations['1'].lon, locations['1'].lat, 0],\n        position: {\n          yaw: calculateBearing(locations['2'].lat, locations['2'].lon, locations['1'].lat, locations['1'].lon),\n          pitch: 0\n        }\n      }, {\n        nodeId: '3',\n        gps: [locations['3'].lon, locations['3'].lat, 0],\n        position: {\n          yaw: calculateBearing(locations['2'].lat, locations['2'].lon, locations['3'].lat, locations['3'].lon),\n          pitch: 0\n        }\n      }]\n    }, {\n      id: '3',\n      panorama: baseUrl + 'IMG_20250526_162506_00_007.jpg',\n      thumbnail: baseUrl + 'IMG_20250526_162506_00_007.jpg',\n      name: 'Node 3 - Main Area',\n      caption: `[3] ${caption}`,\n      gps: [locations['3'].lon, locations['3'].lat, 0],\n      links: [{\n        nodeId: '2',\n        gps: [locations['2'].lon, locations['2'].lat, 0],\n        position: {\n          yaw: calculateBearing(locations['3'].lat, locations['3'].lon, locations['2'].lat, locations['2'].lon),\n          pitch: 0\n        }\n      }, {\n        nodeId: '4',\n        gps: [locations['4'].lon, locations['4'].lat, 0],\n        position: {\n          yaw: calculateBearing(locations['3'].lat, locations['3'].lon, locations['4'].lat, locations['4'].lon),\n          pitch: 0\n        }\n      }]\n    }, {\n      id: '4',\n      panorama: baseUrl + 'IMG_20250526_162555_00_008.jpg',\n      thumbnail: baseUrl + 'IMG_20250526_162555_00_008.jpg',\n      name: 'Node 4 - End Point',\n      caption: `[4] ${caption}`,\n      gps: [locations['4'].lon, locations['4'].lat, 0],\n      links: [{\n        nodeId: '3',\n        gps: [locations['3'].lon, locations['3'].lat, 0],\n        position: {\n          yaw: calculateBearing(locations['4'].lat, locations['4'].lon, locations['3'].lat, locations['3'].lon),\n          pitch: 0\n        }\n      }]\n    }];\n\n    // Initialize the Viewer if not already created\n    if (!viewerRef.current && viewerContainerRef.current) {\n      try {\n        viewerRef.current = new Viewer({\n          container: viewerContainerRef.current,\n          panorama: nodes[0].panorama,\n          caption: nodes[0].caption,\n          loadingImg: null,\n          touchmoveTwoFingers: true,\n          mousewheelCtrlKey: true,\n          defaultYaw: 0,\n          // All images face north\n          navbar: ['zoom', 'move', 'fullscreen'],\n          plugins: [[VirtualTourPlugin, {\n            positionMode: 'gps',\n            // Use GPS positioning for accurate directions\n            renderMode: '3d',\n            nodes: nodes,\n            startNodeId: '1'\n          }]]\n        });\n\n        // Add event listeners\n        viewerRef.current.addEventListener('ready', () => {\n          console.log('Virtual tour with GPS positioning is ready!');\n          console.log('Arrow directions calculated from actual GPS coordinates');\n        });\n        viewerRef.current.addEventListener('error', err => {\n          console.error('Virtual tour error:', err);\n        });\n      } catch (error) {\n        console.error('Error initializing viewer:', error);\n      }\n    }\n    return () => {\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: viewerContainerRef,\n    style: {\n      width: '100%',\n      height: '100%',\n      backgroundColor: '#000'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n_s(VirtualTour, \"Geso3/JrPfRTC+oDPYHPa/KTaLY=\");\n_c = VirtualTour;\nvar _c;\n$RefreshReg$(_c, \"VirtualTour\");","map":{"version":3,"names":["React","useEffect","useRef","Viewer","VirtualTourPlugin","jsxDEV","_jsxDEV","VirtualTour","_s","viewerContainerRef","viewerRef","current","baseUrl","process","env","PUBLIC_URL","caption","calculateBearing","lat1","lon1","lat2","lon2","toRadians","degrees","Math","PI","toDegrees","radians","dLon","lat1Rad","lat2Rad","y","sin","cos","x","bearing","atan2","locations","lat","lon","nodes","id","panorama","thumbnail","name","gps","links","nodeId","position","yaw","pitch","container","loadingImg","touchmoveTwoFingers","mousewheelCtrlKey","defaultYaw","navbar","plugins","positionMode","renderMode","startNodeId","addEventListener","console","log","err","error","destroy","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stan/Downloads/360_proto.html/src/components/VirtualTour.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Viewer } from '@photo-sphere-viewer/core';\nimport { VirtualTourPlugin } from '@photo-sphere-viewer/virtual-tour-plugin';\n\n// Import required CSS\nimport '@photo-sphere-viewer/core/index.css';\nimport '@photo-sphere-viewer/virtual-tour-plugin/index.css';\n\nexport default function VirtualTour() {\n  const viewerContainerRef = useRef(null);\n  const viewerRef = useRef(null);\n\n  useEffect(() => {\n    if (!viewerContainerRef.current) return;\n\n    // Base URL pointing to the public/images folder\n    const baseUrl = process.env.PUBLIC_URL + '/images/';\n    const caption = 'Tour of SQU - Virtual Tour';\n\n    // Function to calculate bearing between two GPS points\n    const calculateBearing = (lat1, lon1, lat2, lon2) => {\n      const toRadians = (degrees) => degrees * (Math.PI / 180);\n      const toDegrees = (radians) => radians * (180 / Math.PI);\n      \n      const dLon = toRadians(lon2 - lon1);\n      const lat1Rad = toRadians(lat1);\n      const lat2Rad = toRadians(lat2);\n      \n      const y = Math.sin(dLon) * Math.cos(lat2Rad);\n      const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) - \n                Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(dLon);\n      \n      const bearing = Math.atan2(y, x);\n      return bearing; // Return in radians for direct use in Photo Sphere Viewer\n    };\n\n    // GPS coordinates for each location\n    const locations = {\n      '1': { lat: 23.591921, lon: 58.168091 },\n      '2': { lat: 23.592076, lon: 58.168081 },\n      '3': { lat: 23.592016, lon: 58.168205 },\n      '4': { lat: 23.592019, lon: 58.168344 }\n    };\n\n    // Calculate precise arrow directions based on GPS coordinates\n    const nodes = [\n      {\n        id: '1',\n        panorama: baseUrl + 'IMG_20250526_162018_00_003.jpg',\n        thumbnail: baseUrl + 'IMG_20250526_162018_00_003.jpg',\n        name: 'Node 1 - Starting Point',\n        caption: `[1] ${caption}`,\n        gps: [locations['1'].lon, locations['1'].lat, 0], // [longitude, latitude, altitude]\n        links: [{ \n          nodeId: '2',\n          gps: [locations['2'].lon, locations['2'].lat, 0],\n          position: { \n            yaw: calculateBearing(locations['1'].lat, locations['1'].lon, locations['2'].lat, locations['2'].lon),\n            pitch: 0 \n          }\n        }]\n      },\n      {\n        id: '2',\n        panorama: baseUrl + 'IMG_20250526_162353_00_006.jpg',\n        thumbnail: baseUrl + 'IMG_20250526_162353_00_006.jpg',\n        name: 'Node 2 - Corridor',\n        caption: `[2] ${caption}`,\n        gps: [locations['2'].lon, locations['2'].lat, 0],\n        links: [\n          { \n            nodeId: '1',\n            gps: [locations['1'].lon, locations['1'].lat, 0],\n            position: { \n              yaw: calculateBearing(locations['2'].lat, locations['2'].lon, locations['1'].lat, locations['1'].lon),\n              pitch: 0 \n            }\n          },\n          { \n            nodeId: '3',\n            gps: [locations['3'].lon, locations['3'].lat, 0],\n            position: { \n              yaw: calculateBearing(locations['2'].lat, locations['2'].lon, locations['3'].lat, locations['3'].lon),\n              pitch: 0 \n            }\n          }\n        ]\n      },\n      {\n        id: '3',\n        panorama: baseUrl + 'IMG_20250526_162506_00_007.jpg',\n        thumbnail: baseUrl + 'IMG_20250526_162506_00_007.jpg',\n        name: 'Node 3 - Main Area',\n        caption: `[3] ${caption}`,\n        gps: [locations['3'].lon, locations['3'].lat, 0],\n        links: [\n          { \n            nodeId: '2',\n            gps: [locations['2'].lon, locations['2'].lat, 0],\n            position: { \n              yaw: calculateBearing(locations['3'].lat, locations['3'].lon, locations['2'].lat, locations['2'].lon),\n              pitch: 0 \n            }\n          },\n          { \n            nodeId: '4',\n            gps: [locations['4'].lon, locations['4'].lat, 0],\n            position: { \n              yaw: calculateBearing(locations['3'].lat, locations['3'].lon, locations['4'].lat, locations['4'].lon),\n              pitch: 0 \n            }\n          }\n        ]\n      },\n      {\n        id: '4',\n        panorama: baseUrl + 'IMG_20250526_162555_00_008.jpg',\n        thumbnail: baseUrl + 'IMG_20250526_162555_00_008.jpg',\n        name: 'Node 4 - End Point',\n        caption: `[4] ${caption}`,\n        gps: [locations['4'].lon, locations['4'].lat, 0],\n        links: [{ \n          nodeId: '3',\n          gps: [locations['3'].lon, locations['3'].lat, 0],\n          position: { \n            yaw: calculateBearing(locations['4'].lat, locations['4'].lon, locations['3'].lat, locations['3'].lon),\n            pitch: 0 \n          }\n        }]\n      },\n    ];\n\n    // Initialize the Viewer if not already created\n    if (!viewerRef.current && viewerContainerRef.current) {\n      try {\n        viewerRef.current = new Viewer({\n          container: viewerContainerRef.current,\n          panorama: nodes[0].panorama,\n          caption: nodes[0].caption,\n          loadingImg: null,\n          touchmoveTwoFingers: true,\n          mousewheelCtrlKey: true,\n          defaultYaw: 0, // All images face north\n          navbar: [\n            'zoom',\n            'move',\n            'fullscreen'\n          ],\n          plugins: [\n            [\n              VirtualTourPlugin,\n              {\n                positionMode: 'gps', // Use GPS positioning for accurate directions\n                renderMode: '3d',\n                nodes: nodes,\n                startNodeId: '1'\n              }\n            ]\n          ],\n        });\n\n        // Add event listeners\n        viewerRef.current.addEventListener('ready', () => {\n          console.log('Virtual tour with GPS positioning is ready!');\n          console.log('Arrow directions calculated from actual GPS coordinates');\n        });\n\n        viewerRef.current.addEventListener('error', (err) => {\n          console.error('Virtual tour error:', err);\n        });\n\n      } catch (error) {\n        console.error('Error initializing viewer:', error);\n      }\n    }\n\n    return () => {\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewerRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div \n      ref={viewerContainerRef} \n      style={{ \n        width: '100%', \n        height: '100%',\n        backgroundColor: '#000'\n      }} \n    />\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}