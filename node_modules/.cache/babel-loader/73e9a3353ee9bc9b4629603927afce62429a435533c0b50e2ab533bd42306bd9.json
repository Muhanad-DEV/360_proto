{"ast":null,"code":"/*!\n * Photo Sphere Viewer 5.13.2\n * @copyright 2014-2015 Jérémy Heleine\n * @copyright 2015-2025 Damien \"Mistic\" Sorel\n * @licence MIT (https://opensource.org/licenses/MIT)\n */\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n\n// src/data/constants.ts\nvar constants_exports = {};\n__export(constants_exports, {\n  ACTIONS: () => ACTIONS,\n  ANIMATION_MIN_DURATION: () => ANIMATION_MIN_DURATION,\n  CAPTURE_EVENTS_CLASS: () => CAPTURE_EVENTS_CLASS,\n  CTRLZOOM_TIMEOUT: () => CTRLZOOM_TIMEOUT,\n  DBLCLICK_DELAY: () => DBLCLICK_DELAY,\n  EASINGS: () => EASINGS,\n  ICONS: () => ICONS,\n  IDS: () => IDS,\n  KEY_CODES: () => KEY_CODES,\n  LONGTOUCH_DELAY: () => LONGTOUCH_DELAY,\n  MOVE_THRESHOLD: () => MOVE_THRESHOLD,\n  SPHERE_RADIUS: () => SPHERE_RADIUS,\n  TWOFINGERSOVERLAY_DELAY: () => TWOFINGERSOVERLAY_DELAY,\n  VIEWER_DATA: () => VIEWER_DATA\n});\n\n// src/icons/arrow.svg\nvar arrow_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"40 40 432 432\"><g transform=\"rotate(0, 256, 256)\"><path fill=\"currentColor\" d=\"M425.23 210.55H227.39a5 5 0 01-3.53-8.53l56.56-56.57a45.5 45.5 0 000-64.28 45.15 45.15 0 00-32.13-13.3 45.15 45.15 0 00-32.14 13.3L41.32 256l174.83 174.83a45.15 45.15 0 0032.14 13.3 45.15 45.15 0 0032.13-13.3 45.5 45.5 0 000-64.28l-56.57-56.57a5 5 0 013.54-8.53h197.84c25.06 0 45.45-20.39 45.45-45.45s-20.4-45.45-45.45-45.45z\"/></g><!-- Created by Flatart from the Noun Project --></svg>\\n';\n\n// src/icons/close.svg\nvar close_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><g fill=\"currentColor\" transform=\" translate(50, 50) rotate(45)\"><rect x=\"-5\" y=\"-65\" width=\"10\" height=\"130\"/><rect x=\"-65\" y=\"-5\" width=\"130\" height=\"10\"/></g></svg>';\n\n// src/icons/download.svg\nvar download_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M83.3 35.6h-17V3H32.2v32.6H16.6l33.6 32.7 33-32.7z\"/><path fill=\"currentColor\" d=\"M83.3 64.2v16.3H16.6V64.2H-.1v32.6H100V64.2H83.3z\"/><!--Created by Michael Zenaty from the Noun Project--></svg>\\n';\n\n// src/icons/fullscreen-in.svg\nvar fullscreen_in_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M100 40H87.1V18.8h-21V6H100zM100 93.2H66V80.3h21.1v-21H100zM34 93.2H0v-34h12.9v21.1h21zM12.9 40H0V6h34v12.9H12.8z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>\\n';\n\n// src/icons/fullscreen-out.svg\nvar fullscreen_out_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M66 7h13v21h21v13H66zM66 60.3h34v12.9H79v21H66zM0 60.3h34v34H21V73.1H0zM21 7h13v34H0V28h21z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>\\n';\n\n// src/icons/info.svg\nvar info_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\"><path fill=\"currentColor\" d=\"M28.3 26.1c-1 2.6-1.9 4.8-2.6 7-2.5 7.4-5 14.7-7.2 22-1.3 4.4.5 7.2 4.3 7.8 1.3.2 2.8.2 4.2-.1 8.2-2 11.9-8.6 15.7-15.2l-2.2 2a18.8 18.8 0 0 1-7.4 5.2 2 2 0 0 1-1.6-.2c-.2-.1 0-1 0-1.4l.8-1.8L41.9 28c.5-1.4.9-3 .7-4.4-.2-2.6-3-4.4-6.3-4.4-8.8.2-15 4.5-19.5 11.8-.2.3-.2.6-.3 1.3 3.7-2.8 6.8-6.1 11.8-6.2z\"/><circle fill=\"currentColor\" cx=\"39.3\" cy=\"9.2\" r=\"8.2\"/><!--Created by Arafat Uddin from the Noun Project--></svg>\\n';\n\n// src/icons/menu.svg\nvar menu_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\"><g fill=\"currentColor\"><circle r=\"10\" cx=\"20\" cy=\"20\"/><circle r=\"10\" cx=\"50\" cy=\"20\"/><circle r=\"10\" cx=\"80\" cy=\"20\"/><circle r=\"10\" cx=\"20\" cy=\"50\"/><circle r=\"10\" cx=\"50\" cy=\"50\"/><circle r=\"10\" cx=\"80\" cy=\"50\"/><circle r=\"10\" cx=\"20\" cy=\"80\"/><circle r=\"10\" cx=\"50\" cy=\"80\"/><circle r=\"10\" cx=\"80\" cy=\"80\"/></g><!-- Created by Richard Kun\\xE1k from the Noun Project--></svg>\\n';\n\n// src/icons/zoom-in.svg\nvar zoom_in_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path fill=\"currentColor\" d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path fill=\"currentColor\" d=\"M8.728 4.009H6.744v2.737H4.006V8.73h2.738v2.736h1.984V8.73h2.737V6.746H8.728z\"/><!--Created by Ryan Canning from the Noun Project--></svg>\\n';\n\n// src/icons/zoom-out.svg\nvar zoom_out_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path fill=\"currentColor\" d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path fill=\"currentColor\" d=\"M4.006 6.746h7.459V8.73H4.006z\"/><!--Created by Ryan Canning from the Noun Project--></svg>\\n';\n\n// src/data/constants.ts\nvar ANIMATION_MIN_DURATION = 500;\nvar MOVE_THRESHOLD = 4;\nvar DBLCLICK_DELAY = 300;\nvar LONGTOUCH_DELAY = 500;\nvar TWOFINGERSOVERLAY_DELAY = 100;\nvar CTRLZOOM_TIMEOUT = 2e3;\nvar SPHERE_RADIUS = 10;\nvar VIEWER_DATA = \"photoSphereViewer\";\nvar CAPTURE_EVENTS_CLASS = \"psv--capture-event\";\nvar ACTIONS = /* @__PURE__ */(ACTIONS2 => {\n  ACTIONS2[\"ROTATE_UP\"] = \"ROTATE_UP\";\n  ACTIONS2[\"ROTATE_DOWN\"] = \"ROTATE_DOWN\";\n  ACTIONS2[\"ROTATE_RIGHT\"] = \"ROTATE_RIGHT\";\n  ACTIONS2[\"ROTATE_LEFT\"] = \"ROTATE_LEFT\";\n  ACTIONS2[\"ZOOM_IN\"] = \"ZOOM_IN\";\n  ACTIONS2[\"ZOOM_OUT\"] = \"ZOOM_OUT\";\n  return ACTIONS2;\n})(ACTIONS || {});\nvar IDS = {\n  MENU: \"menu\",\n  TWO_FINGERS: \"twoFingers\",\n  CTRL_ZOOM: \"ctrlZoom\",\n  ERROR: \"error\",\n  DESCRIPTION: \"description\"\n};\nvar KEY_CODES = {\n  Enter: \"Enter\",\n  Control: \"Control\",\n  Escape: \"Escape\",\n  Space: \" \",\n  PageUp: \"PageUp\",\n  PageDown: \"PageDown\",\n  ArrowLeft: \"ArrowLeft\",\n  ArrowUp: \"ArrowUp\",\n  ArrowRight: \"ArrowRight\",\n  ArrowDown: \"ArrowDown\",\n  Delete: \"Delete\",\n  Plus: \"+\",\n  Minus: \"-\"\n};\nvar ICONS = {\n  arrow: arrow_default,\n  close: close_default,\n  download: download_default,\n  fullscreenIn: fullscreen_in_default,\n  fullscreenOut: fullscreen_out_default,\n  info: info_default,\n  menu: menu_default,\n  zoomIn: zoom_in_default,\n  zoomOut: zoom_out_default\n};\nvar EASINGS = {\n  linear: t => t,\n  inQuad: t => t * t,\n  outQuad: t => t * (2 - t),\n  inOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  inCubic: t => t * t * t,\n  outCubic: t => --t * t * t + 1,\n  inOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  inQuart: t => t * t * t * t,\n  outQuart: t => 1 - --t * t * t * t,\n  inOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  inQuint: t => t * t * t * t * t,\n  outQuint: t => 1 + --t * t * t * t * t,\n  inOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t,\n  inSine: t => 1 - Math.cos(t * (Math.PI / 2)),\n  outSine: t => Math.sin(t * (Math.PI / 2)),\n  inOutSine: t => 0.5 - 0.5 * Math.cos(Math.PI * t),\n  inExpo: t => Math.pow(2, 10 * (t - 1)),\n  outExpo: t => 1 - Math.pow(2, -10 * t),\n  inOutExpo: t => (t = t * 2 - 1) < 0 ? 0.5 * Math.pow(2, 10 * t) : 1 - 0.5 * Math.pow(2, -10 * t),\n  inCirc: t => 1 - Math.sqrt(1 - t * t),\n  outCirc: t => Math.sqrt(1 - (t - 1) * (t - 1)),\n  inOutCirc: t => (t *= 2) < 1 ? 0.5 - 0.5 * Math.sqrt(1 - t * t) : 0.5 + 0.5 * Math.sqrt(1 - (t -= 2) * t)\n};\n\n// src/utils/index.ts\nvar utils_exports = {};\n__export(utils_exports, {\n  Animation: () => Animation,\n  Dynamic: () => Dynamic,\n  MultiDynamic: () => MultiDynamic,\n  PressHandler: () => PressHandler,\n  Slider: () => Slider,\n  SliderDirection: () => SliderDirection,\n  addClasses: () => addClasses,\n  angle: () => angle,\n  applyEulerInverse: () => applyEulerInverse,\n  checkClosedShadowDom: () => checkClosedShadowDom,\n  checkStylesheet: () => checkStylesheet,\n  checkVersion: () => checkVersion,\n  cleanCssPosition: () => cleanCssPosition,\n  clone: () => clone,\n  createTexture: () => createTexture,\n  cssPositionIsOrdered: () => cssPositionIsOrdered,\n  dasherize: () => dasherize,\n  deepEqual: () => deepEqual,\n  deepmerge: () => deepmerge,\n  distance: () => distance,\n  exitFullscreen: () => exitFullscreen,\n  firstNonNull: () => firstNonNull,\n  getAbortError: () => getAbortError,\n  getAngle: () => getAngle,\n  getClosest: () => getClosest,\n  getConfigParser: () => getConfigParser,\n  getElement: () => getElement,\n  getEventTarget: () => getEventTarget,\n  getMatchingTarget: () => getMatchingTarget,\n  getPosition: () => getPosition,\n  getShortestArc: () => getShortestArc,\n  getStyleProperty: () => getStyleProperty,\n  getTouchData: () => getTouchData,\n  getXMPValue: () => getXMPValue,\n  greatArcDistance: () => greatArcDistance,\n  hasParent: () => hasParent,\n  invertResolvableBoolean: () => invertResolvableBoolean,\n  isAbortError: () => isAbortError,\n  isEmpty: () => isEmpty,\n  isExtendedPosition: () => isExtendedPosition,\n  isFullscreenEnabled: () => isFullscreenEnabled,\n  isNil: () => isNil,\n  isPlainObject: () => isPlainObject,\n  logWarn: () => logWarn,\n  mergePanoData: () => mergePanoData,\n  parseAngle: () => parseAngle,\n  parsePoint: () => parsePoint,\n  parseSpeed: () => parseSpeed,\n  removeClasses: () => removeClasses,\n  requestFullscreen: () => requestFullscreen,\n  resolveBoolean: () => resolveBoolean,\n  speedToDuration: () => speedToDuration,\n  sum: () => sum,\n  throttle: () => throttle,\n  toggleClass: () => toggleClass,\n  wrap: () => wrap\n});\n\n// src/utils/math.ts\nfunction wrap(value, max) {\n  let result = value % max;\n  if (result < 0) {\n    result += max;\n  }\n  return result;\n}\nfunction sum(array) {\n  return array.reduce((a, b) => a + b, 0);\n}\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\nfunction angle(p1, p2) {\n  return Math.atan2(p2.y - p1.y, p2.x - p1.x);\n}\nfunction getShortestArc(from, to) {\n  const candidates = [0,\n  // direct\n  Math.PI * 2,\n  // clock-wise cross zero\n  -Math.PI * 2\n  // counter-clock-wise cross zero\n  ];\n  return candidates.reduce((value, candidate) => {\n    const newCandidate = to - from + candidate;\n    return Math.abs(newCandidate) < Math.abs(value) ? newCandidate : value;\n  }, Infinity);\n}\nfunction getAngle(position1, position2) {\n  return Math.acos(Math.cos(position1.pitch) * Math.cos(position2.pitch) * Math.cos(position1.yaw - position2.yaw) + Math.sin(position1.pitch) * Math.sin(position2.pitch));\n}\nfunction greatArcDistance([yaw1, pitch1], [yaw2, pitch2]) {\n  if (yaw1 - yaw2 > Math.PI) {\n    yaw1 -= 2 * Math.PI;\n  } else if (yaw1 - yaw2 < -Math.PI) {\n    yaw1 += 2 * Math.PI;\n  }\n  const x = (yaw2 - yaw1) * Math.cos((pitch1 + pitch2) / 2);\n  const y = pitch2 - pitch1;\n  return Math.sqrt(x * x + y * y);\n}\n\n// src/utils/browser.ts\nfunction getElement(selector) {\n  if (typeof selector === \"string\") {\n    return selector.match(/^[a-z]/i) ? document.getElementById(selector) : document.querySelector(selector);\n  } else {\n    return selector;\n  }\n}\nfunction toggleClass(element, className, active) {\n  if (active === void 0) {\n    element.classList.toggle(className);\n  } else if (active) {\n    element.classList.add(className);\n  } else if (!active) {\n    element.classList.remove(className);\n  }\n}\nfunction addClasses(element, className) {\n  element.classList.add(...className.split(\" \").filter(c => !!c));\n}\nfunction removeClasses(element, className) {\n  element.classList.remove(...className.split(\" \").filter(c => !!c));\n}\nfunction hasParent(el, parent) {\n  let test = el;\n  do {\n    if (test === parent) {\n      return true;\n    }\n    test = test.parentElement;\n  } while (test);\n  return false;\n}\nfunction getClosest(el, selector) {\n  if (!el?.matches) {\n    return null;\n  }\n  let test = el;\n  do {\n    if (test.matches(selector)) {\n      return test;\n    }\n    test = test.parentElement;\n  } while (test);\n  return null;\n}\nfunction getEventTarget(e) {\n  return e?.composedPath()[0] || null;\n}\nfunction getMatchingTarget(e, selector) {\n  if (!e) {\n    return null;\n  }\n  return e.composedPath().find(el => {\n    if (!(el instanceof HTMLElement) && !(el instanceof SVGElement)) {\n      return false;\n    }\n    return el.matches(selector);\n  });\n}\nfunction getPosition(el) {\n  let x = 0;\n  let y = 0;\n  let test = el;\n  while (test) {\n    x += test.offsetLeft - test.scrollLeft + test.clientLeft;\n    y += test.offsetTop - test.scrollTop + test.clientTop;\n    test = test.offsetParent;\n  }\n  x -= window.scrollX;\n  y -= window.scrollY;\n  return {\n    x,\n    y\n  };\n}\nfunction getStyleProperty(elt, varname) {\n  return window.getComputedStyle(elt).getPropertyValue(varname);\n}\nfunction getTouchData(e) {\n  if (e.touches.length < 2) {\n    return null;\n  }\n  const p1 = {\n    x: e.touches[0].clientX,\n    y: e.touches[0].clientY\n  };\n  const p2 = {\n    x: e.touches[1].clientX,\n    y: e.touches[1].clientY\n  };\n  return {\n    distance: distance(p1, p2),\n    angle: angle(p1, p2),\n    center: {\n      x: (p1.x + p2.x) / 2,\n      y: (p1.y + p2.y) / 2\n    }\n  };\n}\nvar fullscreenElement;\nfunction isFullscreenEnabled(elt, isIphone = false) {\n  if (isIphone) {\n    return elt === fullscreenElement;\n  } else {\n    return document.fullscreenElement === elt;\n  }\n}\nfunction requestFullscreen(elt, isIphone = false) {\n  if (isIphone) {\n    fullscreenElement = elt;\n    elt.classList.add(\"psv-fullscreen-emulation\");\n    document.dispatchEvent(new Event(\"fullscreenchange\"));\n  } else {\n    elt.requestFullscreen();\n  }\n}\nfunction exitFullscreen(isIphone = false) {\n  if (isIphone) {\n    fullscreenElement.classList.remove(\"psv-fullscreen-emulation\");\n    fullscreenElement = null;\n    document.dispatchEvent(new Event(\"fullscreenchange\"));\n  } else {\n    document.exitFullscreen();\n  }\n}\n\n// src/utils/misc.ts\nfunction dasherize(str) {\n  return str.replace(/[A-Z](?:(?=[^A-Z])|[A-Z]*(?=[A-Z][^A-Z]|$))/g, (s, i) => {\n    return (i > 0 ? \"-\" : \"\") + s.toLowerCase();\n  });\n}\nfunction throttle(callback, wait) {\n  let paused = false;\n  return function (...args) {\n    if (!paused) {\n      paused = true;\n      setTimeout(() => {\n        callback.apply(this, args);\n        paused = false;\n      }, wait);\n    }\n  };\n}\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null || Object.prototype.toString.call(value) !== \"[object Object]\") {\n    return false;\n  }\n  if (Object.getPrototypeOf(value) === null) {\n    return true;\n  }\n  let proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(value) === proto;\n}\nfunction deepmerge(target, src) {\n  const first = src;\n  return function merge(target2, src2) {\n    if (Array.isArray(src2)) {\n      if (!target2 || !Array.isArray(target2)) {\n        target2 = [];\n      } else {\n        target2.length = 0;\n      }\n      src2.forEach((e, i) => {\n        target2[i] = merge(null, e);\n      });\n    } else if (typeof src2 === \"object\") {\n      if (!target2 || Array.isArray(target2)) {\n        target2 = {};\n      }\n      Object.keys(src2).forEach(key => {\n        if (key === \"__proto__\") {\n          return;\n        }\n        if (typeof src2[key] !== \"object\" || !src2[key] || !isPlainObject(src2[key])) {\n          target2[key] = src2[key];\n        } else if (src2[key] !== first) {\n          if (!target2[key]) {\n            target2[key] = merge(null, src2[key]);\n          } else {\n            merge(target2[key], src2[key]);\n          }\n        }\n      });\n    } else {\n      target2 = src2;\n    }\n    return target2;\n  }(target, src);\n}\nfunction clone(src) {\n  return deepmerge(null, src);\n}\nfunction isEmpty(obj) {\n  return !obj || Object.keys(obj).length === 0 && obj.constructor === Object;\n}\nfunction isNil(val) {\n  return val === null || val === void 0;\n}\nfunction firstNonNull(...values) {\n  for (const val of values) {\n    if (!isNil(val)) {\n      return val;\n    }\n  }\n  return null;\n}\nfunction deepEqual(obj1, obj2) {\n  if (obj1 === obj2) {\n    return true;\n  } else if (isObject(obj1) && isObject(obj2)) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n    for (const prop of Object.keys(obj1)) {\n      if (!deepEqual(obj1[prop], obj2[prop])) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isObject(obj) {\n  return typeof obj === \"object\" && obj !== null;\n}\n\n// src/utils/psv.ts\nimport { LinearFilter, LinearMipmapLinearFilter, MathUtils, Quaternion, Texture } from \"three\";\n\n// src/PSVError.ts\nvar PSVError = class _PSVError extends Error {\n  constructor(message, reason) {\n    super(reason && reason instanceof Error ? `${message}: ${reason.message}` : message);\n    this.name = \"PSVError\";\n    Error.captureStackTrace?.(this, _PSVError);\n  }\n};\n\n// src/utils/psv.ts\nfunction resolveBoolean(value, cb) {\n  if (isPlainObject(value)) {\n    cb(value.initial, true);\n    value.promise.then(res => cb(res, false));\n  } else {\n    cb(value, true);\n  }\n}\nfunction invertResolvableBoolean(value) {\n  return {\n    initial: !value.initial,\n    promise: value.promise.then(res => !res)\n  };\n}\nfunction getAbortError() {\n  const error = new Error(\"Loading was aborted.\");\n  error.name = \"AbortError\";\n  return error;\n}\nfunction isAbortError(err) {\n  return err?.name === \"AbortError\";\n}\nfunction logWarn(message) {\n  console.warn(`PhotoSphereViewer: ${message}`);\n}\nfunction isExtendedPosition(object) {\n  if (!object || Array.isArray(object)) {\n    return false;\n  }\n  return [[\"textureX\", \"textureY\"], [\"yaw\", \"pitch\"]].some(([key1, key2]) => {\n    return object[key1] !== void 0 && object[key2] !== void 0;\n  });\n}\nfunction getXMPValue(data, attr, intVal = true) {\n  let result = data.match(\"<GPano:\" + attr + \">(.*)</GPano:\" + attr + \">\");\n  if (result !== null) {\n    const val = intVal ? parseInt(result[1], 10) : parseFloat(result[1]);\n    return isNaN(val) ? null : val;\n  }\n  result = data.match(\"GPano:\" + attr + '=\"(.*?)\"');\n  if (result !== null) {\n    const val = intVal ? parseInt(result[1], 10) : parseFloat(result[1]);\n    return isNaN(val) ? null : val;\n  }\n  return null;\n}\nvar CSS_POSITIONS = {\n  top: \"0%\",\n  bottom: \"100%\",\n  left: \"0%\",\n  right: \"100%\",\n  center: \"50%\"\n};\nvar X_VALUES = [\"left\", \"center\", \"right\"];\nvar Y_VALUES = [\"top\", \"center\", \"bottom\"];\nvar POS_VALUES = [...X_VALUES, ...Y_VALUES];\nvar CENTER = \"center\";\nfunction parsePoint(value) {\n  if (!value) {\n    return {\n      x: 0.5,\n      y: 0.5\n    };\n  }\n  if (typeof value === \"object\") {\n    return value;\n  }\n  let tokens = value.toLocaleLowerCase().split(\" \").slice(0, 2);\n  if (tokens.length === 1) {\n    if (CSS_POSITIONS[tokens[0]]) {\n      tokens = [tokens[0], CENTER];\n    } else {\n      tokens = [tokens[0], tokens[0]];\n    }\n  }\n  const xFirst = tokens[1] !== \"left\" && tokens[1] !== \"right\" && tokens[0] !== \"top\" && tokens[0] !== \"bottom\";\n  tokens = tokens.map(token => CSS_POSITIONS[token] || token);\n  if (!xFirst) {\n    tokens.reverse();\n  }\n  const parsed = tokens.join(\" \").match(/^([0-9.]+)% ([0-9.]+)%$/);\n  if (parsed) {\n    return {\n      x: parseFloat(parsed[1]) / 100,\n      y: parseFloat(parsed[2]) / 100\n    };\n  } else {\n    return {\n      x: 0.5,\n      y: 0.5\n    };\n  }\n}\nfunction cleanCssPosition(value, {\n  allowCenter,\n  cssOrder\n} = {\n  allowCenter: true,\n  cssOrder: true\n}) {\n  if (!value) {\n    return null;\n  }\n  if (typeof value === \"string\") {\n    value = value.split(\" \");\n  }\n  if (value.length === 1) {\n    if (value[0] === CENTER) {\n      value = [CENTER, CENTER];\n    } else if (X_VALUES.indexOf(value[0]) !== -1) {\n      value = [CENTER, value[0]];\n    } else if (Y_VALUES.indexOf(value[0]) !== -1) {\n      value = [value[0], CENTER];\n    }\n  }\n  if (value.length !== 2 || POS_VALUES.indexOf(value[0]) === -1 || POS_VALUES.indexOf(value[1]) === -1) {\n    logWarn(`Unparsable position ${value}`);\n    return null;\n  }\n  if (!allowCenter && value[0] === CENTER && value[1] === CENTER) {\n    logWarn(`Invalid position center center`);\n    return null;\n  }\n  if (cssOrder && !cssPositionIsOrdered(value)) {\n    value = [value[1], value[0]];\n  }\n  if (value[1] === CENTER && X_VALUES.indexOf(value[0]) !== -1) {\n    value = [CENTER, value[0]];\n  }\n  if (value[0] === CENTER && Y_VALUES.indexOf(value[1]) !== -1) {\n    value = [value[1], CENTER];\n  }\n  return value;\n}\nfunction cssPositionIsOrdered(value) {\n  return Y_VALUES.indexOf(value[0]) !== -1 && X_VALUES.indexOf(value[1]) !== -1;\n}\nfunction parseSpeed(speed) {\n  let parsed;\n  if (typeof speed === \"string\") {\n    const speedStr = speed.toString().trim();\n    let speedValue = parseFloat(speedStr.replace(/^(-?[0-9]+(?:\\.[0-9]*)?).*$/, \"$1\"));\n    const speedUnit = speedStr.replace(/^-?[0-9]+(?:\\.[0-9]*)?(.*)$/, \"$1\").trim();\n    if (speedUnit.match(/(pm|per minute)$/)) {\n      speedValue /= 60;\n    }\n    switch (speedUnit) {\n      // Degrees per minute / second\n      case \"dpm\":\n      case \"degrees per minute\":\n      case \"dps\":\n      case \"degrees per second\":\n        parsed = MathUtils.degToRad(speedValue);\n        break;\n      // Radians per minute / second\n      case \"rdpm\":\n      case \"radians per minute\":\n      case \"rdps\":\n      case \"radians per second\":\n        parsed = speedValue;\n        break;\n      // Revolutions per minute / second\n      case \"rpm\":\n      case \"revolutions per minute\":\n      case \"rps\":\n      case \"revolutions per second\":\n        parsed = speedValue * Math.PI * 2;\n        break;\n      // Unknown unit\n      default:\n        throw new PSVError(`Unknown speed unit \"${speedUnit}\"`);\n    }\n  } else {\n    parsed = speed;\n  }\n  return parsed;\n}\nfunction speedToDuration(value, angle2) {\n  if (typeof value !== \"number\") {\n    const speed = parseSpeed(value);\n    return angle2 / Math.abs(speed) * 1e3;\n  } else {\n    return Math.abs(value);\n  }\n}\nfunction parseAngle(angle2, zeroCenter = false, halfCircle = zeroCenter) {\n  let parsed;\n  if (typeof angle2 === \"string\") {\n    const match = angle2.toLowerCase().trim().match(/^(-?[0-9]+(?:\\.[0-9]*)?)(.*)$/);\n    if (!match) {\n      throw new PSVError(`Unknown angle \"${angle2}\"`);\n    }\n    const value = parseFloat(match[1]);\n    const unit = match[2];\n    if (unit) {\n      switch (unit) {\n        case \"deg\":\n        case \"degs\":\n          parsed = MathUtils.degToRad(value);\n          break;\n        case \"rad\":\n        case \"rads\":\n          parsed = value;\n          break;\n        default:\n          throw new PSVError(`Unknown angle unit \"${unit}\"`);\n      }\n    } else {\n      parsed = value;\n    }\n  } else if (typeof angle2 === \"number\" && !isNaN(angle2)) {\n    parsed = angle2;\n  } else {\n    throw new PSVError(`Unknown angle \"${angle2}\"`);\n  }\n  parsed = wrap(zeroCenter ? parsed + Math.PI : parsed, Math.PI * 2);\n  return zeroCenter ? MathUtils.clamp(parsed - Math.PI, -Math.PI / (halfCircle ? 2 : 1), Math.PI / (halfCircle ? 2 : 1)) : parsed;\n}\nfunction createTexture(img, mimaps = false) {\n  const texture = new Texture(img);\n  texture.needsUpdate = true;\n  texture.minFilter = mimaps ? LinearMipmapLinearFilter : LinearFilter;\n  texture.generateMipmaps = mimaps;\n  texture.anisotropy = mimaps ? 2 : 1;\n  return texture;\n}\nvar quaternion = new Quaternion();\nfunction applyEulerInverse(vector, euler) {\n  quaternion.setFromEuler(euler).invert();\n  vector.applyQuaternion(quaternion);\n}\nfunction getConfigParser(defaults, parsers) {\n  const parser = function (userConfig) {\n    const rawConfig = clone({\n      ...defaults,\n      ...userConfig\n    });\n    const config = {};\n    for (let [key, value] of Object.entries(rawConfig)) {\n      if (parsers && key in parsers) {\n        value = parsers[key](value, {\n          rawConfig,\n          defValue: defaults[key]\n        });\n      } else if (!(key in defaults)) {\n        logWarn(`Unknown option ${key}`);\n        continue;\n      }\n      config[key] = value;\n    }\n    return config;\n  };\n  parser.defaults = defaults;\n  parser.parsers = parsers || {};\n  return parser;\n}\nfunction checkStylesheet(element, name) {\n  if (getStyleProperty(element, `--psv-${name}-loaded`) !== \"true\") {\n    console.error(`PhotoSphereViewer: stylesheet \"@photo-sphere-viewer/${name}/index.css\" is not loaded`);\n  }\n}\nfunction checkVersion(name, version, coreVersion) {\n  if (version && version !== coreVersion) {\n    console.error(`PhotoSphereViewer: @photo-sphere-viewer/${name} is in version ${version} but @photo-sphere-viewer/core is in version ${coreVersion}`);\n  }\n}\nfunction checkClosedShadowDom(el) {\n  do {\n    if (el instanceof ShadowRoot && el.mode === \"closed\") {\n      console.error(`PhotoSphereViewer: closed shadow DOM detected, the viewer might not work as expected`);\n      return;\n    }\n    el = el.parentNode;\n  } while (el);\n}\nfunction mergePanoData(width, height, newPanoData, xmpPanoData) {\n  const panoData = {\n    isEquirectangular: true,\n    fullWidth: firstNonNull(newPanoData?.fullWidth, xmpPanoData?.fullWidth),\n    fullHeight: firstNonNull(newPanoData?.fullHeight, xmpPanoData?.fullHeight),\n    croppedWidth: width,\n    croppedHeight: height,\n    croppedX: firstNonNull(newPanoData?.croppedX, xmpPanoData?.croppedX),\n    croppedY: firstNonNull(newPanoData?.croppedY, xmpPanoData?.croppedY),\n    poseHeading: firstNonNull(newPanoData?.poseHeading, xmpPanoData?.poseHeading, 0),\n    posePitch: firstNonNull(newPanoData?.posePitch, xmpPanoData?.posePitch, 0),\n    poseRoll: firstNonNull(newPanoData?.poseRoll, xmpPanoData?.poseRoll, 0),\n    initialHeading: xmpPanoData?.initialHeading,\n    initialPitch: xmpPanoData?.initialPitch,\n    initialFov: xmpPanoData?.initialFov\n  };\n  if (!panoData.fullWidth && !panoData.fullHeight) {\n    panoData.fullWidth = Math.max(width, height * 2);\n    panoData.fullHeight = Math.round(panoData.fullWidth / 2);\n  }\n  if (!panoData.fullWidth) {\n    panoData.fullWidth = panoData.fullHeight * 2;\n  }\n  if (!panoData.fullHeight) {\n    panoData.fullHeight = Math.round(panoData.fullWidth / 2);\n  }\n  if (panoData.croppedX === null) {\n    panoData.croppedX = Math.round((panoData.fullWidth - width) / 2);\n  }\n  if (panoData.croppedY === null) {\n    panoData.croppedY = Math.round((panoData.fullHeight - height) / 2);\n  }\n  if (Math.abs(panoData.fullWidth - panoData.fullHeight * 2) > 1) {\n    logWarn(\"Invalid panoData, fullWidth should be twice fullHeight\");\n    panoData.fullHeight = Math.round(panoData.fullWidth / 2);\n  }\n  if (panoData.croppedX + panoData.croppedWidth > panoData.fullWidth) {\n    logWarn(\"Invalid panoData, croppedX + croppedWidth > fullWidth\");\n    panoData.croppedX = panoData.fullWidth - panoData.croppedWidth;\n  }\n  if (panoData.croppedY + panoData.croppedHeight > panoData.fullHeight) {\n    logWarn(\"Invalid panoData, croppedY + croppedHeight > fullHeight\");\n    panoData.croppedY = panoData.fullHeight - panoData.croppedHeight;\n  }\n  if (panoData.croppedX < 0) {\n    logWarn(\"Invalid panoData, croppedX < 0\");\n    panoData.croppedX = 0;\n  }\n  if (panoData.croppedY < 0) {\n    logWarn(\"Invalid panoData, croppedY < 0\");\n    panoData.croppedY = 0;\n  }\n  return panoData;\n}\n\n// src/utils/Animation.ts\nvar Animation = class {\n  constructor(options) {\n    this.easing = EASINGS[\"linear\"];\n    this.callbacks = [];\n    this.resolved = false;\n    this.cancelled = false;\n    this.options = options;\n    if (options) {\n      if (options.easing) {\n        this.easing = typeof options.easing === \"function\" ? options.easing : EASINGS[options.easing] || EASINGS[\"linear\"];\n      }\n      this.delayTimeout = setTimeout(() => {\n        this.delayTimeout = void 0;\n        this.animationFrame = window.requestAnimationFrame(t => this.__run(t));\n      }, options.delay || 0);\n    } else {\n      this.resolved = true;\n    }\n  }\n  __run(timestamp) {\n    if (this.cancelled) {\n      return;\n    }\n    if (!this.start) {\n      this.start = timestamp;\n    }\n    const progress = (timestamp - this.start) / this.options.duration;\n    const current = {};\n    if (progress < 1) {\n      for (const [name, prop] of Object.entries(this.options.properties)) {\n        if (prop) {\n          const value = prop.start + (prop.end - prop.start) * this.easing(progress);\n          current[name] = value;\n        }\n      }\n      this.options.onTick(current, progress);\n      this.animationFrame = window.requestAnimationFrame(t => this.__run(t));\n    } else {\n      for (const [name, prop] of Object.entries(this.options.properties)) {\n        if (prop) {\n          current[name] = prop.end;\n        }\n      }\n      this.options.onTick(current, 1);\n      this.__resolve(true);\n      this.animationFrame = void 0;\n    }\n  }\n  __resolve(value) {\n    if (value) {\n      this.resolved = true;\n    } else {\n      this.cancelled = true;\n    }\n    this.callbacks.forEach(cb => cb(value));\n    this.callbacks.length = 0;\n  }\n  /**\n   * Promise chaining\n   * @param [onFulfilled] - Called when the animation is complete (true) or cancelled (false)\n   */\n  then(onFulfilled) {\n    if (this.resolved || this.cancelled) {\n      return Promise.resolve(this.resolved).then(onFulfilled);\n    }\n    return new Promise(resolve => {\n      this.callbacks.push(resolve);\n    }).then(onFulfilled);\n  }\n  /**\n   * Cancels the animation\n   */\n  cancel() {\n    if (!this.cancelled && !this.resolved) {\n      this.__resolve(false);\n      if (this.delayTimeout) {\n        window.clearTimeout(this.delayTimeout);\n        this.delayTimeout = void 0;\n      }\n      if (this.animationFrame) {\n        window.cancelAnimationFrame(this.animationFrame);\n        this.animationFrame = void 0;\n      }\n    }\n  }\n};\n\n// src/utils/Dynamic.ts\nimport { MathUtils as MathUtils2 } from \"three\";\nvar Dynamic = class {\n  constructor(fn, config) {\n    this.fn = fn;\n    this.mode = 0 /* STOP */;\n    this.speed = 0;\n    this.speedMult = 0;\n    this.currentSpeed = 0;\n    this.target = 0;\n    this.__current = 0;\n    this.min = config.min;\n    this.max = config.max;\n    this.wrap = config.wrap;\n    this.current = config.defaultValue;\n    if (this.wrap && this.min !== 0) {\n      throw new PSVError(\"invalid config\");\n    }\n    if (this.fn) {\n      this.fn(this.current);\n    }\n  }\n  get current() {\n    return this.__current;\n  }\n  set current(current) {\n    this.__current = current;\n  }\n  /**\n   * Changes base speed\n   */\n  setSpeed(speed) {\n    this.speed = speed;\n  }\n  /**\n   * Defines the target position\n   */\n  goto(position, speedMult = 1) {\n    this.mode = 2 /* POSITION */;\n    this.target = this.wrap ? wrap(position, this.max) : MathUtils2.clamp(position, this.min, this.max);\n    this.speedMult = speedMult;\n  }\n  /**\n   * Increases/decreases the target position\n   */\n  step(step, speedMult = 1) {\n    if (speedMult === 0) {\n      this.setValue(this.current + step);\n    } else {\n      if (this.mode !== 2 /* POSITION */) {\n        this.target = this.current;\n      }\n      this.goto(this.target + step, speedMult);\n    }\n  }\n  /**\n   * Starts infinite movement\n   */\n  roll(invert = false, speedMult = 1) {\n    this.mode = 1 /* INFINITE */;\n    this.target = invert ? -Infinity : Infinity;\n    this.speedMult = speedMult;\n  }\n  /**\n   * Stops movement\n   */\n  stop() {\n    this.mode = 0 /* STOP */;\n  }\n  /**\n   * Defines the current position and immediately stops movement\n   * @param {number} value\n   */\n  setValue(value) {\n    this.target = this.wrap ? wrap(value, this.max) : MathUtils2.clamp(value, this.min, this.max);\n    this.mode = 0 /* STOP */;\n    this.currentSpeed = 0;\n    if (this.target !== this.current) {\n      this.current = this.target;\n      if (this.fn) {\n        this.fn(this.current);\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * @internal\n   */\n  update(elapsed) {\n    if (this.mode === 2 /* POSITION */) {\n      if (this.wrap && Math.abs(this.target - this.current) > this.max / 2) {\n        this.current = this.current < this.target ? this.current + this.max : this.current - this.max;\n      }\n      const dstStop = this.currentSpeed * this.currentSpeed / (this.speed * this.speedMult * 4);\n      if (Math.abs(this.target - this.current) <= dstStop) {\n        this.mode = 0 /* STOP */;\n      }\n    }\n    let targetSpeed = this.mode === 0 /* STOP */ ? 0 : this.speed * this.speedMult;\n    if (this.target < this.current) {\n      targetSpeed = -targetSpeed;\n    }\n    if (this.currentSpeed < targetSpeed) {\n      this.currentSpeed = Math.min(targetSpeed, this.currentSpeed + elapsed / 1e3 * this.speed * this.speedMult * 2);\n    } else if (this.currentSpeed > targetSpeed) {\n      this.currentSpeed = Math.max(targetSpeed, this.currentSpeed - elapsed / 1e3 * this.speed * this.speedMult * 2);\n    }\n    let next = null;\n    if (this.current > this.target && this.currentSpeed) {\n      next = Math.max(this.target, this.current + this.currentSpeed * elapsed / 1e3);\n    } else if (this.current < this.target && this.currentSpeed) {\n      next = Math.min(this.target, this.current + this.currentSpeed * elapsed / 1e3);\n    }\n    if (next !== null) {\n      next = this.wrap ? wrap(next, this.max) : MathUtils2.clamp(next, this.min, this.max);\n      if (next !== this.current) {\n        this.current = next;\n        if (this.fn) {\n          this.fn(this.current);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\n// src/utils/MultiDynamic.ts\nvar MultiDynamic = class {\n  constructor(fn, dynamics) {\n    this.fn = fn;\n    this.dynamics = dynamics;\n    if (this.fn) {\n      this.fn(this.current);\n    }\n  }\n  get current() {\n    return Object.entries(this.dynamics).reduce((values, [name, dynamic]) => {\n      values[name] = dynamic.current;\n      return values;\n    }, {});\n  }\n  /**\n   * Changes base speed\n   */\n  setSpeed(speed) {\n    for (const d of Object.values(this.dynamics)) {\n      d.setSpeed(speed);\n    }\n  }\n  /**\n   * Defines the target positions\n   */\n  goto(positions, speedMult = 1) {\n    for (const [name, position] of Object.entries(positions)) {\n      this.dynamics[name].goto(position, speedMult);\n    }\n  }\n  /**\n   * Increase/decrease the target positions\n   */\n  step(steps, speedMult = 1) {\n    if (speedMult === 0) {\n      this.setValue(Object.keys(steps).reduce((values, name) => {\n        values[name] = steps[name] + this.dynamics[name].current;\n        return values;\n      }, {}));\n    } else {\n      for (const [name, step] of Object.entries(steps)) {\n        this.dynamics[name].step(step, speedMult);\n      }\n    }\n  }\n  /**\n   * Starts infinite movements\n   */\n  roll(rolls, speedMult = 1) {\n    for (const [name, roll] of Object.entries(rolls)) {\n      this.dynamics[name].roll(roll, speedMult);\n    }\n  }\n  /**\n   * Stops movements\n   */\n  stop() {\n    for (const d of Object.values(this.dynamics)) {\n      d.stop();\n    }\n  }\n  /**\n   * Defines the current positions and immediately stops movements\n   */\n  setValue(values) {\n    let hasUpdates = false;\n    for (const [name, value] of Object.entries(values)) {\n      hasUpdates = this.dynamics[name].setValue(value) || hasUpdates;\n    }\n    if (hasUpdates && this.fn) {\n      this.fn(this.current);\n    }\n    return hasUpdates;\n  }\n  /**\n   * @internal\n   */\n  update(elapsed) {\n    let hasUpdates = false;\n    for (const d of Object.values(this.dynamics)) {\n      hasUpdates = d.update(elapsed) || hasUpdates;\n    }\n    if (hasUpdates && this.fn) {\n      this.fn(this.current);\n    }\n    return hasUpdates;\n  }\n};\n\n// src/utils/PressHandler.ts\nvar PressHandler = class {\n  constructor(delay = 200) {\n    this.delay = delay;\n    this.time = 0;\n    this.delay = delay;\n  }\n  get pending() {\n    return this.time !== 0;\n  }\n  down(data) {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n      this.timeout = void 0;\n    }\n    this.time = (/* @__PURE__ */new Date()).getTime();\n    this.data = data;\n  }\n  up(cb) {\n    if (!this.time) {\n      return;\n    }\n    const elapsed = Date.now() - this.time;\n    if (elapsed < this.delay) {\n      this.timeout = setTimeout(() => {\n        cb(this.data);\n        this.timeout = void 0;\n        this.time = 0;\n        this.data = void 0;\n      }, this.delay);\n    } else {\n      cb(this.data);\n      this.time = 0;\n      this.data = void 0;\n    }\n  }\n};\n\n// src/utils/Slider.ts\nimport { MathUtils as MathUtils3 } from \"three\";\nvar SliderDirection = /* @__PURE__ */(SliderDirection2 => {\n  SliderDirection2[\"VERTICAL\"] = \"VERTICAL\";\n  SliderDirection2[\"HORIZONTAL\"] = \"HORIZONTAL\";\n  return SliderDirection2;\n})(SliderDirection || {});\nvar Slider = class {\n  constructor(container, direction, listener) {\n    this.container = container;\n    this.direction = direction;\n    this.listener = listener;\n    this.mousedown = false;\n    this.mouseover = false;\n    this.container.addEventListener(\"click\", this);\n    this.container.addEventListener(\"mousedown\", this);\n    this.container.addEventListener(\"mouseenter\", this);\n    this.container.addEventListener(\"mouseleave\", this);\n    this.container.addEventListener(\"touchstart\", this);\n    this.container.addEventListener(\"mousemove\", this, true);\n    this.container.addEventListener(\"touchmove\", this, true);\n    window.addEventListener(\"mouseup\", this);\n    window.addEventListener(\"touchend\", this);\n  }\n  get isVertical() {\n    return this.direction === \"VERTICAL\" /* VERTICAL */;\n  }\n  get isHorizontal() {\n    return this.direction === \"HORIZONTAL\" /* HORIZONTAL */;\n  }\n  destroy() {\n    window.removeEventListener(\"mouseup\", this);\n    window.removeEventListener(\"touchend\", this);\n  }\n  /**\n   * @internal\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case \"click\":\n        e.stopPropagation();\n        break;\n      case \"mousedown\":\n        this.__onMouseDown(e);\n        break;\n      case \"mouseenter\":\n        this.__onMouseEnter(e);\n        break;\n      case \"mouseleave\":\n        this.__onMouseLeave(e);\n        break;\n      case \"touchstart\":\n        this.__onTouchStart(e);\n        break;\n      case \"mousemove\":\n        this.__onMouseMove(e);\n        break;\n      case \"touchmove\":\n        this.__onTouchMove(e);\n        break;\n      case \"mouseup\":\n        this.__onMouseUp(e);\n        break;\n      case \"touchend\":\n        this.__onTouchEnd(e);\n        break;\n    }\n  }\n  __onMouseDown(evt) {\n    this.mousedown = true;\n    this.__update(evt.clientX, evt.clientY, true);\n  }\n  __onMouseEnter(evt) {\n    this.mouseover = true;\n    this.__update(evt.clientX, evt.clientY, true);\n  }\n  __onTouchStart(evt) {\n    this.mouseover = true;\n    this.mousedown = true;\n    const touch = evt.changedTouches[0];\n    this.__update(touch.clientX, touch.clientY, true);\n  }\n  __onMouseMove(evt) {\n    if (this.mousedown || this.mouseover) {\n      evt.stopPropagation();\n      this.__update(evt.clientX, evt.clientY, true);\n    }\n  }\n  __onTouchMove(evt) {\n    if (this.mousedown || this.mouseover) {\n      evt.stopPropagation();\n      const touch = evt.changedTouches[0];\n      this.__update(touch.clientX, touch.clientY, true);\n    }\n  }\n  __onMouseUp(evt) {\n    if (this.mousedown) {\n      this.mousedown = false;\n      this.__update(evt.clientX, evt.clientY, false);\n    }\n  }\n  __onMouseLeave(evt) {\n    if (this.mouseover) {\n      this.mouseover = false;\n      this.__update(evt.clientX, evt.clientY, true);\n    }\n  }\n  __onTouchEnd(evt) {\n    if (this.mousedown) {\n      this.mouseover = false;\n      this.mousedown = false;\n      const touch = evt.changedTouches[0];\n      this.__update(touch.clientX, touch.clientY, false);\n    }\n  }\n  __update(clientX, clientY, moving) {\n    const boundingClientRect = this.container.getBoundingClientRect();\n    let val;\n    if (this.isVertical) {\n      val = MathUtils3.clamp((boundingClientRect.bottom - clientY) / boundingClientRect.height, 0, 1);\n    } else {\n      val = MathUtils3.clamp((clientX - boundingClientRect.left) / boundingClientRect.width, 0, 1);\n    }\n    this.listener({\n      value: val,\n      click: !moving,\n      mousedown: this.mousedown,\n      mouseover: this.mouseover,\n      cursor: {\n        clientX,\n        clientY\n      }\n    });\n  }\n};\n\n// src/events.ts\nvar events_exports = {};\n__export(events_exports, {\n  BeforeAnimateEvent: () => BeforeAnimateEvent,\n  BeforeRenderEvent: () => BeforeRenderEvent,\n  BeforeRotateEvent: () => BeforeRotateEvent,\n  ClickEvent: () => ClickEvent,\n  ConfigChangedEvent: () => ConfigChangedEvent,\n  DoubleClickEvent: () => DoubleClickEvent,\n  FullscreenEvent: () => FullscreenEvent,\n  HideNotificationEvent: () => HideNotificationEvent,\n  HideOverlayEvent: () => HideOverlayEvent,\n  HidePanelEvent: () => HidePanelEvent,\n  HideTooltipEvent: () => HideTooltipEvent,\n  KeypressEvent: () => KeypressEvent,\n  LoadProgressEvent: () => LoadProgressEvent,\n  ObjectEnterEvent: () => ObjectEnterEvent,\n  ObjectEvent: () => ObjectEvent,\n  ObjectHoverEvent: () => ObjectHoverEvent,\n  ObjectLeaveEvent: () => ObjectLeaveEvent,\n  PanoramaErrorEvent: () => PanoramaErrorEvent,\n  PanoramaLoadEvent: () => PanoramaLoadEvent,\n  PanoramaLoadedEvent: () => PanoramaLoadedEvent,\n  PositionUpdatedEvent: () => PositionUpdatedEvent,\n  ReadyEvent: () => ReadyEvent,\n  RenderEvent: () => RenderEvent,\n  RollUpdatedEvent: () => RollUpdatedEvent,\n  ShowNotificationEvent: () => ShowNotificationEvent,\n  ShowOverlayEvent: () => ShowOverlayEvent,\n  ShowPanelEvent: () => ShowPanelEvent,\n  ShowTooltipEvent: () => ShowTooltipEvent,\n  SizeUpdatedEvent: () => SizeUpdatedEvent,\n  StopAllEvent: () => StopAllEvent,\n  TransitionDoneEvent: () => TransitionDoneEvent,\n  ViewerEvent: () => ViewerEvent,\n  ZoomUpdatedEvent: () => ZoomUpdatedEvent\n});\n\n// src/lib/TypedEventTarget.ts\nvar TypedEvent = class extends Event {\n  constructor(type, cancelable = false) {\n    super(type, {\n      cancelable\n    });\n  }\n};\nvar TypedEventTarget = class extends EventTarget {\n  dispatchEvent(e) {\n    return super.dispatchEvent(e);\n  }\n  /**\n   * @template T the name of event\n   * @template E the class of the event\n   */\n  addEventListener(type, callback, options) {\n    super.addEventListener(type, callback, options);\n  }\n  /**\n   * @template T the name of event\n   * @template E the class of the event\n   */\n  removeEventListener(type, callback, options) {\n    super.removeEventListener(type, callback, options);\n  }\n};\n\n// src/events.ts\nvar ViewerEvent = class extends TypedEvent {};\nvar _BeforeAnimateEvent = class _BeforeAnimateEvent extends ViewerEvent {\n  /** @internal */\n  constructor(position, zoomLevel) {\n    super(_BeforeAnimateEvent.type, true);\n    this.position = position;\n    this.zoomLevel = zoomLevel;\n  }\n};\n_BeforeAnimateEvent.type = \"before-animate\";\nvar BeforeAnimateEvent = _BeforeAnimateEvent;\nvar _BeforeRenderEvent = class _BeforeRenderEvent extends ViewerEvent {\n  /** @internal */\n  constructor(timestamp, elapsed) {\n    super(_BeforeRenderEvent.type);\n    this.timestamp = timestamp;\n    this.elapsed = elapsed;\n  }\n};\n_BeforeRenderEvent.type = \"before-render\";\nvar BeforeRenderEvent = _BeforeRenderEvent;\nvar _BeforeRotateEvent = class _BeforeRotateEvent extends ViewerEvent {\n  /** @internal */\n  constructor(position) {\n    super(_BeforeRotateEvent.type, true);\n    this.position = position;\n  }\n};\n_BeforeRotateEvent.type = \"before-rotate\";\nvar BeforeRotateEvent = _BeforeRotateEvent;\nvar _ClickEvent = class _ClickEvent extends ViewerEvent {\n  /** @internal */\n  constructor(data) {\n    super(_ClickEvent.type);\n    this.data = data;\n  }\n};\n_ClickEvent.type = \"click\";\nvar ClickEvent = _ClickEvent;\nvar _ConfigChangedEvent = class _ConfigChangedEvent extends ViewerEvent {\n  /** @internal */\n  constructor(options) {\n    super(_ConfigChangedEvent.type);\n    this.options = options;\n  }\n  /**\n   * Checks if at least one of the `options` has been modified\n   */\n  containsOptions(...options) {\n    return options.some(option => this.options.includes(option));\n  }\n};\n_ConfigChangedEvent.type = \"config-changed\";\nvar ConfigChangedEvent = _ConfigChangedEvent;\nvar _DoubleClickEvent = class _DoubleClickEvent extends ViewerEvent {\n  /** @internal */\n  constructor(data) {\n    super(_DoubleClickEvent.type);\n    this.data = data;\n  }\n};\n_DoubleClickEvent.type = \"dblclick\";\nvar DoubleClickEvent = _DoubleClickEvent;\nvar _FullscreenEvent = class _FullscreenEvent extends ViewerEvent {\n  /** @internal */\n  constructor(fullscreenEnabled) {\n    super(_FullscreenEvent.type);\n    this.fullscreenEnabled = fullscreenEnabled;\n  }\n};\n_FullscreenEvent.type = \"fullscreen\";\nvar FullscreenEvent = _FullscreenEvent;\nvar _HideNotificationEvent = class _HideNotificationEvent extends ViewerEvent {\n  /** @internal */\n  constructor(notificationId) {\n    super(_HideNotificationEvent.type);\n    this.notificationId = notificationId;\n  }\n};\n_HideNotificationEvent.type = \"hide-notification\";\nvar HideNotificationEvent = _HideNotificationEvent;\nvar _HideOverlayEvent = class _HideOverlayEvent extends ViewerEvent {\n  /** @internal */\n  constructor(overlayId) {\n    super(_HideOverlayEvent.type);\n    this.overlayId = overlayId;\n  }\n};\n_HideOverlayEvent.type = \"hide-overlay\";\nvar HideOverlayEvent = _HideOverlayEvent;\nvar _HidePanelEvent = class _HidePanelEvent extends ViewerEvent {\n  /** @internal */\n  constructor(panelId) {\n    super(_HidePanelEvent.type);\n    this.panelId = panelId;\n  }\n};\n_HidePanelEvent.type = \"hide-panel\";\nvar HidePanelEvent = _HidePanelEvent;\nvar _HideTooltipEvent = class _HideTooltipEvent extends ViewerEvent {\n  /** @internal */\n  constructor(tooltipData) {\n    super(_HideTooltipEvent.type);\n    this.tooltipData = tooltipData;\n  }\n};\n_HideTooltipEvent.type = \"hide-tooltip\";\nvar HideTooltipEvent = _HideTooltipEvent;\nvar _KeypressEvent = class _KeypressEvent extends ViewerEvent {\n  /** @internal */\n  constructor(key, originalEvent) {\n    super(_KeypressEvent.type, true);\n    this.key = key;\n    this.originalEvent = originalEvent;\n  }\n};\n_KeypressEvent.type = \"key-press\";\nvar KeypressEvent = _KeypressEvent;\nvar _LoadProgressEvent = class _LoadProgressEvent extends ViewerEvent {\n  /** @internal */\n  constructor(progress) {\n    super(_LoadProgressEvent.type);\n    this.progress = progress;\n  }\n};\n_LoadProgressEvent.type = \"load-progress\";\nvar LoadProgressEvent = _LoadProgressEvent;\nvar _PanoramaLoadEvent = class _PanoramaLoadEvent extends ViewerEvent {\n  /** @internal */\n  constructor(panorama) {\n    super(_PanoramaLoadEvent.type);\n    this.panorama = panorama;\n  }\n};\n_PanoramaLoadEvent.type = \"panorama-load\";\nvar PanoramaLoadEvent = _PanoramaLoadEvent;\nvar _PanoramaLoadedEvent = class _PanoramaLoadedEvent extends ViewerEvent {\n  /** @internal */\n  constructor(data) {\n    super(_PanoramaLoadedEvent.type);\n    this.data = data;\n  }\n};\n_PanoramaLoadedEvent.type = \"panorama-loaded\";\nvar PanoramaLoadedEvent = _PanoramaLoadedEvent;\nvar _PanoramaErrorEvent = class _PanoramaErrorEvent extends ViewerEvent {\n  /** @internal */\n  constructor(panorama, error) {\n    super(_PanoramaErrorEvent.type);\n    this.panorama = panorama;\n    this.error = error;\n  }\n};\n_PanoramaErrorEvent.type = \"panorama-error\";\nvar PanoramaErrorEvent = _PanoramaErrorEvent;\nvar _TransitionDoneEvent = class _TransitionDoneEvent extends ViewerEvent {\n  /** @internal */\n  constructor(completed) {\n    super(_TransitionDoneEvent.type);\n    this.completed = completed;\n  }\n};\n_TransitionDoneEvent.type = \"transition-done\";\nvar TransitionDoneEvent = _TransitionDoneEvent;\nvar _PositionUpdatedEvent = class _PositionUpdatedEvent extends ViewerEvent {\n  /** @internal */\n  constructor(position) {\n    super(_PositionUpdatedEvent.type);\n    this.position = position;\n  }\n};\n_PositionUpdatedEvent.type = \"position-updated\";\nvar PositionUpdatedEvent = _PositionUpdatedEvent;\nvar _RollUpdatedEvent = class _RollUpdatedEvent extends ViewerEvent {\n  /** @internal */\n  constructor(roll) {\n    super(_RollUpdatedEvent.type);\n    this.roll = roll;\n  }\n};\n_RollUpdatedEvent.type = \"roll-updated\";\nvar RollUpdatedEvent = _RollUpdatedEvent;\nvar _ReadyEvent = class _ReadyEvent extends ViewerEvent {\n  /** @internal */\n  constructor() {\n    super(_ReadyEvent.type);\n  }\n};\n_ReadyEvent.type = \"ready\";\nvar ReadyEvent = _ReadyEvent;\nvar _RenderEvent = class _RenderEvent extends ViewerEvent {\n  /** @internal */\n  constructor() {\n    super(_RenderEvent.type);\n  }\n};\n_RenderEvent.type = \"render\";\nvar RenderEvent = _RenderEvent;\nvar _ShowNotificationEvent = class _ShowNotificationEvent extends ViewerEvent {\n  /** @internal */\n  constructor(notificationId) {\n    super(_ShowNotificationEvent.type);\n    this.notificationId = notificationId;\n  }\n};\n_ShowNotificationEvent.type = \"show-notification\";\nvar ShowNotificationEvent = _ShowNotificationEvent;\nvar _ShowOverlayEvent = class _ShowOverlayEvent extends ViewerEvent {\n  /** @internal */\n  constructor(overlayId) {\n    super(_ShowOverlayEvent.type);\n    this.overlayId = overlayId;\n  }\n};\n_ShowOverlayEvent.type = \"show-overlay\";\nvar ShowOverlayEvent = _ShowOverlayEvent;\nvar _ShowPanelEvent = class _ShowPanelEvent extends ViewerEvent {\n  /** @internal */\n  constructor(panelId) {\n    super(_ShowPanelEvent.type);\n    this.panelId = panelId;\n  }\n};\n_ShowPanelEvent.type = \"show-panel\";\nvar ShowPanelEvent = _ShowPanelEvent;\nvar _ShowTooltipEvent = class _ShowTooltipEvent extends ViewerEvent {\n  /** @internal */\n  constructor(tooltip, tooltipData) {\n    super(_ShowTooltipEvent.type);\n    this.tooltip = tooltip;\n    this.tooltipData = tooltipData;\n  }\n};\n_ShowTooltipEvent.type = \"show-tooltip\";\nvar ShowTooltipEvent = _ShowTooltipEvent;\nvar _SizeUpdatedEvent = class _SizeUpdatedEvent extends ViewerEvent {\n  /** @internal */\n  constructor(size) {\n    super(_SizeUpdatedEvent.type);\n    this.size = size;\n  }\n};\n_SizeUpdatedEvent.type = \"size-updated\";\nvar SizeUpdatedEvent = _SizeUpdatedEvent;\nvar _StopAllEvent = class _StopAllEvent extends ViewerEvent {\n  /** @internal */\n  constructor() {\n    super(_StopAllEvent.type);\n  }\n};\n_StopAllEvent.type = \"stop-all\";\nvar StopAllEvent = _StopAllEvent;\nvar _ZoomUpdatedEvent = class _ZoomUpdatedEvent extends ViewerEvent {\n  /** @internal */\n  constructor(zoomLevel) {\n    super(_ZoomUpdatedEvent.type);\n    this.zoomLevel = zoomLevel;\n  }\n};\n_ZoomUpdatedEvent.type = \"zoom-updated\";\nvar ZoomUpdatedEvent = _ZoomUpdatedEvent;\nvar ObjectEvent = class extends ViewerEvent {\n  /** @internal */\n  constructor(type, originalEvent, object, viewerPoint, userDataKey) {\n    super(type);\n    this.originalEvent = originalEvent;\n    this.object = object;\n    this.viewerPoint = viewerPoint;\n    this.userDataKey = userDataKey;\n  }\n};\nvar _ObjectEnterEvent = class _ObjectEnterEvent extends ObjectEvent {\n  /** @internal */\n  constructor(originalEvent, object, viewerPoint, userDataKey) {\n    super(_ObjectEnterEvent.type, originalEvent, object, viewerPoint, userDataKey);\n  }\n};\n_ObjectEnterEvent.type = \"enter-object\";\nvar ObjectEnterEvent = _ObjectEnterEvent;\nvar _ObjectLeaveEvent = class _ObjectLeaveEvent extends ObjectEvent {\n  /** @internal */\n  constructor(originalEvent, object, viewerPoint, userDataKey) {\n    super(_ObjectLeaveEvent.type, originalEvent, object, viewerPoint, userDataKey);\n  }\n};\n_ObjectLeaveEvent.type = \"leave-object\";\nvar ObjectLeaveEvent = _ObjectLeaveEvent;\nvar _ObjectHoverEvent = class _ObjectHoverEvent extends ObjectEvent {\n  /** @internal */\n  constructor(originalEvent, object, viewerPoint, userDataKey) {\n    super(_ObjectHoverEvent.type, originalEvent, object, viewerPoint, userDataKey);\n  }\n};\n_ObjectHoverEvent.type = \"hover-object\";\nvar ObjectHoverEvent = _ObjectHoverEvent;\n\n// src/adapters/AbstractAdapter.ts\nvar AbstractAdapter = class {\n  constructor(viewer) {\n    this.viewer = viewer;\n  }\n  /**\n   * Initializes the adapter\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  /**\n   * Destroys the adapter\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  destroy() {}\n  /**\n   * Indicates if the adapter supports transitions between panoramas\n   */\n  // @ts-ignore unused parameter\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  supportsTransition(panorama) {\n    return false;\n  }\n  /**\n   * Indicates if the adapter supports preload of a panorama\n   */\n  // @ts-ignore unused parameter\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  supportsPreload(panorama) {\n    return false;\n  }\n  /**\n   * Converts pixel texture coordinates to spherical radians coordinates\n   * @throws {@link PSVError} when the current adapter does not support texture coordinates\n   */\n  // @ts-ignore unused parameter\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  textureCoordsToSphericalCoords(point, data) {\n    throw new PSVError(\"Current adapter does not support texture coordinates.\");\n  }\n  /**\n   * Converts spherical radians coordinates to pixel texture coordinates\n   * @throws {@link PSVError} when the current adapter does not support texture coordinates\n   */\n  // @ts-ignore unused parameter\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  sphericalCoordsToTextureCoords(position, data) {\n    throw new PSVError(\"Current adapter does not support texture coordinates.\");\n  }\n};\n/**\n * Indicates if the adapter supports panorama download natively\n */\nAbstractAdapter.supportsDownload = false;\nfunction adapterInterop(adapter) {\n  if (adapter) {\n    for (const [, p] of [[\"_\", adapter], ...Object.entries(adapter)]) {\n      if (p.prototype instanceof AbstractAdapter) {\n        checkVersion(p.id, p.VERSION, \"5.13.2\");\n        return p;\n      }\n    }\n  }\n  return null;\n}\n\n// src/adapters/DualFisheyeAdapter.ts\nimport { Mesh as Mesh2, MeshBasicMaterial as MeshBasicMaterial2, SphereGeometry as SphereGeometry2 } from \"three\";\n\n// src/adapters/EquirectangularAdapter.ts\nimport { MathUtils as MathUtils4, Mesh, MeshBasicMaterial, SphereGeometry } from \"three\";\n\n// src/data/system.ts\nvar LOCALSTORAGE_TOUCH_SUPPORT = `${VIEWER_DATA}_touchSupport`;\nvar SYSTEM = {\n  /**\n   * Indicates if the system data has been loaded\n   */\n  loaded: false,\n  /**\n   * Device screen pixel ratio\n   */\n  pixelRatio: 1,\n  /**\n   * Device supports WebGL\n   */\n  isWebGLSupported: false,\n  /**\n   * Maximum WebGL texture width\n   */\n  maxTextureWidth: 0,\n  /**\n   * Device supports touch events\n   */\n  isTouchEnabled: null,\n  /**\n   * @internal\n   */\n  __maxCanvasWidth: null,\n  /**\n   * If the current device is an iPhone\n   */\n  isIphone: false,\n  /**\n   * Maximum canvas width\n   */\n  get maxCanvasWidth() {\n    if (this.__maxCanvasWidth === null) {\n      this.__maxCanvasWidth = getMaxCanvasWidth(this.maxTextureWidth);\n    }\n    return this.__maxCanvasWidth;\n  },\n  /**\n   * Loads the system if not already loaded\n   * @internal\n   */\n  load() {\n    if (!this.loaded) {\n      const ctx = getWebGLCtx();\n      this.pixelRatio = window.devicePixelRatio || 1;\n      this.isWebGLSupported = !!ctx;\n      this.maxTextureWidth = ctx ? ctx.getParameter(ctx.MAX_TEXTURE_SIZE) : 0;\n      this.isTouchEnabled = isTouchEnabled();\n      this.isIphone = /iPhone/i.test(navigator.userAgent);\n      this.loaded = true;\n    }\n    if (!SYSTEM.isWebGLSupported) {\n      throw new PSVError(\"WebGL 2 is not supported.\");\n    }\n    if (SYSTEM.maxTextureWidth === 0) {\n      throw new PSVError(\"Unable to detect system capabilities\");\n    }\n  }\n};\nfunction getWebGLCtx() {\n  try {\n    const canvas = document.createElement(\"canvas\");\n    return canvas.getContext(\"webgl2\");\n  } catch {\n    return null;\n  }\n}\nfunction isTouchEnabled() {\n  let initial = \"ontouchstart\" in window || navigator.maxTouchPoints > 0;\n  if (LOCALSTORAGE_TOUCH_SUPPORT in localStorage) {\n    initial = localStorage[LOCALSTORAGE_TOUCH_SUPPORT] === \"true\";\n  }\n  const promise = new Promise(resolve => {\n    const clear = () => {\n      window.removeEventListener(\"mousedown\", listenerMouse);\n      window.removeEventListener(\"touchstart\", listenerTouch);\n      clearTimeout(listenerTimeoutId);\n    };\n    const listenerMouse = () => {\n      clear();\n      localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = false;\n      resolve(false);\n    };\n    const listenerTouch = () => {\n      clear();\n      localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = true;\n      resolve(true);\n    };\n    const listenerTimeout = () => {\n      clear();\n      localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = initial;\n      resolve(initial);\n    };\n    window.addEventListener(\"mousedown\", listenerMouse, false);\n    window.addEventListener(\"touchstart\", listenerTouch, false);\n    const listenerTimeoutId = setTimeout(listenerTimeout, 1e4);\n  });\n  return {\n    initial,\n    promise\n  };\n}\nfunction getMaxCanvasWidth(maxWidth) {\n  let width = maxWidth;\n  let pass = false;\n  const cropCanvas = document.createElement(\"canvas\");\n  const cropCtx = cropCanvas.getContext(\"2d\");\n  cropCanvas.width = 1;\n  cropCanvas.height = 1;\n  while (width > 1024 && !pass) {\n    const testCanvas = document.createElement(\"canvas\");\n    const testCtx = testCanvas.getContext(\"2d\");\n    testCanvas.width = width;\n    testCanvas.height = width / 2;\n    try {\n      testCtx.fillStyle = \"white\";\n      testCtx.fillRect(width - 1, width / 2 - 1, 1, 1);\n      cropCtx.drawImage(testCanvas, width - 1, width / 2 - 1, 1, 1, 0, 0, 1, 1);\n      if (cropCtx.getImageData(0, 0, 1, 1).data[0] > 0) {\n        pass = true;\n      }\n    } catch {}\n    testCanvas.width = 0;\n    testCanvas.height = 0;\n    if (!pass) {\n      width /= 2;\n    }\n  }\n  if (pass) {\n    return width;\n  } else {\n    throw new PSVError(\"Unable to detect system capabilities\");\n  }\n}\n\n// src/adapters/EquirectangularAdapter.ts\nvar getConfig = getConfigParser({\n  resolution: 64,\n  useXmpData: true,\n  blur: false\n}, {\n  resolution: resolution => {\n    if (!resolution || !MathUtils4.isPowerOfTwo(resolution)) {\n      throw new PSVError(\"EquirectangularAdapter resolution must be power of two.\");\n    }\n    return resolution;\n  }\n});\nvar EquirectangularAdapter = class extends AbstractAdapter {\n  constructor(viewer, config) {\n    super(viewer);\n    this.config = getConfig(config);\n    this.SPHERE_SEGMENTS = this.config.resolution;\n    this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n  }\n  supportsTransition() {\n    return true;\n  }\n  supportsPreload() {\n    return true;\n  }\n  textureCoordsToSphericalCoords(point, data) {\n    if (isNil(point.textureX) || isNil(point.textureY)) {\n      throw new PSVError(`Texture position is missing 'textureX' or 'textureY'`);\n    }\n    const relativeX = (point.textureX + data.croppedX) / data.fullWidth * Math.PI * 2;\n    const relativeY = (point.textureY + data.croppedY) / data.fullHeight * Math.PI;\n    return {\n      yaw: relativeX >= Math.PI ? relativeX - Math.PI : relativeX + Math.PI,\n      pitch: Math.PI / 2 - relativeY\n    };\n  }\n  sphericalCoordsToTextureCoords(position, data) {\n    const relativeLong = position.yaw / Math.PI / 2 * data.fullWidth;\n    const relativeLat = position.pitch / Math.PI * data.fullHeight;\n    let textureX = Math.round(position.yaw < Math.PI ? relativeLong + data.fullWidth / 2 : relativeLong - data.fullWidth / 2) - data.croppedX;\n    let textureY = Math.round(data.fullHeight / 2 - relativeLat) - data.croppedY;\n    if (textureX < 0 || textureX > data.croppedWidth || textureY < 0 || textureY > data.croppedHeight) {\n      textureX = textureY = void 0;\n    }\n    return {\n      textureX,\n      textureY\n    };\n  }\n  async loadTexture(panorama, loader = true, newPanoData, useXmpPanoData = this.config.useXmpData) {\n    if (typeof panorama !== \"string\" && (typeof panorama !== \"object\" || !panorama.path)) {\n      return Promise.reject(new PSVError(\"Invalid panorama url, are you using the right adapter?\"));\n    }\n    let cleanPanorama;\n    if (typeof panorama === \"string\") {\n      cleanPanorama = {\n        path: panorama,\n        data: newPanoData\n      };\n    } else {\n      cleanPanorama = {\n        data: newPanoData,\n        ...panorama\n      };\n    }\n    const blob = await this.viewer.textureLoader.loadFile(cleanPanorama.path, loader ? p => this.viewer.textureLoader.dispatchProgress(p) : null, cleanPanorama.path);\n    const xmpPanoData = useXmpPanoData ? await this.loadXMP(blob) : null;\n    const img = await this.viewer.textureLoader.blobToImage(blob);\n    if (typeof cleanPanorama.data === \"function\") {\n      cleanPanorama.data = cleanPanorama.data(img, xmpPanoData);\n    }\n    const panoData = mergePanoData(img.width, img.height, cleanPanorama.data, xmpPanoData);\n    const texture = this.createEquirectangularTexture(img);\n    return {\n      panorama,\n      texture,\n      panoData,\n      cacheKey: cleanPanorama.path\n    };\n  }\n  /**\n   * Loads the XMP data of an image\n   */\n  async loadXMP(blob) {\n    const binary = await this.loadBlobAsString(blob);\n    const a = binary.indexOf(\"<x:xmpmeta\");\n    if (a === -1) {\n      return null;\n    }\n    const b = binary.indexOf(\"</x:xmpmeta>\", a);\n    if (b === -1) {\n      return null;\n    }\n    const data = binary.substring(a, b);\n    if (!data.includes(\"GPano:\")) {\n      return null;\n    }\n    return {\n      fullWidth: getXMPValue(data, \"FullPanoWidthPixels\"),\n      fullHeight: getXMPValue(data, \"FullPanoHeightPixels\"),\n      croppedWidth: getXMPValue(data, \"CroppedAreaImageWidthPixels\"),\n      croppedHeight: getXMPValue(data, \"CroppedAreaImageHeightPixels\"),\n      croppedX: getXMPValue(data, \"CroppedAreaLeftPixels\"),\n      croppedY: getXMPValue(data, \"CroppedAreaTopPixels\"),\n      poseHeading: getXMPValue(data, \"PoseHeadingDegrees\", false),\n      posePitch: getXMPValue(data, \"PosePitchDegrees\", false),\n      poseRoll: getXMPValue(data, \"PoseRollDegrees\", false),\n      initialHeading: getXMPValue(data, \"InitialViewHeadingDegrees\", false),\n      initialPitch: getXMPValue(data, \"InitialViewPitchDegrees\", false),\n      initialFov: getXMPValue(data, \"InitialHorizontalFOVDegrees\", false)\n    };\n  }\n  /**\n   * Reads a Blob as a string\n   */\n  loadBlobAsString(blob) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsText(blob);\n    });\n  }\n  /**\n   * Creates the final texture from image and panorama data\n   */\n  createEquirectangularTexture(img) {\n    if (this.config.blur || img.width > SYSTEM.maxTextureWidth) {\n      const ratio = Math.min(1, SYSTEM.maxCanvasWidth / img.width);\n      const buffer = new OffscreenCanvas(Math.floor(img.width * ratio), Math.floor(img.height * ratio));\n      const ctx = buffer.getContext(\"2d\");\n      if (this.config.blur) {\n        ctx.filter = `blur(${buffer.width / 2048}px)`;\n      }\n      ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n      return createTexture(buffer);\n    }\n    return createTexture(img);\n  }\n  createMesh(panoData) {\n    const hStart = panoData.croppedX / panoData.fullWidth * 2 * Math.PI;\n    const hLength = panoData.croppedWidth / panoData.fullWidth * 2 * Math.PI;\n    const vStart = panoData.croppedY / panoData.fullHeight * Math.PI;\n    const vLength = panoData.croppedHeight / panoData.fullHeight * Math.PI;\n    const geometry = new SphereGeometry(SPHERE_RADIUS, Math.round(this.SPHERE_SEGMENTS / (2 * Math.PI) * hLength), Math.round(this.SPHERE_HORIZONTAL_SEGMENTS / Math.PI * vLength), -Math.PI / 2 + hStart, hLength, vStart, vLength).scale(-1, 1, 1);\n    const material = new MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false\n    });\n    return new Mesh(geometry, material);\n  }\n  setTexture(mesh, textureData) {\n    mesh.material.map = textureData.texture;\n  }\n  setTextureOpacity(mesh, opacity) {\n    mesh.material.opacity = opacity;\n    mesh.material.transparent = opacity < 1;\n  }\n  disposeTexture({\n    texture\n  }) {\n    texture.dispose();\n  }\n  disposeMesh(mesh) {\n    mesh.geometry.dispose();\n    mesh.material.dispose();\n  }\n};\nEquirectangularAdapter.id = \"equirectangular\";\nEquirectangularAdapter.VERSION = \"5.13.2\";\nEquirectangularAdapter.supportsDownload = true;\n\n// src/adapters/DualFisheyeAdapter.ts\nvar DualFisheyeAdapter = class extends EquirectangularAdapter {\n  constructor(viewer, config) {\n    super(viewer, {\n      resolution: config?.resolution ?? 64,\n      useXmpData: false\n    });\n  }\n  async loadTexture(panorama, loader) {\n    const result = await super.loadTexture(panorama, loader, null, false);\n    result.panoData = null;\n    return result;\n  }\n  createMesh() {\n    const geometry = new SphereGeometry2(SPHERE_RADIUS, this.SPHERE_SEGMENTS, this.SPHERE_HORIZONTAL_SEGMENTS).scale(-1, 1, 1).toNonIndexed();\n    const uvs = geometry.getAttribute(\"uv\");\n    const normals = geometry.getAttribute(\"normal\");\n    for (let i = 0; i < uvs.count; i++) {\n      for (let j = 0; j < 3; j++) {\n        const index = i * 3 + j;\n        const x = normals.getX(index);\n        const y = normals.getY(index);\n        const z = normals.getZ(index);\n        const c = 0.947;\n        if (i < uvs.count / 6) {\n          const correction = x === 0 && z === 0 ? 1 : Math.acos(y) / Math.sqrt(x * x + z * z) * (2 / Math.PI);\n          uvs.setXY(index, x * (c / 4) * correction + 1 / 4, z * (c / 2) * correction + 1 / 2);\n        } else {\n          const correction = x === 0 && z === 0 ? 1 : Math.acos(-y) / Math.sqrt(x * x + z * z) * (2 / Math.PI);\n          uvs.setXY(index, -x * (c / 4) * correction + 3 / 4, z * (c / 2) * correction + 1 / 2);\n        }\n      }\n    }\n    geometry.rotateX(-Math.PI / 2);\n    geometry.rotateY(Math.PI);\n    const material = new MeshBasicMaterial2({\n      depthTest: false,\n      depthWrite: false\n    });\n    return new Mesh2(geometry, material);\n  }\n};\nDualFisheyeAdapter.id = \"dual-fisheye\";\nDualFisheyeAdapter.VERSION = \"5.13.2\";\n\n// src/components/AbstractComponent.ts\nvar AbstractComponent = class _AbstractComponent {\n  constructor(parent, config) {\n    this.parent = parent;\n    /**\n     * All child components\n     * @internal\n     */\n    this.children = [];\n    /**\n     * Internal properties\n     * @internal\n     */\n    this.state = {\n      visible: true\n    };\n    this.viewer = parent instanceof _AbstractComponent ? parent.viewer : parent;\n    this.container = document.createElement(config.tagName ?? \"div\");\n    this.container.className = config.className || \"\";\n    this.parent.children.push(this);\n    this.parent.container.appendChild(this.container);\n  }\n  /**\n   * Destroys the component\n   */\n  destroy() {\n    this.parent.container.removeChild(this.container);\n    const childIdx = this.parent.children.indexOf(this);\n    if (childIdx !== -1) {\n      this.parent.children.splice(childIdx, 1);\n    }\n    this.children.slice().forEach(child => child.destroy());\n    this.children.length = 0;\n  }\n  /**\n   * Displays or hides the component\n   */\n  toggle(visible = !this.isVisible()) {\n    if (!visible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n  /**\n   * Hides the component\n   */\n  // @ts-ignore unused parameter\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  hide(options) {\n    this.container.style.display = \"none\";\n    this.state.visible = false;\n  }\n  /**\n   * Displays the component\n   */\n  // @ts-ignore unused parameter\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  show(options) {\n    this.container.style.display = \"\";\n    this.state.visible = true;\n  }\n  /**\n   * Checks if the component is visible\n   */\n  isVisible() {\n    return this.state.visible;\n  }\n};\n\n// src/buttons/AbstractButton.ts\nvar getConfig2 = getConfigParser({\n  id: null,\n  tagName: null,\n  className: null,\n  title: null,\n  hoverScale: false,\n  collapsable: false,\n  tabbable: true,\n  icon: null,\n  iconActive: null\n});\nvar AbstractButton = class extends AbstractComponent {\n  constructor(navbar, config) {\n    super(navbar, {\n      tagName: config.tagName,\n      className: `psv-button ${config.hoverScale ? \"psv-button--hover-scale\" : \"\"} ${config.className || \"\"}`\n    });\n    /**\n     * Internal properties\n     */\n    this.state = {\n      visible: true,\n      enabled: true,\n      supported: true,\n      collapsed: false,\n      active: false,\n      width: 0\n    };\n    this.config = getConfig2(config);\n    if (!config.id) {\n      this.config.id = this.constructor.id;\n    }\n    if (config.icon) {\n      this.__setIcon(config.icon);\n    }\n    this.state.width = this.container.offsetWidth;\n    if (this.config.title) {\n      this.container.title = this.viewer.config.lang[this.config.title] ?? this.config.title;\n    } else if (this.id && this.id in this.viewer.config.lang) {\n      this.container.title = this.viewer.config.lang[this.id];\n    }\n    if (config.tabbable) {\n      this.container.tabIndex = 0;\n    }\n    this.container.addEventListener(\"click\", e => {\n      if (this.state.enabled) {\n        this.onClick();\n      }\n      e.stopPropagation();\n    });\n    this.container.addEventListener(\"keydown\", e => {\n      if (e.key === KEY_CODES.Enter && this.state.enabled) {\n        this.onClick();\n        e.stopPropagation();\n      }\n    });\n  }\n  get id() {\n    return this.config.id;\n  }\n  get title() {\n    return this.container.title;\n  }\n  get content() {\n    return this.container.innerHTML;\n  }\n  get width() {\n    return this.state.width;\n  }\n  get collapsable() {\n    return this.config.collapsable;\n  }\n  show(refresh = true) {\n    if (!this.isVisible()) {\n      this.state.visible = true;\n      if (!this.state.collapsed) {\n        this.container.style.display = \"\";\n      }\n      if (refresh) {\n        this.viewer.navbar.autoSize();\n      }\n    }\n  }\n  hide(refresh = true) {\n    if (this.isVisible()) {\n      this.state.visible = false;\n      this.container.style.display = \"none\";\n      if (refresh) {\n        this.viewer.navbar.autoSize();\n      }\n    }\n  }\n  /**\n   * Hides/shows the button depending of the result of {@link isSupported}\n   * @internal\n   */\n  checkSupported() {\n    resolveBoolean(this.isSupported(), (supported, init) => {\n      if (!this.state) {\n        return;\n      }\n      this.state.supported = supported;\n      if (!init) {\n        this.toggle(supported);\n      } else if (!supported) {\n        this.hide();\n      }\n    });\n  }\n  /**\n   * Perform action when the navbar size/content changes\n   * @internal\n   */\n  autoSize() {}\n  /**\n   * Checks if the button can be displayed\n   */\n  isSupported() {\n    return true;\n  }\n  /**\n   * Changes the active state of the button\n   */\n  toggleActive(active = !this.state.active) {\n    if (active !== this.state.active) {\n      this.state.active = active;\n      toggleClass(this.container, \"psv-button--active\", this.state.active);\n      if (this.config.iconActive) {\n        this.__setIcon(this.state.active ? this.config.iconActive : this.config.icon);\n      }\n    }\n  }\n  /**\n   * Disables the button\n   */\n  disable() {\n    this.container.classList.add(\"psv-button--disabled\");\n    this.state.enabled = false;\n  }\n  /**\n   * Enables the button\n   */\n  enable() {\n    this.container.classList.remove(\"psv-button--disabled\");\n    this.state.enabled = true;\n  }\n  /**\n   * Collapses the button in the navbar menu\n   */\n  collapse() {\n    this.state.collapsed = true;\n    this.container.style.display = \"none\";\n  }\n  /**\n   * Uncollapses the button from the navbar menu\n   */\n  uncollapse() {\n    this.state.collapsed = false;\n    if (this.state.visible) {\n      this.container.style.display = \"\";\n    }\n  }\n  __setIcon(icon) {\n    this.container.innerHTML = icon;\n    addClasses(this.container.querySelector(\"svg\"), \"psv-button-svg\");\n  }\n};\n\n// src/buttons/CustomButton.ts\nvar CustomButton = class extends AbstractButton {\n  constructor(navbar, config) {\n    super(navbar, {\n      id: config.id ?? `psvButton-${Math.random().toString(36).substring(2)}`,\n      className: `psv-custom-button ${config.className || \"\"}`,\n      hoverScale: false,\n      collapsable: config.collapsable !== false,\n      tabbable: config.tabbable !== false,\n      title: config.title\n    });\n    this.customOnClick = config.onClick;\n    if (config.content) {\n      if (typeof config.content === \"string\") {\n        this.container.innerHTML = config.content;\n      } else {\n        this.container.classList.add(\"psv-custom-button--no-padding\");\n        config.content.style.height = \"100%\";\n        config.content.attachViewer?.(this.viewer);\n        this.container.appendChild(config.content);\n      }\n    }\n    this.state.width = this.container.offsetWidth;\n    if (config.disabled) {\n      this.disable();\n    }\n    if (config.visible === false) {\n      this.hide();\n    }\n  }\n  onClick() {\n    this.customOnClick?.(this.viewer);\n  }\n};\n\n// src/buttons/DescriptionButton.ts\nvar DescriptionButton = class extends AbstractButton {\n  constructor(navbar) {\n    super(navbar, {\n      className: \"psv-description-button\",\n      hoverScale: true,\n      collapsable: false,\n      tabbable: true,\n      icon: ICONS.info\n    });\n    this.mode = 0 /* NONE */;\n    this.viewer.addEventListener(HideNotificationEvent.type, this);\n    this.viewer.addEventListener(ShowNotificationEvent.type, this);\n    this.viewer.addEventListener(HidePanelEvent.type, this);\n    this.viewer.addEventListener(ShowPanelEvent.type, this);\n    this.viewer.addEventListener(ConfigChangedEvent.type, this);\n  }\n  destroy() {\n    this.viewer.removeEventListener(HideNotificationEvent.type, this);\n    this.viewer.removeEventListener(ShowNotificationEvent.type, this);\n    this.viewer.removeEventListener(HidePanelEvent.type, this);\n    this.viewer.removeEventListener(ShowPanelEvent.type, this);\n    this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    if (e instanceof ConfigChangedEvent) {\n      e.containsOptions(\"description\") && this.autoSize(true);\n      return;\n    }\n    if (!this.mode) {\n      return;\n    }\n    let closed = false;\n    if (e instanceof HideNotificationEvent) {\n      closed = this.mode === 1 /* NOTIF */;\n    } else if (e instanceof ShowNotificationEvent) {\n      closed = this.mode === 1 /* NOTIF */ && e.notificationId !== IDS.DESCRIPTION;\n    } else if (e instanceof HidePanelEvent) {\n      closed = this.mode === 2 /* PANEL */;\n    } else if (e instanceof ShowPanelEvent) {\n      closed = this.mode === 2 /* PANEL */ && e.panelId !== IDS.DESCRIPTION;\n    }\n    if (closed) {\n      this.toggleActive(false);\n      this.mode = 0 /* NONE */;\n    }\n  }\n  onClick() {\n    if (this.mode) {\n      this.__close();\n    } else {\n      this.__open();\n    }\n  }\n  hide(refresh) {\n    super.hide(refresh);\n    if (this.mode) {\n      this.__close();\n    }\n  }\n  /**\n   * This button can only be refreshed from NavbarCaption\n   * @internal\n   */\n  autoSize(refresh = false) {\n    if (refresh) {\n      const caption = this.viewer.navbar.getButton(\"caption\", false);\n      const captionHidden = caption && !caption.isVisible();\n      const hasDescription = !!this.viewer.config.description;\n      if (captionHidden || hasDescription) {\n        this.show(false);\n      } else {\n        this.hide(false);\n      }\n    }\n  }\n  __close() {\n    switch (this.mode) {\n      case 1 /* NOTIF */:\n        this.viewer.notification.hide(IDS.DESCRIPTION);\n        break;\n      case 2 /* PANEL */:\n        this.viewer.panel.hide(IDS.DESCRIPTION);\n        break;\n      default:\n    }\n  }\n  __open() {\n    this.toggleActive(true);\n    if (this.viewer.config.description) {\n      this.mode = 2 /* PANEL */;\n      this.viewer.panel.show({\n        id: IDS.DESCRIPTION,\n        content: `${this.viewer.config.caption ? `<p>${this.viewer.config.caption}</p>` : \"\"}${this.viewer.config.description}`\n      });\n    } else {\n      this.mode = 1 /* NOTIF */;\n      this.viewer.notification.show({\n        id: IDS.DESCRIPTION,\n        content: this.viewer.config.caption\n      });\n    }\n  }\n};\nDescriptionButton.id = \"description\";\n\n// src/buttons/DownloadButton.ts\nvar DownloadButton = class extends AbstractButton {\n  constructor(navbar) {\n    super(navbar, {\n      tagName: \"a\",\n      className: \"psv-download-button\",\n      hoverScale: true,\n      collapsable: true,\n      tabbable: true,\n      icon: ICONS.download\n    });\n    this.viewer.addEventListener(ConfigChangedEvent.type, this);\n    this.viewer.addEventListener(PanoramaLoadedEvent.type, this);\n  }\n  destroy() {\n    this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n    this.viewer.removeEventListener(PanoramaLoadedEvent.type, this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    if (e instanceof ConfigChangedEvent) {\n      e.containsOptions(\"downloadUrl\") && this.checkSupported();\n      e.containsOptions(\"downloadUrl\", \"downloadName\") && this.__update();\n    } else if (e instanceof PanoramaLoadedEvent) {\n      this.__update();\n    }\n  }\n  onClick() {}\n  checkSupported() {\n    const adapter = this.viewer.adapter.constructor;\n    const supported = adapter.supportsDownload || this.viewer.config.downloadUrl;\n    if (supported) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  __update() {\n    const link = this.container;\n    link.href = this.viewer.config.downloadUrl || this.viewer.config.panorama;\n    link.target = \"_blank\";\n    if (link.href.startsWith(\"data:\") && !this.viewer.config.downloadName) {\n      link.download = \"panorama.\" + link.href.substring(0, link.href.indexOf(\";\")).split(\"/\").pop();\n    } else {\n      link.download = this.viewer.config.downloadName || link.href.split(\"/\").pop();\n    }\n  }\n};\nDownloadButton.id = \"download\";\n\n// src/buttons/FullscreenButton.ts\nvar FullscreenButton = class extends AbstractButton {\n  constructor(navbar) {\n    super(navbar, {\n      className: \"psv-fullscreen-button\",\n      hoverScale: true,\n      collapsable: false,\n      tabbable: true,\n      icon: ICONS.fullscreenIn,\n      iconActive: ICONS.fullscreenOut\n    });\n    this.viewer.addEventListener(FullscreenEvent.type, this);\n  }\n  destroy() {\n    this.viewer.removeEventListener(FullscreenEvent.type, this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    if (e instanceof FullscreenEvent) {\n      this.toggleActive(e.fullscreenEnabled);\n    }\n  }\n  onClick() {\n    this.viewer.toggleFullscreen();\n  }\n};\nFullscreenButton.id = \"fullscreen\";\n\n// src/buttons/MenuButton.ts\nvar BUTTON_DATA = \"psvButton\";\nvar MENU_TEMPLATE = (buttons, title) => `\n<div class=\"psv-panel-menu psv-panel-menu--stripped\">\n  <h1 class=\"psv-panel-menu-title\">${ICONS.menu} ${title}</h1>\n  <ul class=\"psv-panel-menu-list\">\n    ${buttons.map(button => `\n    <li data-psv-button=\"${button.id}\" class=\"psv-panel-menu-item\" tabindex=\"0\">\n      <span class=\"psv-panel-menu-item-icon\">${button.content}</span>\n      <span class=\"psv-panel-menu-item-label\">${button.title}</span>\n    </li>\n    `).join(\"\")}\n  </ul>\n</div>\n`;\nvar MenuButton = class extends AbstractButton {\n  constructor(navbar) {\n    super(navbar, {\n      className: \"psv-menu-button\",\n      hoverScale: true,\n      collapsable: false,\n      tabbable: true,\n      icon: ICONS.menu\n    });\n    this.viewer.addEventListener(ShowPanelEvent.type, this);\n    this.viewer.addEventListener(HidePanelEvent.type, this);\n    super.hide();\n  }\n  destroy() {\n    this.viewer.removeEventListener(ShowPanelEvent.type, this);\n    this.viewer.removeEventListener(HidePanelEvent.type, this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    if (e instanceof ShowPanelEvent) {\n      this.toggleActive(e.panelId === IDS.MENU);\n    } else if (e instanceof HidePanelEvent) {\n      this.toggleActive(false);\n    }\n  }\n  onClick() {\n    if (this.state.active) {\n      this.__hideMenu();\n    } else {\n      this.__showMenu();\n    }\n  }\n  hide(refresh) {\n    super.hide(refresh);\n    this.__hideMenu();\n  }\n  show(refresh) {\n    super.show(refresh);\n    if (this.state.active) {\n      this.__showMenu();\n    }\n  }\n  __showMenu() {\n    this.viewer.panel.show({\n      id: IDS.MENU,\n      content: MENU_TEMPLATE(this.viewer.navbar.collapsed, this.viewer.config.lang.menu),\n      noMargin: true,\n      clickHandler: target => {\n        const li = target ? getClosest(target, \".psv-panel-menu-item\") : void 0;\n        const buttonId = li ? li.dataset[BUTTON_DATA] : void 0;\n        if (buttonId) {\n          this.viewer.navbar.getButton(buttonId).onClick();\n          this.__hideMenu();\n        }\n      }\n    });\n  }\n  __hideMenu() {\n    this.viewer.panel.hide(IDS.MENU);\n  }\n};\nMenuButton.id = \"menu\";\n\n// src/buttons/AbstractMoveButton.ts\nfunction getIcon(value) {\n  let angle2 = 0;\n  switch (value) {\n    case 0 /* UP */:\n      angle2 = 90;\n      break;\n    case 1 /* DOWN */:\n      angle2 = -90;\n      break;\n    case 3 /* RIGHT */:\n      angle2 = 180;\n      break;\n    default:\n      angle2 = 0;\n      break;\n  }\n  return ICONS.arrow.replace(\"rotate(0\", `rotate(${angle2}`);\n}\nvar AbstractMoveButton = class extends AbstractButton {\n  constructor(navbar, direction) {\n    super(navbar, {\n      className: \"psv-move-button\",\n      hoverScale: true,\n      collapsable: false,\n      tabbable: true,\n      icon: getIcon(direction)\n    });\n    this.direction = direction;\n    this.handler = new PressHandler();\n    this.container.addEventListener(\"mousedown\", this);\n    this.container.addEventListener(\"keydown\", this);\n    this.container.addEventListener(\"keyup\", this);\n    this.viewer.container.addEventListener(\"mouseup\", this);\n    this.viewer.container.addEventListener(\"touchend\", this);\n  }\n  destroy() {\n    this.__onMouseUp();\n    this.viewer.container.removeEventListener(\"mouseup\", this);\n    this.viewer.container.removeEventListener(\"touchend\", this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    switch (e.type) {\n      case \"mousedown\":\n        this.__onMouseDown();\n        break;\n      case \"mouseup\":\n        this.__onMouseUp();\n        break;\n      case \"touchend\":\n        this.__onMouseUp();\n        break;\n      case \"keydown\":\n        e.key === KEY_CODES.Enter && this.__onMouseDown();\n        break;\n      case \"keyup\":\n        e.key === KEY_CODES.Enter && this.__onMouseUp();\n        break;\n    }\n  }\n  onClick() {}\n  isSupported() {\n    return invertResolvableBoolean(SYSTEM.isTouchEnabled);\n  }\n  __onMouseDown() {\n    if (!this.state.enabled) {\n      return;\n    }\n    const dynamicRoll = {};\n    switch (this.direction) {\n      case 0 /* UP */:\n        dynamicRoll.pitch = false;\n        break;\n      case 1 /* DOWN */:\n        dynamicRoll.pitch = true;\n        break;\n      case 3 /* RIGHT */:\n        dynamicRoll.yaw = false;\n        break;\n      default:\n        dynamicRoll.yaw = true;\n        break;\n    }\n    this.viewer.stopAll();\n    this.viewer.dynamics.position.roll(dynamicRoll);\n    this.handler.down();\n  }\n  __onMouseUp() {\n    if (!this.state.enabled) {\n      return;\n    }\n    this.handler.up(() => {\n      this.viewer.dynamics.position.stop();\n      this.viewer.resetIdleTimer();\n    });\n  }\n};\nAbstractMoveButton.groupId = \"move\";\n\n// src/buttons/MoveDownButton.ts\nvar MoveDownButton = class extends AbstractMoveButton {\n  constructor(navbar) {\n    super(navbar, 1 /* DOWN */);\n  }\n};\nMoveDownButton.id = \"moveDown\";\n\n// src/buttons/MoveLeftButton.ts\nvar MoveLeftButton = class extends AbstractMoveButton {\n  constructor(navbar) {\n    super(navbar, 2 /* LEFT */);\n  }\n};\nMoveLeftButton.id = \"moveLeft\";\n\n// src/buttons/MoveRightButton.ts\nvar MoveRightButton = class extends AbstractMoveButton {\n  constructor(navbar) {\n    super(navbar, 3 /* RIGHT */);\n  }\n};\nMoveRightButton.id = \"moveRight\";\n\n// src/buttons/MoveUpButton.ts\nvar MoveUpButton = class extends AbstractMoveButton {\n  constructor(navbar) {\n    super(navbar, 0 /* UP */);\n  }\n};\nMoveUpButton.id = \"moveUp\";\n\n// src/buttons/AbstractZoomButton.ts\nvar AbstractZoomButton = class extends AbstractButton {\n  constructor(navbar, icon, direction) {\n    super(navbar, {\n      className: \"psv-zoom-button\",\n      hoverScale: true,\n      collapsable: false,\n      tabbable: true,\n      icon\n    });\n    this.direction = direction;\n    this.handler = new PressHandler();\n    this.container.addEventListener(\"mousedown\", this);\n    this.container.addEventListener(\"keydown\", this);\n    this.container.addEventListener(\"keyup\", this);\n    this.viewer.container.addEventListener(\"mouseup\", this);\n    this.viewer.container.addEventListener(\"touchend\", this);\n  }\n  destroy() {\n    this.__onMouseUp();\n    this.viewer.container.removeEventListener(\"mouseup\", this);\n    this.viewer.container.removeEventListener(\"touchend\", this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    switch (e.type) {\n      case \"mousedown\":\n        this.__onMouseDown();\n        break;\n      case \"mouseup\":\n        this.__onMouseUp();\n        break;\n      case \"touchend\":\n        this.__onMouseUp();\n        break;\n      case \"keydown\":\n        e.key === KEY_CODES.Enter && this.__onMouseDown();\n        break;\n      case \"keyup\":\n        e.key === KEY_CODES.Enter && this.__onMouseUp();\n        break;\n    }\n  }\n  onClick() {}\n  isSupported() {\n    return invertResolvableBoolean(SYSTEM.isTouchEnabled);\n  }\n  __onMouseDown() {\n    if (!this.state.enabled) {\n      return;\n    }\n    this.viewer.dynamics.zoom.roll(this.direction === 1 /* OUT */);\n    this.handler.down();\n  }\n  __onMouseUp() {\n    if (!this.state.enabled) {\n      return;\n    }\n    this.handler.up(() => this.viewer.dynamics.zoom.stop());\n  }\n};\nAbstractZoomButton.groupId = \"zoom\";\n\n// src/buttons/ZoomInButton.ts\nvar ZoomInButton = class extends AbstractZoomButton {\n  constructor(navbar) {\n    super(navbar, ICONS.zoomIn, 0 /* IN */);\n  }\n};\nZoomInButton.id = \"zoomIn\";\n\n// src/buttons/ZoomOutButton.ts\nvar ZoomOutButton = class extends AbstractZoomButton {\n  constructor(navbar) {\n    super(navbar, ICONS.zoomOut, 1 /* OUT */);\n  }\n};\nZoomOutButton.id = \"zoomOut\";\n\n// src/buttons/ZoomRangeButton.ts\nvar ZoomRangeButton = class extends AbstractButton {\n  constructor(navbar) {\n    super(navbar, {\n      className: \"psv-zoom-range\",\n      hoverScale: false,\n      collapsable: false,\n      tabbable: false\n    });\n    this.zoomRange = document.createElement(\"div\");\n    this.zoomRange.className = \"psv-zoom-range-line\";\n    this.container.appendChild(this.zoomRange);\n    this.zoomValue = document.createElement(\"div\");\n    this.zoomValue.className = \"psv-zoom-range-handle\";\n    this.zoomRange.appendChild(this.zoomValue);\n    this.slider = new Slider(this.container, \"HORIZONTAL\" /* HORIZONTAL */, data => this.__onSliderUpdate(data));\n    this.mediaMinWidth = parseInt(getStyleProperty(this.container, \"max-width\"), 10);\n    this.viewer.addEventListener(ZoomUpdatedEvent.type, this);\n    if (this.viewer.state.ready) {\n      this.__moveZoomValue(this.viewer.getZoomLevel());\n    } else {\n      this.viewer.addEventListener(ReadyEvent.type, this);\n    }\n  }\n  destroy() {\n    this.slider.destroy();\n    this.viewer.removeEventListener(ZoomUpdatedEvent.type, this);\n    this.viewer.removeEventListener(ReadyEvent.type, this);\n    super.destroy();\n  }\n  handleEvent(e) {\n    if (e instanceof ZoomUpdatedEvent) {\n      this.__moveZoomValue(e.zoomLevel);\n    } else if (e instanceof ReadyEvent) {\n      this.__moveZoomValue(this.viewer.getZoomLevel());\n    }\n  }\n  onClick() {}\n  isSupported() {\n    return invertResolvableBoolean(SYSTEM.isTouchEnabled);\n  }\n  autoSize() {\n    if (this.state.supported) {\n      if (this.viewer.state.size.width <= this.mediaMinWidth && this.state.visible) {\n        this.hide(false);\n      } else if (this.viewer.state.size.width > this.mediaMinWidth && !this.state.visible) {\n        this.show(false);\n      }\n    }\n  }\n  __moveZoomValue(level) {\n    this.zoomValue.style.left = level / 100 * this.zoomRange.offsetWidth - this.zoomValue.offsetWidth / 2 + \"px\";\n  }\n  __onSliderUpdate(data) {\n    if (data.mousedown) {\n      this.viewer.zoom(data.value * 100);\n    }\n  }\n};\nZoomRangeButton.id = \"zoomRange\";\nZoomRangeButton.groupId = \"zoom\";\n\n// src/data/config.ts\nimport { MathUtils as MathUtils5 } from \"three\";\n\n// src/plugins/AbstractPlugin.ts\nvar AbstractPlugin = class extends TypedEventTarget {\n  constructor(viewer) {\n    super();\n    this.viewer = viewer;\n  }\n  /**\n   * Initializes the plugin\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  /**\n   * Destroys the plugin\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  destroy() {}\n};\nvar AbstractConfigurablePlugin = class extends AbstractPlugin {\n  constructor(viewer, config) {\n    super(viewer);\n    this.config = this.constructor.configParser(config);\n  }\n  /**\n   * Update options\n   */\n  setOption(option, value) {\n    this.setOptions({\n      [option]: value\n    });\n  }\n  /**\n   * Update options\n   */\n  setOptions(options) {\n    const rawConfig = {\n      ...this.config,\n      ...options\n    };\n    const ctor = this.constructor;\n    const parser = ctor.configParser;\n    const readonly = ctor.readonlyOptions;\n    const id = ctor.id;\n    for (let [key, value] of Object.entries(options)) {\n      if (!(key in parser.defaults)) {\n        logWarn(`${id}: Unknown option \"${key}\"`);\n        continue;\n      }\n      if (readonly.includes(key)) {\n        logWarn(`${id}: Option \"${key}\" cannot be updated`);\n        continue;\n      }\n      if (key in parser.parsers) {\n        value = parser.parsers[key](value, {\n          rawConfig,\n          defValue: parser.defaults[key]\n        });\n      }\n      this.config[key] = value;\n    }\n  }\n};\nAbstractConfigurablePlugin.readonlyOptions = [];\nfunction pluginInterop(plugin) {\n  if (plugin) {\n    for (const [, p] of [[\"_\", plugin], ...Object.entries(plugin)]) {\n      if (p.prototype instanceof AbstractPlugin) {\n        checkVersion(p.id, p.VERSION, \"5.13.2\");\n        return p;\n      }\n    }\n  }\n  return null;\n}\n\n// src/data/config.ts\nvar DEFAULTS = {\n  panorama: null,\n  container: null,\n  adapter: [EquirectangularAdapter, null],\n  plugins: [],\n  caption: null,\n  description: null,\n  downloadUrl: null,\n  downloadName: null,\n  loadingImg: null,\n  loadingTxt: \"\",\n  // empty string => `lang.loading`\n  size: null,\n  fisheye: 0,\n  minFov: 30,\n  maxFov: 90,\n  defaultZoomLvl: 50,\n  defaultYaw: 0,\n  defaultPitch: 0,\n  sphereCorrection: null,\n  moveSpeed: 1,\n  zoomSpeed: 1,\n  moveInertia: 0.8,\n  mousewheel: true,\n  mousemove: true,\n  mousewheelCtrlKey: false,\n  touchmoveTwoFingers: false,\n  panoData: null,\n  requestHeaders: null,\n  canvasBackground: \"#000\",\n  defaultTransition: {\n    speed: 1500,\n    rotation: true,\n    effect: \"fade\"\n  },\n  rendererParameters: {\n    alpha: true,\n    antialias: true\n  },\n  withCredentials: false,\n  navbar: [\"zoom\", \"move\", \"download\", \"description\", \"caption\", \"fullscreen\"],\n  lang: {\n    zoom: \"Zoom\",\n    zoomOut: \"Zoom out\",\n    zoomIn: \"Zoom in\",\n    moveUp: \"Move up\",\n    moveDown: \"Move down\",\n    moveLeft: \"Move left\",\n    moveRight: \"Move right\",\n    description: \"Description\",\n    download: \"Download\",\n    fullscreen: \"Fullscreen\",\n    loading: \"Loading...\",\n    menu: \"Menu\",\n    close: \"Close\",\n    twoFingers: \"Use two fingers to navigate\",\n    ctrlZoom: \"Use ctrl + scroll to zoom the image\",\n    loadError: \"The panorama cannot be loaded\",\n    webglError: \"Your browser does not seem to support WebGL\"\n  },\n  keyboard: \"fullscreen\",\n  keyboardActions: {\n    [KEY_CODES.ArrowUp]: \"ROTATE_UP\" /* ROTATE_UP */,\n    [KEY_CODES.ArrowDown]: \"ROTATE_DOWN\" /* ROTATE_DOWN */,\n    [KEY_CODES.ArrowRight]: \"ROTATE_RIGHT\" /* ROTATE_RIGHT */,\n    [KEY_CODES.ArrowLeft]: \"ROTATE_LEFT\" /* ROTATE_LEFT */,\n    [KEY_CODES.PageUp]: \"ZOOM_IN\" /* ZOOM_IN */,\n    [KEY_CODES.PageDown]: \"ZOOM_OUT\" /* ZOOM_OUT */,\n    [KEY_CODES.Plus]: \"ZOOM_IN\" /* ZOOM_IN */,\n    [KEY_CODES.Minus]: \"ZOOM_OUT\" /* ZOOM_OUT */\n  }\n};\nvar READONLY_OPTIONS = {\n  panorama: \"Use setPanorama method to change the panorama\",\n  panoData: \"Use setPanorama method to change the panorama\",\n  container: \"Cannot change viewer container\",\n  adapter: \"Cannot change adapter\",\n  plugins: \"Cannot change plugins\"\n};\nvar CONFIG_PARSERS = {\n  container: container => {\n    if (!container) {\n      throw new PSVError(\"No value given for container.\");\n    }\n    return container;\n  },\n  adapter: (adapter, {\n    defValue\n  }) => {\n    if (!adapter) {\n      adapter = defValue;\n    } else if (Array.isArray(adapter)) {\n      adapter = [adapterInterop(adapter[0]), adapter[1]];\n    } else {\n      adapter = [adapterInterop(adapter), null];\n    }\n    if (!adapter[0]) {\n      throw new PSVError(\"An undefined value was given for adapter.\");\n    }\n    if (!adapter[0].id) {\n      throw new PSVError(`Adapter has no id.`);\n    }\n    return adapter;\n  },\n  defaultYaw: defaultYaw => {\n    return parseAngle(defaultYaw);\n  },\n  defaultPitch: defaultPitch => {\n    return parseAngle(defaultPitch, true);\n  },\n  defaultZoomLvl: defaultZoomLvl => {\n    return MathUtils5.clamp(defaultZoomLvl, 0, 100);\n  },\n  minFov: (minFov, {\n    rawConfig\n  }) => {\n    if (rawConfig.maxFov < minFov) {\n      logWarn(\"maxFov cannot be lower than minFov\");\n      minFov = rawConfig.maxFov;\n    }\n    return MathUtils5.clamp(minFov, 1, 179);\n  },\n  maxFov: (maxFov, {\n    rawConfig\n  }) => {\n    if (maxFov < rawConfig.minFov) {\n      maxFov = rawConfig.minFov;\n    }\n    return MathUtils5.clamp(maxFov, 1, 179);\n  },\n  moveInertia: (moveInertia, {\n    defValue\n  }) => {\n    if (moveInertia === true) {\n      return defValue;\n    }\n    if (moveInertia === false) {\n      return 0;\n    }\n    return moveInertia;\n  },\n  lang: lang => {\n    return {\n      ...DEFAULTS.lang,\n      ...lang\n    };\n  },\n  keyboardActions: (keyboardActions, {\n    rawConfig\n  }) => {\n    if (rawConfig.keyboard && typeof rawConfig.keyboard === \"object\") {\n      return rawConfig.keyboard;\n    }\n    return keyboardActions;\n  },\n  fisheye: fisheye => {\n    if (fisheye === true) {\n      return 1;\n    } else if (fisheye === false) {\n      return 0;\n    }\n    return fisheye;\n  },\n  requestHeaders: requestHeaders => {\n    if (requestHeaders && typeof requestHeaders === \"object\") {\n      return () => requestHeaders;\n    }\n    if (typeof requestHeaders === \"function\") {\n      return requestHeaders;\n    }\n    return null;\n  },\n  defaultTransition: (defaultTransition, {\n    defValue\n  }) => {\n    if (defaultTransition === null || defaultTransition.speed === 0) {\n      return null;\n    } else {\n      return {\n        ...defValue,\n        ...defaultTransition\n      };\n    }\n  },\n  rendererParameters: (rendererParameters, {\n    defValue\n  }) => ({\n    ...rendererParameters,\n    ...defValue\n  }),\n  plugins: plugins => {\n    return plugins.map((plugin, i) => {\n      if (Array.isArray(plugin)) {\n        plugin = [pluginInterop(plugin[0]), plugin[1]];\n      } else {\n        plugin = [pluginInterop(plugin), null];\n      }\n      if (!plugin[0]) {\n        throw new PSVError(`An undefined value was given for plugin ${i}.`);\n      }\n      if (!plugin[0].id) {\n        throw new PSVError(`Plugin ${i} has no id.`);\n      }\n      return plugin;\n    });\n  },\n  navbar: navbar => {\n    if (navbar === false) {\n      return null;\n    }\n    if (navbar === true) {\n      return clone(DEFAULTS.navbar);\n    }\n    if (typeof navbar === \"string\") {\n      return navbar.split(/[ ,]/);\n    }\n    return navbar;\n  }\n};\nvar getViewerConfig = getConfigParser(DEFAULTS, CONFIG_PARSERS);\n\n// src/components/NavbarCaption.ts\nvar NavbarCaption = class extends AbstractButton {\n  constructor(navbar) {\n    super(navbar, {\n      className: \"psv-caption\",\n      hoverScale: false,\n      collapsable: false,\n      tabbable: true\n    });\n    this.contentWidth = 0;\n    this.state.width = 0;\n    this.contentElt = document.createElement(\"div\");\n    this.contentElt.className = \"psv-caption-content\";\n    this.container.appendChild(this.contentElt);\n    this.setCaption(this.viewer.config.caption);\n  }\n  hide() {\n    this.contentElt.style.display = \"none\";\n    this.state.visible = false;\n  }\n  show() {\n    this.contentElt.style.display = \"\";\n    this.state.visible = true;\n  }\n  onClick() {}\n  /**\n   * Changes the caption\n   */\n  setCaption(html) {\n    this.show();\n    this.contentElt.innerHTML = html ?? \"\";\n    if (this.contentElt.innerHTML) {\n      this.contentWidth = this.contentElt.offsetWidth;\n    } else {\n      this.contentWidth = 0;\n    }\n    this.autoSize();\n  }\n  /**\n   * Toggles content and icon depending on available space\n   */\n  autoSize() {\n    this.toggle(this.container.offsetWidth >= this.contentWidth);\n    this.__refreshButton();\n  }\n  __refreshButton() {\n    this.viewer.navbar.getButton(DescriptionButton.id, false)?.autoSize(true);\n  }\n};\nNavbarCaption.id = \"caption\";\n\n// src/components/Navbar.ts\nvar AVAILABLE_BUTTONS = {};\nvar AVAILABLE_GROUPS = {};\nfunction registerButton(button, defaultPosition) {\n  if (!button.id) {\n    throw new PSVError(\"Button id is required\");\n  }\n  AVAILABLE_BUTTONS[button.id] = button;\n  if (button.groupId) {\n    (AVAILABLE_GROUPS[button.groupId] = AVAILABLE_GROUPS[button.groupId] || []).push(button);\n  }\n  if (defaultPosition) {\n    const navbar = DEFAULTS.navbar;\n    switch (defaultPosition) {\n      case \"start\":\n        navbar.unshift(button.id);\n        break;\n      case \"end\":\n        navbar.push(button.id);\n        break;\n      default:\n        {\n          const [id, pos] = defaultPosition.split(\":\");\n          const idx = navbar.indexOf(id);\n          if (!id || !pos || idx === -1) {\n            throw new PSVError(`Invalid defaultPosition ${defaultPosition}`);\n          }\n          navbar.splice(idx + (pos === \"right\" ? 1 : 0), 0, button.id);\n        }\n    }\n  }\n}\n[ZoomOutButton, ZoomRangeButton, ZoomInButton, DescriptionButton, NavbarCaption, DownloadButton, FullscreenButton, MoveLeftButton, MoveRightButton, MoveUpButton, MoveDownButton].forEach(btn => registerButton(btn));\nvar Navbar = class extends AbstractComponent {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer, {\n      className: `psv-navbar ${CAPTURE_EVENTS_CLASS}`\n    });\n    /**\n     * @internal\n     */\n    this.collapsed = [];\n    this.state.visible = false;\n  }\n  /**\n   * Shows the navbar\n   */\n  show() {\n    this.viewer.container.classList.add(\"psv--has-navbar\");\n    this.container.classList.add(\"psv-navbar--open\");\n    this.state.visible = true;\n  }\n  /**\n   * Hides the navbar\n   */\n  hide() {\n    this.viewer.container.classList.remove(\"psv--has-navbar\");\n    this.container.classList.remove(\"psv-navbar--open\");\n    this.state.visible = false;\n  }\n  /**\n   * Change the buttons visible on the navbar\n   */\n  setButtons(buttons) {\n    this.children.slice().forEach(item => item.destroy());\n    this.children.length = 0;\n    if (buttons.indexOf(NavbarCaption.id) !== -1 && buttons.indexOf(DescriptionButton.id) === -1) {\n      buttons.splice(buttons.indexOf(NavbarCaption.id), 0, DescriptionButton.id);\n    }\n    buttons.forEach(button => {\n      if (typeof button === \"object\") {\n        new CustomButton(this, button);\n      } else if (AVAILABLE_BUTTONS[button]) {\n        new AVAILABLE_BUTTONS[button](this);\n      } else if (AVAILABLE_GROUPS[button]) {\n        AVAILABLE_GROUPS[button].forEach(buttonCtor => {\n          new buttonCtor(this);\n        });\n      } else {\n        logWarn(`Unknown button ${button}`);\n      }\n    });\n    new MenuButton(this);\n    this.children.forEach(item => {\n      if (item instanceof AbstractButton) {\n        item.checkSupported();\n      }\n    });\n    this.autoSize();\n  }\n  /**\n   * Changes the navbar caption\n   */\n  setCaption(html) {\n    this.children.some(item => {\n      if (item instanceof NavbarCaption) {\n        item.setCaption(html);\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n  /**\n   * Returns a button by its identifier\n   */\n  getButton(id, warnNotFound = true) {\n    const button = this.children.find(item => {\n      return item instanceof AbstractButton && item.id === id;\n    });\n    if (!button && warnNotFound) {\n      logWarn(`button \"${id}\" not found in the navbar`);\n    }\n    return button;\n  }\n  /**\n   * Try to focus a button, will focus the first button if the requested button does not exist.\n   */\n  focusButton(id) {\n    if (this.isVisible()) {\n      (this.getButton(id, false)?.container || this.container.firstElementChild)?.focus();\n    }\n  }\n  /**\n   * Automatically collapses buttons\n   * @internal\n   */\n  autoSize() {\n    this.children.forEach(child => {\n      if (child instanceof AbstractButton) {\n        child.autoSize();\n      }\n    });\n    const availableWidth = this.container.offsetWidth;\n    let totalWidth = 0;\n    const collapsableButtons = [];\n    this.children.forEach(item => {\n      if (item.isVisible() && item instanceof AbstractButton) {\n        totalWidth += item.width;\n        if (item.collapsable) {\n          collapsableButtons.push(item);\n        }\n      }\n    });\n    if (totalWidth === 0) {\n      return;\n    }\n    if (availableWidth < totalWidth && collapsableButtons.length > 0) {\n      collapsableButtons.forEach(item => item.collapse());\n      this.collapsed = collapsableButtons;\n      this.getButton(MenuButton.id).show(false);\n    } else if (availableWidth >= totalWidth && this.collapsed.length > 0) {\n      this.collapsed.forEach(item => item.uncollapse());\n      this.collapsed = [];\n      this.getButton(MenuButton.id).hide(false);\n    }\n    this.getButton(NavbarCaption.id, false)?.autoSize();\n  }\n};\n\n// src/data/cache.ts\nimport { Cache as ThreeCache } from \"three\";\nThreeCache.enabled = false;\nvar Cache = {\n  enabled: true,\n  maxItems: 10,\n  ttl: 10 * 60,\n  items: {},\n  purgeInterval: null,\n  init() {\n    if (ThreeCache.enabled) {\n      logWarn(\"ThreeJS cache should be disabled\");\n      ThreeCache.enabled = false;\n    }\n    if (!this.purgeInterval && this.enabled) {\n      this.purgeInterval = setInterval(() => this.purge(), 60 * 1e3);\n    }\n  },\n  add(url, key, data) {\n    if (this.enabled && key) {\n      this.items[key] = this.items[key] ?? {\n        files: {},\n        lastAccess: null\n      };\n      this.items[key].files[url] = data;\n      this.items[key].lastAccess = Date.now();\n    }\n  },\n  get(url, key) {\n    if (this.enabled && key && this.items[key]) {\n      this.items[key].lastAccess = Date.now();\n      return this.items[key].files[url];\n    }\n  },\n  remove(url, key) {\n    if (this.enabled && key && this.items[key]) {\n      delete this.items[key].files[url];\n      if (Object.keys(this.items[key].files).length === 0) {\n        delete this.items[key];\n      }\n    }\n  },\n  purge() {\n    Object.entries(this.items).sort(([, a], [, b]) => {\n      return b.lastAccess - a.lastAccess;\n    }).forEach(([key, {\n      lastAccess\n    }], index) => {\n      if (index > 0 && (Date.now() - lastAccess >= this.ttl * 1e3 || index >= this.maxItems)) {\n        delete this.items[key];\n      }\n    });\n  }\n};\n\n// src/components/Loader.ts\nimport { MathUtils as MathUtils6 } from \"three\";\nvar Loader = class extends AbstractComponent {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer, {\n      className: \"psv-loader-container\"\n    });\n    this.loader = document.createElement(\"div\");\n    this.loader.className = \"psv-loader\";\n    this.container.appendChild(this.loader);\n    this.size = this.loader.offsetWidth;\n    this.canvas = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    this.canvas.setAttribute(\"class\", \"psv-loader-canvas\");\n    this.canvas.setAttribute(\"viewBox\", `0 0 ${this.size} ${this.size}`);\n    this.loader.appendChild(this.canvas);\n    this.textColor = getStyleProperty(this.loader, \"color\");\n    this.color = getStyleProperty(this.canvas, \"color\");\n    this.border = parseInt(getStyleProperty(this.loader, \"--psv-loader-border\"), 10);\n    this.thickness = parseInt(getStyleProperty(this.loader, \"--psv-loader-tickness\"), 10);\n    const halfSize = this.size / 2;\n    this.canvas.innerHTML = `\n            <circle cx=\"${halfSize}\" cy=\"${halfSize}\" r=\"${halfSize}\" fill=\"${this.color}\"/>\n            <path d=\"\" fill=\"none\" stroke=\"${this.textColor}\" stroke-width=\"${this.thickness}\" stroke-linecap=\"round\"/>\n        `;\n    this.viewer.addEventListener(ConfigChangedEvent.type, this);\n    this.__updateContent();\n    this.hide();\n  }\n  /**\n   * @internal\n   */\n  destroy() {\n    this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n    super.destroy();\n  }\n  /**\n   * @internal\n   */\n  handleEvent(e) {\n    if (e instanceof ConfigChangedEvent) {\n      e.containsOptions(\"loadingImg\", \"loadingTxt\", \"lang\") && this.__updateContent();\n    }\n  }\n  /**\n   * Sets the loader progression\n   */\n  setProgress(value) {\n    this.container.classList.remove(\"psv-loader--undefined\");\n    const angle2 = MathUtils6.clamp(value, 0, 99.999) / 100 * Math.PI * 2;\n    const halfSize = this.size / 2;\n    const startX = halfSize;\n    const startY = this.thickness / 2 + this.border;\n    const radius = (this.size - this.thickness) / 2 - this.border;\n    const endX = Math.sin(angle2) * radius + halfSize;\n    const endY = -Math.cos(angle2) * radius + halfSize;\n    const largeArc = value > 50 ? \"1\" : \"0\";\n    this.canvas.querySelector(\"path\").setAttributeNS(null, \"d\", `M ${startX} ${startY} A ${radius} ${radius} 0 ${largeArc} 1 ${endX} ${endY}`);\n  }\n  /**\n   * Animates the loader with an unknown state\n   */\n  showUndefined() {\n    this.show();\n    this.setProgress(25);\n    this.container.classList.add(\"psv-loader--undefined\");\n  }\n  __updateContent() {\n    const current = this.loader.querySelector(\".psv-loader-image, .psv-loader-text\");\n    if (current) {\n      this.loader.removeChild(current);\n    }\n    let inner;\n    if (this.viewer.config.loadingImg) {\n      inner = document.createElement(\"img\");\n      inner.className = \"psv-loader-image\";\n      inner.src = this.viewer.config.loadingImg;\n    } else if (this.viewer.config.loadingTxt !== null) {\n      inner = document.createElement(\"div\");\n      inner.className = \"psv-loader-text\";\n      inner.innerHTML = this.viewer.config.loadingTxt || this.viewer.config.lang.loading;\n    }\n    if (inner) {\n      const size = Math.round(Math.sqrt(2 * Math.pow(this.size / 2 - this.thickness / 2 - this.border, 2)));\n      inner.style.maxWidth = size + \"px\";\n      inner.style.maxHeight = size + \"px\";\n      this.loader.appendChild(inner);\n    }\n  }\n};\n\n// src/components/Notification.ts\nvar Notification = class extends AbstractComponent {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer, {\n      className: \"psv-notification\"\n    });\n    /**\n     * @internal\n     */\n    this.state = {\n      visible: false,\n      contentId: null,\n      timeout: null\n    };\n    this.content = document.createElement(\"div\");\n    this.content.className = \"psv-notification-content\";\n    this.container.appendChild(this.content);\n    this.content.addEventListener(\"click\", () => this.hide());\n  }\n  /**\n   * Checks if the notification is visible\n   */\n  isVisible(id) {\n    return this.state.visible && (!id || !this.state.contentId || this.state.contentId === id);\n  }\n  /**\n   * @throws {@link PSVError} always\n   * @internal\n   */\n  toggle() {\n    throw new PSVError(\"Notification cannot be toggled\");\n  }\n  /**\n   * Displays a notification on the viewer\n   *\n   * @example\n   * viewer.showNotification({ content: 'Hello world', timeout: 5000 })\n   * @example\n   * viewer.showNotification('Hello world')\n   */\n  show(config) {\n    if (this.state.timeout) {\n      clearTimeout(this.state.timeout);\n      this.state.timeout = null;\n    }\n    if (typeof config === \"string\") {\n      config = {\n        content: config\n      };\n    }\n    this.state.contentId = config.id || null;\n    this.content.innerHTML = config.content;\n    this.container.classList.add(\"psv-notification--visible\");\n    this.state.visible = true;\n    this.viewer.dispatchEvent(new ShowNotificationEvent(this.state.contentId));\n    if (config.timeout) {\n      this.state.timeout = setTimeout(() => this.hide(this.state.contentId), config.timeout);\n    }\n  }\n  /**\n   * Hides the notification\n   */\n  hide(id) {\n    if (this.isVisible(id)) {\n      const contentId = this.state.contentId;\n      this.container.classList.remove(\"psv-notification--visible\");\n      this.state.visible = false;\n      this.state.contentId = null;\n      this.viewer.dispatchEvent(new HideNotificationEvent(contentId));\n    }\n  }\n};\n\n// src/components/Overlay.ts\nvar Overlay = class extends AbstractComponent {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer, {\n      className: `psv-overlay ${CAPTURE_EVENTS_CLASS}`\n    });\n    /**\n     * @internal\n     */\n    this.state = {\n      visible: false,\n      contentId: null,\n      dismissible: true\n    };\n    this.image = document.createElement(\"div\");\n    this.image.className = \"psv-overlay-image\";\n    this.container.appendChild(this.image);\n    this.title = document.createElement(\"div\");\n    this.title.className = \"psv-overlay-title\";\n    this.container.appendChild(this.title);\n    this.text = document.createElement(\"div\");\n    this.text.className = \"psv-overlay-text\";\n    this.container.appendChild(this.text);\n    this.container.addEventListener(\"click\", this);\n    this.viewer.addEventListener(KeypressEvent.type, this);\n    super.hide();\n  }\n  /**\n   * @internal\n   */\n  destroy() {\n    this.viewer.removeEventListener(KeypressEvent.type, this);\n    super.destroy();\n  }\n  /**\n   * @internal\n   */\n  handleEvent(e) {\n    if (e.type === \"click\") {\n      if (this.isVisible() && this.state.dismissible) {\n        this.hide();\n        e.stopPropagation();\n      }\n    } else if (e instanceof KeypressEvent) {\n      if (this.isVisible() && this.state.dismissible && e.key === KEY_CODES.Escape) {\n        this.hide();\n        e.preventDefault();\n      }\n    }\n  }\n  /**\n   * Checks if the overlay is visible\n   */\n  isVisible(id) {\n    return this.state.visible && (!id || !this.state.contentId || this.state.contentId === id);\n  }\n  /**\n   * @throws {@link PSVError} always\n   * @internal\n   */\n  toggle() {\n    throw new PSVError(\"Overlay cannot be toggled\");\n  }\n  /**\n   * Displays an overlay on the viewer\n   */\n  show(config) {\n    if (typeof config === \"string\") {\n      config = {\n        title: config\n      };\n    }\n    this.state.contentId = config.id || null;\n    this.state.dismissible = config.dismissible !== false;\n    this.image.innerHTML = config.image || \"\";\n    this.title.innerHTML = config.title || \"\";\n    this.text.innerHTML = config.text || \"\";\n    super.show();\n    this.viewer.dispatchEvent(new ShowOverlayEvent(this.state.contentId));\n  }\n  /**\n   * Hides the overlay\n   */\n  hide(id) {\n    if (this.isVisible(id)) {\n      const contentId = this.state.contentId;\n      super.hide();\n      this.state.contentId = null;\n      this.viewer.dispatchEvent(new HideOverlayEvent(contentId));\n    }\n  }\n};\n\n// src/components/Panel.ts\nvar PANEL_MIN_WIDTH = 200;\nvar PANEL_CLASS_NO_INTERACTION = \"psv-panel-content--no-interaction\";\nvar Panel = class extends AbstractComponent {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer, {\n      className: `psv-panel ${CAPTURE_EVENTS_CLASS}`\n    });\n    /**\n     * @internal\n     */\n    this.state = {\n      visible: false,\n      contentId: null,\n      mouseX: 0,\n      mouseY: 0,\n      mousedown: false,\n      clickHandler: null,\n      keyHandler: null,\n      width: {}\n    };\n    const resizer = document.createElement(\"div\");\n    resizer.className = \"psv-panel-resizer\";\n    this.container.appendChild(resizer);\n    const closeBtn = document.createElement(\"div\");\n    closeBtn.className = \"psv-panel-close-button\";\n    closeBtn.innerHTML = ICONS.close;\n    closeBtn.title = viewer.config.lang.close;\n    this.container.appendChild(closeBtn);\n    this.content = document.createElement(\"div\");\n    this.content.className = \"psv-panel-content\";\n    this.container.appendChild(this.content);\n    closeBtn.addEventListener(\"click\", () => this.hide());\n    resizer.addEventListener(\"mousedown\", this);\n    resizer.addEventListener(\"touchstart\", this);\n    this.viewer.container.addEventListener(\"mouseup\", this);\n    this.viewer.container.addEventListener(\"touchend\", this);\n    this.viewer.container.addEventListener(\"mousemove\", this);\n    this.viewer.container.addEventListener(\"touchmove\", this);\n    this.viewer.addEventListener(KeypressEvent.type, this);\n  }\n  /**\n   * @internal\n   */\n  destroy() {\n    this.viewer.removeEventListener(KeypressEvent.type, this);\n    this.viewer.container.removeEventListener(\"mousemove\", this);\n    this.viewer.container.removeEventListener(\"touchmove\", this);\n    this.viewer.container.removeEventListener(\"mouseup\", this);\n    this.viewer.container.removeEventListener(\"touchend\", this);\n    super.destroy();\n  }\n  /**\n   * @internal\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case \"mousedown\":\n        this.__onMouseDown(e);\n        break;\n      case \"touchstart\":\n        this.__onTouchStart(e);\n        break;\n      case \"mousemove\":\n        this.__onMouseMove(e);\n        break;\n      case \"touchmove\":\n        this.__onTouchMove(e);\n        break;\n      case \"mouseup\":\n        this.__onMouseUp(e);\n        break;\n      case \"touchend\":\n        this.__onTouchEnd(e);\n        break;\n      case KeypressEvent.type:\n        this.__onKeyPress(e);\n        break;\n    }\n  }\n  /**\n   * Checks if the panel is visible\n   */\n  isVisible(id) {\n    return this.state.visible && (!id || !this.state.contentId || this.state.contentId === id);\n  }\n  /**\n   * @throws {@link PSVError} always\n   * @internal\n   */\n  toggle() {\n    throw new PSVError(\"Panel cannot be toggled\");\n  }\n  /**\n   * Shows the panel\n   */\n  show(config) {\n    if (typeof config === \"string\") {\n      config = {\n        content: config\n      };\n    }\n    const wasVisible = this.isVisible(config.id);\n    this.state.contentId = config.id || null;\n    this.state.visible = true;\n    if (this.state.clickHandler) {\n      this.content.removeEventListener(\"click\", this.state.clickHandler);\n      this.content.removeEventListener(\"keydown\", this.state.keyHandler);\n      this.state.clickHandler = null;\n      this.state.keyHandler = null;\n    }\n    if (config.id && this.state.width[config.id]) {\n      this.container.style.width = this.state.width[config.id];\n    } else if (config.width) {\n      this.container.style.width = config.width;\n    } else {\n      this.container.style.width = null;\n    }\n    this.content.innerHTML = config.content;\n    this.content.scrollTop = 0;\n    this.container.classList.add(\"psv-panel--open\");\n    toggleClass(this.content, \"psv-panel-content--no-margin\", config.noMargin === true);\n    if (config.clickHandler) {\n      this.state.clickHandler = e => {\n        config.clickHandler(getEventTarget(e));\n      };\n      this.state.keyHandler = e => {\n        if (e.key === KEY_CODES.Enter) {\n          config.clickHandler(getEventTarget(e));\n        }\n      };\n      this.content.addEventListener(\"click\", this.state.clickHandler);\n      this.content.addEventListener(\"keydown\", this.state.keyHandler);\n      if (!wasVisible) {\n        setTimeout(() => {\n          this.content.querySelector(\"a,button,[tabindex]\")?.focus();\n        }, 300);\n      }\n    }\n    this.viewer.dispatchEvent(new ShowPanelEvent(this.state.contentId));\n  }\n  /**\n   * Hides the panel\n   */\n  hide(id) {\n    if (this.isVisible(id)) {\n      const contentId = this.state.contentId;\n      this.state.visible = false;\n      this.state.contentId = null;\n      this.content.innerHTML = null;\n      this.container.classList.remove(\"psv-panel--open\");\n      if (this.state.clickHandler) {\n        this.content.removeEventListener(\"click\", this.state.clickHandler);\n        this.content.removeEventListener(\"keydown\", this.state.keyHandler);\n        this.state.clickHandler = null;\n        this.state.keyHandler = null;\n      }\n      this.viewer.dispatchEvent(new HidePanelEvent(contentId));\n    }\n  }\n  __onMouseDown(evt) {\n    evt.stopPropagation();\n    this.__startResize(evt.clientX, evt.clientY);\n  }\n  __onTouchStart(evt) {\n    evt.stopPropagation();\n    if (evt.touches.length === 1) {\n      const touch = evt.touches[0];\n      this.__startResize(touch.clientX, touch.clientY);\n    }\n  }\n  __onMouseUp(evt) {\n    if (this.state.mousedown) {\n      evt.stopPropagation();\n      this.state.mousedown = false;\n      this.content.classList.remove(PANEL_CLASS_NO_INTERACTION);\n    }\n  }\n  __onTouchEnd(evt) {\n    if (this.state.mousedown) {\n      evt.stopPropagation();\n      if (evt.touches.length === 0) {\n        this.state.mousedown = false;\n        this.content.classList.remove(PANEL_CLASS_NO_INTERACTION);\n      }\n    }\n  }\n  __onMouseMove(evt) {\n    if (this.state.mousedown) {\n      evt.stopPropagation();\n      this.__resize(evt.clientX, evt.clientY);\n    }\n  }\n  __onTouchMove(evt) {\n    if (this.state.mousedown) {\n      const touch = evt.touches[0];\n      this.__resize(touch.clientX, touch.clientY);\n    }\n  }\n  __onKeyPress(evt) {\n    if (this.isVisible() && evt.key === KEY_CODES.Escape) {\n      this.hide();\n      evt.preventDefault();\n    }\n  }\n  __startResize(clientX, clientY) {\n    this.state.mouseX = clientX;\n    this.state.mouseY = clientY;\n    this.state.mousedown = true;\n    this.content.classList.add(PANEL_CLASS_NO_INTERACTION);\n  }\n  __resize(clientX, clientY) {\n    const x = clientX;\n    const y = clientY;\n    const width = Math.max(PANEL_MIN_WIDTH, this.container.offsetWidth - (x - this.state.mouseX)) + \"px\";\n    if (this.state.contentId) {\n      this.state.width[this.state.contentId] = width;\n    }\n    this.container.style.width = width;\n    this.state.mouseX = x;\n    this.state.mouseY = y;\n  }\n};\n\n// src/components/Tooltip.ts\nvar Tooltip = class extends AbstractComponent {\n  /**\n   * @internal\n   */\n  constructor(viewer, config) {\n    super(viewer, {\n      className: \"psv-tooltip\"\n    });\n    /**\n     * @internal\n     */\n    this.state = {\n      visible: true,\n      arrow: 0,\n      border: 0,\n      state: 0 /* NONE */,\n      width: 0,\n      height: 0,\n      pos: \"\",\n      config: null,\n      data: null,\n      hideTimeout: null\n    };\n    this.content = document.createElement(\"div\");\n    this.content.className = \"psv-tooltip-content\";\n    this.container.appendChild(this.content);\n    this.arrow = document.createElement(\"div\");\n    this.arrow.className = \"psv-tooltip-arrow\";\n    this.container.appendChild(this.arrow);\n    this.container.addEventListener(\"transitionend\", this);\n    this.container.addEventListener(\"touchdown\", e => e.stopPropagation());\n    this.container.addEventListener(\"mousedown\", e => e.stopPropagation());\n    this.container.style.top = \"-1000px\";\n    this.container.style.left = \"-1000px\";\n    this.show(config);\n  }\n  /**\n   * @internal\n   */\n  handleEvent(e) {\n    if (e.type === \"transitionend\") {\n      this.__onTransitionEnd(e);\n    }\n  }\n  /**\n   * @internal\n   */\n  destroy() {\n    clearTimeout(this.state.hideTimeout);\n    delete this.state.data;\n    super.destroy();\n  }\n  /**\n   * @throws {@link PSVError} always\n   * @internal\n   */\n  toggle() {\n    throw new PSVError(\"Tooltip cannot be toggled\");\n  }\n  /**\n   * Displays the tooltip on the viewer\n   * @internal\n   */\n  show(config) {\n    if (this.state.state !== 0 /* NONE */) {\n      throw new PSVError(\"Initialized tooltip cannot be re-initialized\");\n    }\n    if (config.className) {\n      addClasses(this.container, config.className);\n    }\n    if (config.style) {\n      Object.assign(this.container.style, config.style);\n    }\n    this.state.state = 3 /* READY */;\n    this.update(config.content, config);\n    this.state.data = config.data;\n    this.state.state = 1 /* SHOWING */;\n    this.viewer.dispatchEvent(new ShowTooltipEvent(this, this.state.data));\n    this.__waitImages();\n  }\n  /**\n   * Updates the content of the tooltip, optionally with a new position\n   * @throws {@link PSVError} if the configuration is invalid\n   */\n  update(content, config) {\n    this.content.innerHTML = content;\n    const rect = this.container.getBoundingClientRect();\n    this.state.width = rect.right - rect.left;\n    this.state.height = rect.bottom - rect.top;\n    this.state.arrow = parseInt(getStyleProperty(this.arrow, \"border-top-width\"), 10);\n    this.state.border = parseInt(getStyleProperty(this.container, \"border-top-left-radius\"), 10);\n    this.move(config ?? this.state.config);\n    this.__waitImages();\n  }\n  /**\n   * Moves the tooltip to a new position\n   * @throws {@link PSVError} if the configuration is invalid\n   */\n  move(config) {\n    if (this.state.state !== 1 /* SHOWING */ && this.state.state !== 3 /* READY */) {\n      throw new PSVError(\"Uninitialized tooltip cannot be moved\");\n    }\n    config.box = config.box ?? this.state.config?.box ?? {\n      width: 0,\n      height: 0\n    };\n    this.state.config = config;\n    const t = this.container;\n    const a = this.arrow;\n    const style = {\n      posClass: cleanCssPosition(config.position, {\n        allowCenter: false,\n        cssOrder: false\n      }) || [\"top\", \"center\"],\n      width: this.state.width,\n      height: this.state.height,\n      top: 0,\n      left: 0,\n      arrowTop: 0,\n      arrowLeft: 0\n    };\n    this.__computeTooltipPosition(style, config);\n    let swapY = null;\n    let swapX = null;\n    if (style.top < 0) {\n      swapY = \"bottom\";\n    } else if (style.top + style.height > this.viewer.state.size.height) {\n      swapY = \"top\";\n    }\n    if (style.left < 0) {\n      swapX = \"right\";\n    } else if (style.left + style.width > this.viewer.state.size.width) {\n      swapX = \"left\";\n    }\n    if (swapX || swapY) {\n      const ordered = cssPositionIsOrdered(style.posClass);\n      if (swapY) {\n        style.posClass[ordered ? 0 : 1] = swapY;\n      }\n      if (swapX) {\n        style.posClass[ordered ? 1 : 0] = swapX;\n      }\n      this.__computeTooltipPosition(style, config);\n    }\n    t.style.top = style.top + \"px\";\n    t.style.left = style.left + \"px\";\n    a.style.top = style.arrowTop + \"px\";\n    a.style.left = style.arrowLeft + \"px\";\n    const newPos = style.posClass.join(\"-\");\n    if (newPos !== this.state.pos) {\n      t.classList.remove(`psv-tooltip--${this.state.pos}`);\n      this.state.pos = newPos;\n      t.classList.add(`psv-tooltip--${this.state.pos}`);\n    }\n  }\n  /**\n   * Hides the tooltip\n   */\n  hide() {\n    this.container.classList.remove(\"psv-tooltip--visible\");\n    this.state.state = 2 /* HIDING */;\n    this.viewer.dispatchEvent(new HideTooltipEvent(this.state.data));\n    const duration = parseFloat(getStyleProperty(this.container, \"transition-duration\"));\n    this.state.hideTimeout = setTimeout(() => {\n      this.destroy();\n    }, duration * 2);\n  }\n  /**\n   * Finalize transition\n   */\n  __onTransitionEnd(e) {\n    if (e.propertyName === \"transform\") {\n      switch (this.state.state) {\n        case 1 /* SHOWING */:\n          this.container.classList.add(\"psv-tooltip--visible\");\n          this.state.state = 3 /* READY */;\n          break;\n        case 2 /* HIDING */:\n          this.state.state = 0 /* NONE */;\n          this.destroy();\n          break;\n        default:\n      }\n    }\n  }\n  /**\n   * Computes the position of the tooltip and its arrow\n   */\n  __computeTooltipPosition(style, config) {\n    const arrow = this.state.arrow;\n    const top = config.top;\n    const height = style.height;\n    const left = config.left;\n    const width = style.width;\n    const offsetSide = arrow + this.state.border;\n    const offsetX = config.box.width / 2 + arrow * 2;\n    const offsetY = config.box.height / 2 + arrow * 2;\n    switch (style.posClass.join(\"-\")) {\n      case \"top-left\":\n        style.top = top - offsetY - height;\n        style.left = left + offsetSide - width;\n        style.arrowTop = height;\n        style.arrowLeft = width - offsetSide - arrow;\n        break;\n      case \"top-center\":\n        style.top = top - offsetY - height;\n        style.left = left - width / 2;\n        style.arrowTop = height;\n        style.arrowLeft = width / 2 - arrow;\n        break;\n      case \"top-right\":\n        style.top = top - offsetY - height;\n        style.left = left - offsetSide;\n        style.arrowTop = height;\n        style.arrowLeft = arrow;\n        break;\n      case \"bottom-left\":\n        style.top = top + offsetY;\n        style.left = left + offsetSide - width;\n        style.arrowTop = -arrow * 2;\n        style.arrowLeft = width - offsetSide - arrow;\n        break;\n      case \"bottom-center\":\n        style.top = top + offsetY;\n        style.left = left - width / 2;\n        style.arrowTop = -arrow * 2;\n        style.arrowLeft = width / 2 - arrow;\n        break;\n      case \"bottom-right\":\n        style.top = top + offsetY;\n        style.left = left - offsetSide;\n        style.arrowTop = -arrow * 2;\n        style.arrowLeft = arrow;\n        break;\n      case \"left-top\":\n        style.top = top + offsetSide - height;\n        style.left = left - offsetX - width;\n        style.arrowTop = height - offsetSide - arrow;\n        style.arrowLeft = width;\n        break;\n      case \"center-left\":\n        style.top = top - height / 2;\n        style.left = left - offsetX - width;\n        style.arrowTop = height / 2 - arrow;\n        style.arrowLeft = width;\n        break;\n      case \"left-bottom\":\n        style.top = top - offsetSide;\n        style.left = left - offsetX - width;\n        style.arrowTop = arrow;\n        style.arrowLeft = width;\n        break;\n      case \"right-top\":\n        style.top = top + offsetSide - height;\n        style.left = left + offsetX;\n        style.arrowTop = height - offsetSide - arrow;\n        style.arrowLeft = -arrow * 2;\n        break;\n      case \"center-right\":\n        style.top = top - height / 2;\n        style.left = left + offsetX;\n        style.arrowTop = height / 2 - arrow;\n        style.arrowLeft = -arrow * 2;\n        break;\n      case \"right-bottom\":\n        style.top = top - offsetSide;\n        style.left = left + offsetX;\n        style.arrowTop = arrow;\n        style.arrowLeft = -arrow * 2;\n        break;\n    }\n  }\n  /**\n   * If the tooltip contains images, recompute its size once they are loaded\n   */\n  __waitImages() {\n    const images = this.content.querySelectorAll(\"img\");\n    if (images.length > 0) {\n      const promises = [];\n      images.forEach(image => {\n        if (!image.complete) {\n          promises.push(new Promise(resolve => {\n            image.onload = resolve;\n            image.onerror = resolve;\n          }));\n        }\n      });\n      if (promises.length) {\n        Promise.all(promises).then(() => {\n          if (this.state.state === 1 /* SHOWING */ || this.state.state === 3 /* READY */) {\n            const rect = this.container.getBoundingClientRect();\n            this.state.width = rect.right - rect.left;\n            this.state.height = rect.bottom - rect.top;\n            this.move(this.state.config);\n          }\n        });\n      }\n    }\n  }\n};\n\n// src/icons/error.svg\nvar error_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"15 15 70 70\"><path fill=\"currentColor\" d=\"M50,16.2c-18.6,0-33.8,15.1-33.8,33.8S31.4,83.7,50,83.7S83.8,68.6,83.8,50S68.6,16.2,50,16.2z M50,80.2c-16.7,0-30.2-13.6-30.2-30.2S33.3,19.7,50,19.7S80.3,33.3,80.3,50S66.7,80.2,50,80.2z\"/><rect fill=\"currentColor\" x=\"48\" y=\"31.7\" width=\"4\" height=\"28\"/><rect fill=\"currentColor\" x=\"48\" y=\"63.2\" width=\"4\" height=\"5\"/><!--Created by Shastry from the Noun Project--></svg>\\n';\n\n// src/services/DataHelper.ts\nimport { Euler as Euler2, MathUtils as MathUtils7, Vector3 as Vector32 } from \"three\";\n\n// src/services/AbstractService.ts\nvar AbstractService = class {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    this.viewer = viewer;\n    this.config = viewer.config;\n    this.state = viewer.state;\n  }\n  /**\n   * Destroys the service\n   * @internal\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  destroy() {}\n};\n\n// src/services/DataHelper.ts\nvar vector3 = new Vector32();\nvar EULER_ZERO = new Euler2(0, 0, 0, \"ZXY\");\nvar DataHelper = class extends AbstractService {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer);\n  }\n  /**\n   * Converts vertical FOV to zoom level\n   */\n  fovToZoomLevel(fov) {\n    const temp = Math.round((fov - this.config.minFov) / (this.config.maxFov - this.config.minFov) * 100);\n    return MathUtils7.clamp(temp - 2 * (temp - 50), 0, 100);\n  }\n  /**\n   * Converts zoom level to vertical FOV\n   */\n  zoomLevelToFov(level) {\n    return this.config.maxFov + level / 100 * (this.config.minFov - this.config.maxFov);\n  }\n  /**\n   * Converts vertical FOV to horizontal FOV\n   */\n  vFovToHFov(vFov) {\n    return MathUtils7.radToDeg(2 * Math.atan(Math.tan(MathUtils7.degToRad(vFov) / 2) * this.state.aspect));\n  }\n  /**\n   * Converts horizontal FOV to vertical FOV\n   */\n  hFovToVFov(hFov) {\n    return MathUtils7.radToDeg(2 * Math.atan(Math.tan(MathUtils7.degToRad(hFov) / 2) / this.state.aspect));\n  }\n  /**\n   * @internal\n   */\n  getAnimationProperties(speed, targetPosition, targetZoom) {\n    const positionProvided = !isNil(targetPosition);\n    const zoomProvided = !isNil(targetZoom);\n    const properties = {};\n    let duration = null;\n    if (positionProvided) {\n      const currentPosition = this.viewer.getPosition();\n      const dYaw = getShortestArc(currentPosition.yaw, targetPosition.yaw);\n      properties.yaw = {\n        start: currentPosition.yaw,\n        end: currentPosition.yaw + dYaw\n      };\n      properties.pitch = {\n        start: currentPosition.pitch,\n        end: targetPosition.pitch\n      };\n      duration = speedToDuration(speed, getAngle(currentPosition, targetPosition));\n    }\n    if (zoomProvided) {\n      const currentZoom = this.viewer.getZoomLevel();\n      const dZoom = Math.abs(targetZoom - currentZoom);\n      properties.zoom = {\n        start: currentZoom,\n        end: targetZoom\n      };\n      if (duration === null) {\n        duration = speedToDuration(speed, Math.PI / 4 * dZoom / 100);\n      }\n    }\n    if (duration === null) {\n      if (typeof speed === \"number\") {\n        duration = speed;\n      } else {\n        duration = ANIMATION_MIN_DURATION;\n      }\n    } else {\n      duration = Math.max(ANIMATION_MIN_DURATION, duration);\n    }\n    return {\n      duration,\n      properties\n    };\n  }\n  /**\n   * @internal\n   */\n  getTransitionOptions(options) {\n    let transition;\n    const defaultTransition = this.config.defaultTransition ?? DEFAULTS.defaultTransition;\n    if (options.transition === false || options.transition === null) {\n      transition = null;\n    } else if (options.transition === true) {\n      transition = {\n        ...defaultTransition\n      };\n    } else if (typeof options.transition === \"object\") {\n      transition = {\n        ...defaultTransition,\n        ...options.transition\n      };\n    } else {\n      transition = this.config.defaultTransition;\n    }\n    return transition;\n  }\n  /**\n   * Converts pixel texture coordinates to spherical radians coordinates\n   * @throws {@link PSVError} when the current adapter does not support texture coordinates\n   */\n  textureCoordsToSphericalCoords(point) {\n    if (!this.state.textureData?.panoData) {\n      throw new PSVError(\"Current adapter does not support texture coordinates or no texture has been loaded\");\n    }\n    const result = this.viewer.adapter.textureCoordsToSphericalCoords(point, this.state.textureData.panoData);\n    if (!EULER_ZERO.equals(this.viewer.renderer.panoramaPose) || !EULER_ZERO.equals(this.viewer.renderer.sphereCorrection)) {\n      this.sphericalCoordsToVector3(result, vector3);\n      vector3.applyEuler(this.viewer.renderer.panoramaPose);\n      vector3.applyEuler(this.viewer.renderer.sphereCorrection);\n      return this.vector3ToSphericalCoords(vector3);\n    } else {\n      return result;\n    }\n  }\n  /**\n   * Converts spherical radians coordinates to pixel texture coordinates\n   * @throws {@link PSVError} when the current adapter does not support texture coordinates\n   */\n  sphericalCoordsToTextureCoords(position) {\n    if (!this.state.textureData?.panoData) {\n      throw new PSVError(\"Current adapter does not support texture coordinates or no texture has been loaded\");\n    }\n    if (!EULER_ZERO.equals(this.viewer.renderer.panoramaPose) || !EULER_ZERO.equals(this.viewer.renderer.sphereCorrection)) {\n      this.sphericalCoordsToVector3(position, vector3);\n      applyEulerInverse(vector3, this.viewer.renderer.sphereCorrection);\n      applyEulerInverse(vector3, this.viewer.renderer.panoramaPose);\n      position = this.vector3ToSphericalCoords(vector3);\n    }\n    return this.viewer.adapter.sphericalCoordsToTextureCoords(position, this.state.textureData.panoData);\n  }\n  /**\n   * Converts spherical radians coordinates to a Vector3\n   */\n  sphericalCoordsToVector3(position, vector, distance2 = SPHERE_RADIUS) {\n    if (!vector) {\n      vector = new Vector32();\n    }\n    vector.x = distance2 * -Math.cos(position.pitch) * Math.sin(position.yaw);\n    vector.y = distance2 * Math.sin(position.pitch);\n    vector.z = distance2 * Math.cos(position.pitch) * Math.cos(position.yaw);\n    return vector;\n  }\n  /**\n   * Converts a Vector3 to spherical radians coordinates\n   */\n  vector3ToSphericalCoords(vector) {\n    const phi = Math.acos(vector.y / Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z));\n    const theta = Math.atan2(vector.x, vector.z);\n    return {\n      yaw: theta < 0 ? -theta : Math.PI * 2 - theta,\n      pitch: Math.PI / 2 - phi\n    };\n  }\n  /**\n   * Converts position on the viewer to a THREE.Vector3\n   */\n  viewerCoordsToVector3(viewerPoint) {\n    const sphereIntersect = this.viewer.renderer.getIntersections(viewerPoint).filter(i => i.object.userData[VIEWER_DATA]);\n    if (sphereIntersect.length) {\n      return sphereIntersect[0].point;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Converts position on the viewer to spherical radians coordinates\n   */\n  viewerCoordsToSphericalCoords(viewerPoint) {\n    const vector = this.viewerCoordsToVector3(viewerPoint);\n    return vector ? this.vector3ToSphericalCoords(vector) : null;\n  }\n  /**\n   * Converts a Vector3 to position on the viewer\n   */\n  vector3ToViewerCoords(vector) {\n    const vectorClone = vector.clone();\n    vectorClone.project(this.viewer.renderer.camera);\n    return {\n      x: Math.round((vectorClone.x + 1) / 2 * this.state.size.width),\n      y: Math.round((1 - vectorClone.y) / 2 * this.state.size.height)\n    };\n  }\n  /**\n   * Converts spherical radians coordinates to position on the viewer\n   */\n  sphericalCoordsToViewerCoords(position) {\n    this.sphericalCoordsToVector3(position, vector3);\n    return this.vector3ToViewerCoords(vector3);\n  }\n  /**\n   * @internal\n   */\n  isPointVisible(point) {\n    let vector;\n    let viewerPoint;\n    if (point instanceof Vector32) {\n      vector = point;\n      viewerPoint = this.vector3ToViewerCoords(point);\n    } else if (isExtendedPosition(point)) {\n      vector = this.sphericalCoordsToVector3(point, vector3);\n      viewerPoint = this.vector3ToViewerCoords(vector);\n    } else {\n      return false;\n    }\n    return vector.dot(this.viewer.state.direction) > 0 && viewerPoint.x >= 0 && viewerPoint.x <= this.viewer.state.size.width && viewerPoint.y >= 0 && viewerPoint.y <= this.viewer.state.size.height;\n  }\n  /**\n   * Converts pixel position to angles if present and ensure boundaries\n   */\n  cleanPosition(position) {\n    if (\"yaw\" in position || \"pitch\" in position) {\n      if (!(\"yaw\" in position) || !(\"pitch\" in position)) {\n        throw new PSVError(`Position is missing 'yaw' or 'pitch'`);\n      }\n      return {\n        yaw: parseAngle(position.yaw),\n        pitch: parseAngle(position.pitch, true)\n      };\n    } else {\n      return this.textureCoordsToSphericalCoords(position);\n    }\n  }\n  /**\n   * Ensure a SphereCorrection object is valid\n   */\n  cleanSphereCorrection(sphereCorrection) {\n    return {\n      pan: parseAngle(sphereCorrection?.pan || 0),\n      tilt: parseAngle(sphereCorrection?.tilt || 0, true),\n      roll: parseAngle(sphereCorrection?.roll || 0, true, false)\n    };\n  }\n  /**\n   * Parse the pose angles of the pano data\n   */\n  cleanPanoramaPose(panoData) {\n    return {\n      pan: MathUtils7.degToRad(panoData?.poseHeading || 0),\n      tilt: MathUtils7.degToRad(panoData?.posePitch || 0),\n      roll: MathUtils7.degToRad(panoData?.poseRoll || 0)\n    };\n  }\n  /**\n   * Update the panorama options if the panorama files contains \"InitialView\" metadata\n   */\n  cleanPanoramaOptions(options, panoData) {\n    if (!panoData?.isEquirectangular) {\n      return options;\n    }\n    if (isNil(options.zoom) && !isNil(panoData.initialFov)) {\n      options = {\n        ...options,\n        zoom: this.fovToZoomLevel(this.hFovToVFov(panoData.initialFov))\n      };\n    }\n    if (isNil(options.position) && !isNil(panoData.initialHeading) && !isNil(panoData.initialPitch)) {\n      options = {\n        ...options,\n        position: {\n          yaw: parseAngle(panoData.initialHeading),\n          pitch: parseAngle(panoData.initialPitch, true)\n        }\n      };\n    }\n    return options;\n  }\n};\n\n// src/services/EventsHandler.ts\nimport { MathUtils as MathUtils8 } from \"three\";\n\n// src/icons/gesture.svg\nvar gesture_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M33.38 33.2a1.96 1.96 0 0 0 1.5-3.23 10.61 10.61 0 0 1 7.18-17.51c.7-.06 1.31-.49 1.61-1.12a13.02 13.02 0 0 1 11.74-7.43c7.14 0 12.96 5.8 12.96 12.9 0 3.07-1.1 6.05-3.1 8.38-.7.82-.61 2.05.21 2.76.83.7 2.07.6 2.78-.22a16.77 16.77 0 0 0 4.04-10.91C72.3 7.54 64.72 0 55.4 0a16.98 16.98 0 0 0-14.79 8.7 14.6 14.6 0 0 0-12.23 14.36c0 3.46 1.25 6.82 3.5 9.45.4.45.94.69 1.5.69m45.74 43.55a22.13 22.13 0 0 1-5.23 12.4c-4 4.55-9.53 6.86-16.42 6.86-12.6 0-20.1-10.8-20.17-10.91a1.82 1.82 0 0 0-.08-.1c-5.3-6.83-14.55-23.82-17.27-28.87-.05-.1 0-.21.02-.23a6.3 6.3 0 0 1 8.24 1.85l9.38 12.59a1.97 1.97 0 0 0 3.54-1.17V25.34a4 4 0 0 1 1.19-2.87 3.32 3.32 0 0 1 2.4-.95c1.88.05 3.4 1.82 3.4 3.94v24.32a1.96 1.96 0 0 0 3.93 0v-33.1a3.5 3.5 0 0 1 7 0v35.39a1.96 1.96 0 0 0 3.93 0v-.44c.05-2.05 1.6-3.7 3.49-3.7 1.93 0 3.5 1.7 3.5 3.82v5.63c0 .24.04.48.13.71l.1.26a1.97 1.97 0 0 0 3.76-.37c.33-1.78 1.77-3.07 3.43-3.07 1.9 0 3.45 1.67 3.5 3.74l-1.77 18.1zM77.39 51c-1.25 0-2.45.32-3.5.9v-.15c0-4.27-3.33-7.74-7.42-7.74-1.26 0-2.45.33-3.5.9V16.69a7.42 7.42 0 0 0-14.85 0v1.86a7 7 0 0 0-3.28-.94 7.21 7.21 0 0 0-5.26 2.07 7.92 7.92 0 0 0-2.38 5.67v37.9l-5.83-7.82a10.2 10.2 0 0 0-13.35-2.92 4.1 4.1 0 0 0-1.53 5.48C20 64.52 28.74 80.45 34.07 87.34c.72 1.04 9.02 12.59 23.4 12.59 7.96 0 14.66-2.84 19.38-8.2a26.06 26.06 0 0 0 6.18-14.6l1.78-18.2v-.2c0-4.26-3.32-7.73-7.42-7.73z\"/><!--Created by AomAm from the Noun Project--></svg>\\n';\n\n// src/icons/mousewheel.svg\nvar mousewheel_default = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 17 79 79\"><path fill=\"currentColor\" d=\"M38.1 29.27c-.24 0-.44.2-.44.45v10.7a.45.45 0 00.9 0v-10.7c0-.25-.2-.45-.45-.45zm10.2 26.66a11.54 11.54 0 01-8.48-6.14.45.45 0 10-.8.41 12.45 12.45 0 009.22 6.62.45.45 0 00.07-.9zm24.55-13.08a23.04 23.04 0 00-22.56-23v7.07l-.01.05a2.83 2.83 0 012.39 2.78v14.03l.09-.02h8.84v-9.22a.45.45 0 11.9 0v9.22h10.35v-.9zm0 27.33V44.66H62.5c-.02 2.01-.52 4-1.47 5.76a.45.45 0 01-.61.18.45.45 0 01-.19-.61 11.54 11.54 0 001.36-5.33h-8.83l-.1-.01a2.83 2.83 0 01-2.83 2.84h-.04-.04a2.83 2.83 0 01-2.83-2.83v-14.9a2.82 2.82 0 012.47-2.8v-7.11a23.04 23.04 0 00-22.57 23v.91h14.72V29.88a8.2 8.2 0 015.02-7.57c.22-.1.5.01.59.24.1.23-.01.5-.24.6a7.3 7.3 0 00-4.47 6.73v13.88h3.9a.45.45 0 110 .9h-3.9v.15a7.32 7.32 0 0011.23 6.17.45.45 0 01.49.76 8.22 8.22 0 01-12.62-6.93v-.15H26.82v25.52a23.04 23.04 0 0023.01 23.01 23.04 23.04 0 0023.02-23.01zm1.8-27.33v27.33A24.85 24.85 0 0149.84 95a24.85 24.85 0 01-24.82-24.82V42.85a24.85 24.85 0 0124.82-24.82 24.85 24.85 0 0124.83 24.82zM57.98 29.88v9.36a.45.45 0 11-.9 0v-9.36a7.28 7.28 0 00-3.4-6.17.45.45 0 01.49-.76 8.18 8.18 0 013.8 6.93z\"/><!-- Created by Icon Island from the Noun Project --></svg>\\n';\n\n// src/services/EventsHandler.ts\nvar _Step = class _Step {\n  constructor() {\n    this.$ = _Step.IDLE;\n  }\n  is(...steps) {\n    return steps.some(step => this.$ & step);\n  }\n  set(step) {\n    this.$ = step;\n  }\n  add(step) {\n    this.$ |= step;\n  }\n  remove(step) {\n    this.$ &= ~step;\n  }\n};\n_Step.IDLE = 0;\n_Step.CLICK = 1;\n_Step.MOVING = 2;\nvar Step = _Step;\nvar EventsHandler = class extends AbstractService {\n  constructor(viewer) {\n    super(viewer);\n    this.data = {\n      /** start x position of the click/touch */\n      startMouseX: 0,\n      /** start y position of the click/touch */\n      startMouseY: 0,\n      /** current x position of the cursor */\n      mouseX: 0,\n      /** current y position of the cursor */\n      mouseY: 0,\n      /** current distance between fingers */\n      pinchDist: 0,\n      /** accumulator for smooth movement */\n      moveDelta: {\n        yaw: 0,\n        pitch: 0,\n        zoom: 0\n      },\n      accumulatorFactor: 0,\n      /** when the Ctrl key is pressed */\n      ctrlKeyDown: false,\n      /** temporary storage of click data between two clicks */\n      dblclickData: null,\n      dblclickTimeout: null,\n      longtouchTimeout: null,\n      twofingersTimeout: null,\n      ctrlZoomTimeout: null\n    };\n    this.step = new Step();\n    this.keyHandler = new PressHandler();\n    this.resizeObserver = new ResizeObserver(throttle(() => this.viewer.autoSize(), 50));\n    this.moveThreshold = MOVE_THRESHOLD * SYSTEM.pixelRatio;\n  }\n  /**\n   * @internal\n   */\n  init() {\n    window.addEventListener(\"keydown\", this, {\n      passive: false\n    });\n    window.addEventListener(\"keyup\", this);\n    this.viewer.container.addEventListener(\"mousedown\", this);\n    window.addEventListener(\"mousemove\", this, {\n      passive: false\n    });\n    window.addEventListener(\"mouseup\", this);\n    this.viewer.container.addEventListener(\"touchstart\", this, {\n      passive: false\n    });\n    window.addEventListener(\"touchmove\", this, {\n      passive: false\n    });\n    window.addEventListener(\"touchend\", this, {\n      passive: false\n    });\n    this.viewer.container.addEventListener(\"wheel\", this, {\n      passive: false\n    });\n    document.addEventListener(\"fullscreenchange\", this);\n    this.resizeObserver.observe(this.viewer.container);\n    this.viewer.addEventListener(BeforeRenderEvent.type, this);\n    this.viewer.addEventListener(StopAllEvent.type, this);\n  }\n  destroy() {\n    window.removeEventListener(\"keydown\", this);\n    window.removeEventListener(\"keyup\", this);\n    this.viewer.container.removeEventListener(\"mousedown\", this);\n    window.removeEventListener(\"mousemove\", this);\n    window.removeEventListener(\"mouseup\", this);\n    this.viewer.container.removeEventListener(\"touchstart\", this);\n    window.removeEventListener(\"touchmove\", this);\n    window.removeEventListener(\"touchend\", this);\n    this.viewer.container.removeEventListener(\"wheel\", this);\n    document.removeEventListener(\"fullscreenchange\", this);\n    this.resizeObserver.disconnect();\n    this.viewer.removeEventListener(BeforeRenderEvent.type, this);\n    this.viewer.removeEventListener(StopAllEvent.type, this);\n    clearTimeout(this.data.dblclickTimeout);\n    clearTimeout(this.data.longtouchTimeout);\n    clearTimeout(this.data.twofingersTimeout);\n    clearTimeout(this.data.ctrlZoomTimeout);\n    super.destroy();\n  }\n  /**\n   * @internal\n   */\n  handleEvent(evt) {\n    switch (evt.type) {\n      case \"keydown\":\n        this.__onKeyDown(evt);\n        break;\n      case \"keyup\":\n        this.__onKeyUp();\n        break;\n      case \"mousemove\":\n        this.__onMouseMove(evt);\n        break;\n      case \"mouseup\":\n        this.__onMouseUp(evt);\n        break;\n      case \"touchmove\":\n        this.__onTouchMove(evt);\n        break;\n      case \"touchend\":\n        this.__onTouchEnd(evt);\n        break;\n      case \"fullscreenchange\":\n        this.__onFullscreenChange();\n        break;\n      case BeforeRenderEvent.type:\n        this.__applyMoveDelta();\n        break;\n      case StopAllEvent.type:\n        this.__clearMoveDelta();\n        break;\n    }\n    if (!getMatchingTarget(evt, \".\" + CAPTURE_EVENTS_CLASS)) {\n      switch (evt.type) {\n        case \"mousedown\":\n          this.__onMouseDown(evt);\n          break;\n        case \"touchstart\":\n          this.__onTouchStart(evt);\n          break;\n        case \"wheel\":\n          this.__onMouseWheel(evt);\n          break;\n      }\n    }\n  }\n  /**\n   * Handles keyboard events\n   */\n  __onKeyDown(e) {\n    if (this.config.mousewheelCtrlKey) {\n      this.data.ctrlKeyDown = e.key === KEY_CODES.Control;\n      if (this.data.ctrlKeyDown) {\n        clearTimeout(this.data.ctrlZoomTimeout);\n        this.viewer.overlay.hide(IDS.CTRL_ZOOM);\n      }\n    }\n    if (!this.viewer.dispatchEvent(new KeypressEvent(e.key, e))) {\n      return;\n    }\n    if (!this.state.keyboardEnabled) {\n      return;\n    }\n    const action = this.config.keyboardActions?.[e.key];\n    if (typeof action === \"function\") {\n      action(this.viewer, e);\n      e.preventDefault();\n      return;\n    }\n    if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) {\n      return;\n    }\n    if (action && !this.keyHandler.pending) {\n      if (action !== \"ZOOM_IN\" /* ZOOM_IN */ && action !== \"ZOOM_OUT\" /* ZOOM_OUT */) {\n        this.viewer.stopAll();\n      }\n      switch (action) {\n        case \"ROTATE_UP\" /* ROTATE_UP */:\n          this.viewer.dynamics.position.roll({\n            pitch: false\n          });\n          break;\n        case \"ROTATE_DOWN\" /* ROTATE_DOWN */:\n          this.viewer.dynamics.position.roll({\n            pitch: true\n          });\n          break;\n        case \"ROTATE_RIGHT\" /* ROTATE_RIGHT */:\n          this.viewer.dynamics.position.roll({\n            yaw: false\n          });\n          break;\n        case \"ROTATE_LEFT\" /* ROTATE_LEFT */:\n          this.viewer.dynamics.position.roll({\n            yaw: true\n          });\n          break;\n        case \"ZOOM_IN\" /* ZOOM_IN */:\n          this.viewer.dynamics.zoom.roll(false);\n          break;\n        case \"ZOOM_OUT\" /* ZOOM_OUT */:\n          this.viewer.dynamics.zoom.roll(true);\n          break;\n      }\n      this.keyHandler.down(action);\n      e.preventDefault();\n    }\n  }\n  /**\n   * Handles keyboard events\n   */\n  __onKeyUp() {\n    this.data.ctrlKeyDown = false;\n    if (!this.state.keyboardEnabled) {\n      return;\n    }\n    this.keyHandler.up(action => {\n      if (action === \"ZOOM_IN\" /* ZOOM_IN */ || action === \"ZOOM_OUT\" /* ZOOM_OUT */) {\n        this.viewer.dynamics.zoom.stop();\n      } else {\n        this.viewer.dynamics.position.stop();\n        this.viewer.resetIdleTimer();\n      }\n    });\n  }\n  /**\n   * Handles mouse down events\n   */\n  __onMouseDown(evt) {\n    this.step.add(Step.CLICK);\n    this.data.startMouseX = evt.clientX;\n    this.data.startMouseY = evt.clientY;\n  }\n  /**\n   *Handles mouse up events\n   */\n  __onMouseUp(evt) {\n    if (this.step.is(Step.CLICK, Step.MOVING)) {\n      this.__stopMove(evt.clientX, evt.clientY, evt, evt.button === 2);\n    }\n  }\n  /**\n   * Handles mouse move events\n   */\n  __onMouseMove(evt) {\n    if (this.config.mousemove && this.step.is(Step.CLICK, Step.MOVING)) {\n      evt.preventDefault();\n      this.__doMove(evt.clientX, evt.clientY);\n    }\n    this.__handleObjectsEvents(evt);\n  }\n  /**\n   * Handles touch events\n   */\n  __onTouchStart(evt) {\n    if (evt.touches.length === 1) {\n      this.step.add(Step.CLICK);\n      this.data.startMouseX = evt.touches[0].clientX;\n      this.data.startMouseY = evt.touches[0].clientY;\n      if (!this.data.longtouchTimeout) {\n        this.data.longtouchTimeout = setTimeout(() => {\n          const touch = evt.touches[0];\n          this.__stopMove(touch.clientX, touch.clientY, evt, true);\n          this.data.longtouchTimeout = null;\n        }, LONGTOUCH_DELAY);\n      }\n    } else if (evt.touches.length === 2) {\n      this.step.set(Step.IDLE);\n      this.__cancelLongTouch();\n      if (this.config.mousemove) {\n        this.__cancelTwoFingersOverlay();\n        this.__startMoveZoom(evt);\n        evt.preventDefault();\n      }\n    }\n  }\n  /**\n   * Handles touch events\n   */\n  __onTouchEnd(evt) {\n    this.__cancelLongTouch();\n    if (this.step.is(Step.CLICK, Step.MOVING)) {\n      evt.preventDefault();\n      this.__cancelTwoFingersOverlay();\n      if (evt.touches.length === 1) {\n        this.__stopMove(this.data.mouseX, this.data.mouseY);\n      } else if (evt.touches.length === 0) {\n        const touch = evt.changedTouches[0];\n        this.__stopMove(touch.clientX, touch.clientY, evt);\n      }\n    }\n  }\n  /**\n   * Handles touch move events\n   */\n  __onTouchMove(evt) {\n    this.__cancelLongTouch();\n    if (!this.config.mousemove) {\n      return;\n    }\n    if (evt.touches.length === 1) {\n      if (this.config.touchmoveTwoFingers) {\n        if (this.step.is(Step.CLICK) && !this.data.twofingersTimeout) {\n          this.data.twofingersTimeout = setTimeout(() => {\n            this.viewer.overlay.show({\n              id: IDS.TWO_FINGERS,\n              image: gesture_default,\n              title: this.config.lang.twoFingers\n            });\n          }, TWOFINGERSOVERLAY_DELAY);\n        }\n      } else if (this.step.is(Step.CLICK, Step.MOVING)) {\n        evt.preventDefault();\n        const touch = evt.touches[0];\n        this.__doMove(touch.clientX, touch.clientY);\n      }\n    } else {\n      this.__doMoveZoom(evt);\n      this.__cancelTwoFingersOverlay();\n    }\n  }\n  /**\n   * Cancel the long touch timer if any\n   */\n  __cancelLongTouch() {\n    if (this.data.longtouchTimeout) {\n      clearTimeout(this.data.longtouchTimeout);\n      this.data.longtouchTimeout = null;\n    }\n  }\n  /**\n   * Cancel the two fingers overlay timer if any\n   */\n  __cancelTwoFingersOverlay() {\n    if (this.config.touchmoveTwoFingers) {\n      if (this.data.twofingersTimeout) {\n        clearTimeout(this.data.twofingersTimeout);\n        this.data.twofingersTimeout = null;\n      }\n      this.viewer.overlay.hide(IDS.TWO_FINGERS);\n    }\n  }\n  /**\n   * Handles mouse wheel events\n   */\n  __onMouseWheel(evt) {\n    if (!this.config.mousewheel || !evt.deltaY) {\n      return;\n    }\n    if (this.config.mousewheelCtrlKey && !this.data.ctrlKeyDown) {\n      this.viewer.overlay.show({\n        id: IDS.CTRL_ZOOM,\n        image: mousewheel_default,\n        title: this.config.lang.ctrlZoom\n      });\n      clearTimeout(this.data.ctrlZoomTimeout);\n      this.data.ctrlZoomTimeout = setTimeout(() => this.viewer.overlay.hide(IDS.CTRL_ZOOM), CTRLZOOM_TIMEOUT);\n      return;\n    }\n    evt.preventDefault();\n    evt.stopPropagation();\n    const delta = evt.deltaY / Math.abs(evt.deltaY) * 5 * this.config.zoomSpeed;\n    if (delta !== 0) {\n      this.viewer.dynamics.zoom.step(-delta, 5);\n    }\n  }\n  /**\n   * Handles fullscreen events\n   */\n  __onFullscreenChange() {\n    const fullscreen = this.viewer.isFullscreenEnabled();\n    if (this.config.keyboard === \"fullscreen\") {\n      if (fullscreen) {\n        this.viewer.startKeyboardControl();\n      } else {\n        this.viewer.stopKeyboardControl();\n      }\n    }\n    this.viewer.dispatchEvent(new FullscreenEvent(fullscreen));\n  }\n  /**\n   * Resets all state variables\n   */\n  __resetMove() {\n    this.step.set(Step.IDLE);\n    this.data.mouseX = 0;\n    this.data.mouseY = 0;\n    this.data.startMouseX = 0;\n    this.data.startMouseY = 0;\n  }\n  /**\n   * Initializes the combines move and zoom\n   */\n  __startMoveZoom(evt) {\n    this.viewer.stopAll();\n    this.__resetMove();\n    const touchData = getTouchData(evt);\n    this.step.set(Step.MOVING);\n    this.data.accumulatorFactor = this.config.moveInertia;\n    ({\n      distance: this.data.pinchDist,\n      center: {\n        x: this.data.mouseX,\n        y: this.data.mouseY\n      }\n    } = touchData);\n  }\n  /**\n   * Stops the movement\n   * @description If the move threshold was not reached a click event is triggered\n   */\n  __stopMove(clientX, clientY, event, rightclick = false) {\n    if (this.step.is(Step.CLICK) && !this.__moveThresholdReached(clientX, clientY)) {\n      this.__doClick(clientX, clientY, event, rightclick);\n    }\n    if (this.config.moveInertia) {\n      this.data.accumulatorFactor = Math.pow(this.config.moveInertia, 0.5);\n    }\n    this.__resetMove();\n    this.viewer.resetIdleTimer();\n  }\n  /**\n   * Triggers an event with all coordinates when a simple click is performed\n   */\n  __doClick(clientX, clientY, event, rightclick = false) {\n    const boundingRect = this.viewer.container.getBoundingClientRect();\n    const viewerX = clientX - boundingRect.left;\n    const viewerY = clientY - boundingRect.top;\n    const intersections = this.viewer.renderer.getIntersections({\n      x: viewerX,\n      y: viewerY\n    });\n    const sphereIntersection = intersections.find(i => i.object.userData[VIEWER_DATA]);\n    if (sphereIntersection) {\n      const sphericalCoords = this.viewer.dataHelper.vector3ToSphericalCoords(sphereIntersection.point);\n      const data = {\n        rightclick,\n        originalEvent: event,\n        target: getEventTarget(event),\n        clientX,\n        clientY,\n        viewerX,\n        viewerY,\n        yaw: sphericalCoords.yaw,\n        pitch: sphericalCoords.pitch,\n        objects: intersections.map(i => i.object).filter(o => !o.userData[VIEWER_DATA])\n      };\n      try {\n        const textureCoords = this.viewer.dataHelper.sphericalCoordsToTextureCoords(data);\n        Object.assign(data, textureCoords);\n      } catch {}\n      if (!this.data.dblclickTimeout) {\n        this.viewer.dispatchEvent(new ClickEvent(data));\n        this.data.dblclickData = clone(data);\n        this.data.dblclickTimeout = setTimeout(() => {\n          this.data.dblclickTimeout = null;\n          this.data.dblclickData = null;\n        }, DBLCLICK_DELAY);\n      } else {\n        if (Math.abs(this.data.dblclickData.clientX - data.clientX) < this.moveThreshold && Math.abs(this.data.dblclickData.clientY - data.clientY) < this.moveThreshold) {\n          this.viewer.dispatchEvent(new DoubleClickEvent(this.data.dblclickData));\n        }\n        clearTimeout(this.data.dblclickTimeout);\n        this.data.dblclickTimeout = null;\n        this.data.dblclickData = null;\n      }\n    }\n  }\n  /**\n   * Trigger events for observed THREE objects\n   */\n  __handleObjectsEvents(evt) {\n    if (!isEmpty(this.state.objectsObservers) && evt.composedPath().includes(this.viewer.container)) {\n      const viewerPos = getPosition(this.viewer.container);\n      const viewerPoint = {\n        x: evt.clientX - viewerPos.x,\n        y: evt.clientY - viewerPos.y\n      };\n      const intersections = this.viewer.renderer.getIntersections(viewerPoint);\n      const emit = (object, key, evtCtor) => {\n        this.viewer.dispatchEvent(new evtCtor(evt, object, viewerPoint, key));\n      };\n      for (const [key, object] of Object.entries(this.state.objectsObservers)) {\n        const intersection = intersections.find(i => i.object.userData[key]);\n        if (intersection) {\n          if (object && intersection.object !== object) {\n            emit(object, key, ObjectLeaveEvent);\n            this.state.objectsObservers[key] = null;\n          }\n          if (!object) {\n            this.state.objectsObservers[key] = intersection.object;\n            emit(intersection.object, key, ObjectEnterEvent);\n          } else {\n            emit(intersection.object, key, ObjectHoverEvent);\n          }\n        } else if (object) {\n          emit(object, key, ObjectLeaveEvent);\n          this.state.objectsObservers[key] = null;\n        }\n      }\n    }\n  }\n  /**\n   * Starts moving when crossing moveThreshold and performs movement\n   */\n  __doMove(clientX, clientY) {\n    if (this.step.is(Step.CLICK) && this.__moveThresholdReached(clientX, clientY)) {\n      this.viewer.stopAll();\n      this.__resetMove();\n      this.step.set(Step.MOVING);\n      this.data.mouseX = clientX;\n      this.data.mouseY = clientY;\n      this.data.accumulatorFactor = this.config.moveInertia;\n    } else if (this.step.is(Step.MOVING)) {\n      const x = (clientX - this.data.mouseX) * Math.cos(this.state.roll) - (clientY - this.data.mouseY) * Math.sin(this.state.roll);\n      const y = (clientY - this.data.mouseY) * Math.cos(this.state.roll) + (clientX - this.data.mouseX) * Math.sin(this.state.roll);\n      const rotation = {\n        yaw: this.config.moveSpeed * (x / this.state.size.width) * MathUtils8.degToRad(this.state.hFov),\n        pitch: this.config.moveSpeed * (y / this.state.size.height) * MathUtils8.degToRad(this.state.vFov)\n      };\n      this.data.moveDelta.yaw += rotation.yaw;\n      this.data.moveDelta.pitch += rotation.pitch;\n      this.data.mouseX = clientX;\n      this.data.mouseY = clientY;\n    }\n  }\n  /**\n   * Checks if the cursor was move beyond the move threshold\n   */\n  __moveThresholdReached(clientX, clientY) {\n    return Math.abs(clientX - this.data.startMouseX) >= this.moveThreshold || Math.abs(clientY - this.data.startMouseY) >= this.moveThreshold;\n  }\n  /**\n   * Perfoms combined move and zoom\n   */\n  __doMoveZoom(evt) {\n    if (this.step.is(Step.MOVING)) {\n      evt.preventDefault();\n      const touchData = getTouchData(evt);\n      this.__doMove(touchData.center.x, touchData.center.y);\n      this.data.moveDelta.zoom += this.config.zoomSpeed * ((touchData.distance - this.data.pinchDist) / SYSTEM.pixelRatio);\n      this.data.pinchDist = touchData.distance;\n    }\n  }\n  __applyMoveDelta() {\n    const EPS = 1e-3;\n    if (Math.abs(this.data.moveDelta.yaw) > 0 || Math.abs(this.data.moveDelta.pitch) > 0) {\n      const currentPosition = this.viewer.getPosition();\n      this.viewer.rotate({\n        yaw: currentPosition.yaw - this.data.moveDelta.yaw * (1 - this.config.moveInertia),\n        pitch: currentPosition.pitch + this.data.moveDelta.pitch * (1 - this.config.moveInertia)\n      });\n      this.data.moveDelta.yaw *= this.data.accumulatorFactor;\n      this.data.moveDelta.pitch *= this.data.accumulatorFactor;\n      if (Math.abs(this.data.moveDelta.yaw) <= EPS) {\n        this.data.moveDelta.yaw = 0;\n      }\n      if (Math.abs(this.data.moveDelta.pitch) <= EPS) {\n        this.data.moveDelta.pitch = 0;\n      }\n    }\n    if (Math.abs(this.data.moveDelta.zoom) > 0) {\n      const currentZoom = this.viewer.getZoomLevel();\n      this.viewer.zoom(currentZoom + this.data.moveDelta.zoom * (1 - this.config.moveInertia));\n      this.data.moveDelta.zoom *= this.config.moveInertia;\n      if (Math.abs(this.data.moveDelta.zoom) <= EPS) {\n        this.data.moveDelta.zoom = 0;\n      }\n    }\n  }\n  __clearMoveDelta() {\n    this.data.moveDelta.yaw = 0;\n    this.data.moveDelta.pitch = 0;\n    this.data.moveDelta.zoom = 0;\n  }\n};\n\n// src/services/Renderer.ts\nimport { Box3, ColorManagement, Frustum, Group, LinearSRGBColorSpace, LinearToneMapping, MathUtils as MathUtils9, Matrix4, Mesh as Mesh4, MeshBasicMaterial as MeshBasicMaterial3, PerspectiveCamera, Raycaster, Scene, SphereGeometry as SphereGeometry3, Vector2, Vector3 as Vector33, WebGLRenderTarget, WebGLRenderer } from \"three\";\nColorManagement.enabled = false;\nvar vector2 = new Vector2();\nvar matrix4 = new Matrix4();\nvar box3 = new Box3();\nvar Renderer = class extends AbstractService {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer);\n    this.frustumNeedsUpdate = true;\n    this.renderer = new WebGLRenderer(this.config.rendererParameters);\n    this.renderer.setPixelRatio(SYSTEM.pixelRatio);\n    this.renderer.outputColorSpace = LinearSRGBColorSpace;\n    this.renderer.toneMapping = LinearToneMapping;\n    this.renderer.domElement.className = \"psv-canvas\";\n    this.renderer.domElement.style.background = this.config.canvasBackground;\n    this.scene = new Scene();\n    this.camera = new PerspectiveCamera(50, 16 / 9, 0.1, 2 * SPHERE_RADIUS);\n    this.camera.matrixAutoUpdate = false;\n    const raycasterMesh = new Mesh4(new SphereGeometry3(SPHERE_RADIUS).scale(-1, 1, 1), new MeshBasicMaterial3({\n      opacity: 0,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false\n    }));\n    raycasterMesh.userData = {\n      [VIEWER_DATA]: true\n    };\n    this.scene.add(raycasterMesh);\n    this.raycaster = new Raycaster();\n    this.frustum = new Frustum();\n    this.container = document.createElement(\"div\");\n    this.container.className = \"psv-canvas-container\";\n    this.container.appendChild(this.renderer.domElement);\n    this.viewer.container.appendChild(this.container);\n    this.container.addEventListener(\"contextmenu\", e => e.preventDefault());\n    this.viewer.addEventListener(SizeUpdatedEvent.type, this);\n    this.viewer.addEventListener(ZoomUpdatedEvent.type, this);\n    this.viewer.addEventListener(PositionUpdatedEvent.type, this);\n    this.viewer.addEventListener(RollUpdatedEvent.type, this);\n    this.viewer.addEventListener(ConfigChangedEvent.type, this);\n    this.hide();\n  }\n  get panoramaPose() {\n    return this.mesh.rotation;\n  }\n  get sphereCorrection() {\n    return this.meshContainer.rotation;\n  }\n  /**\n   * @internal\n   */\n  init() {\n    this.show();\n    this.renderer.setAnimationLoop(t => this.__renderLoop(t));\n  }\n  /**\n   * @internal\n   */\n  destroy() {\n    this.renderer.setAnimationLoop(null);\n    this.cleanScene(this.scene);\n    this.renderer.dispose();\n    this.viewer.container.removeChild(this.container);\n    this.viewer.removeEventListener(SizeUpdatedEvent.type, this);\n    this.viewer.removeEventListener(ZoomUpdatedEvent.type, this);\n    this.viewer.removeEventListener(PositionUpdatedEvent.type, this);\n    this.viewer.removeEventListener(RollUpdatedEvent.type, this);\n    this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n    super.destroy();\n  }\n  /**\n   * @internal\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case SizeUpdatedEvent.type:\n        this.__onSizeUpdated();\n        break;\n      case ZoomUpdatedEvent.type:\n        this.__onZoomUpdated();\n        break;\n      case PositionUpdatedEvent.type:\n        this.__onPositionUpdated();\n        break;\n      case RollUpdatedEvent.type:\n        this.__onPositionUpdated();\n        break;\n      case ConfigChangedEvent.type:\n        if (e.containsOptions(\"fisheye\")) {\n          this.__onPositionUpdated();\n        }\n        if (e.containsOptions(\"canvasBackground\")) {\n          this.renderer.domElement.style.background = this.config.canvasBackground;\n        }\n        break;\n    }\n  }\n  /**\n   * Hides the viewer\n   */\n  hide() {\n    this.container.style.opacity = \"0\";\n  }\n  /**\n   * Shows the viewer\n   */\n  show() {\n    this.container.style.opacity = \"1\";\n  }\n  /**\n   * Resets or replaces the THREE renderer by a custom one\n   */\n  setCustomRenderer(factory) {\n    if (factory) {\n      this.customRenderer = factory(this.renderer);\n    } else {\n      this.customRenderer = null;\n    }\n    this.viewer.needsUpdate();\n  }\n  /**\n   * Updates the size of the renderer and the aspect of the camera\n   */\n  __onSizeUpdated() {\n    this.renderer.setSize(this.state.size.width, this.state.size.height);\n    this.camera.aspect = this.state.aspect;\n    this.camera.updateProjectionMatrix();\n    this.viewer.needsUpdate();\n    this.frustumNeedsUpdate = true;\n  }\n  /**\n   * Updates the fov of the camera\n   */\n  __onZoomUpdated() {\n    this.camera.fov = this.state.vFov;\n    this.camera.updateProjectionMatrix();\n    this.viewer.needsUpdate();\n    this.frustumNeedsUpdate = true;\n  }\n  /**\n   * Updates the position of the camera\n   */\n  __onPositionUpdated() {\n    this.camera.position.set(0, 0, 0);\n    this.camera.lookAt(this.state.direction);\n    if (this.config.fisheye) {\n      this.camera.position.copy(this.state.direction).multiplyScalar(this.config.fisheye / 2).negate();\n    }\n    this.camera.rotateZ(-this.state.roll);\n    this.camera.updateMatrix();\n    this.camera.updateMatrixWorld();\n    this.viewer.needsUpdate();\n    this.frustumNeedsUpdate = true;\n  }\n  /**\n   * Main event loop, performs a render if `state.needsUpdate` is true\n   */\n  __renderLoop(timestamp) {\n    const elapsed = !this.timestamp ? 0 : timestamp - this.timestamp;\n    this.timestamp = timestamp;\n    this.viewer.dispatchEvent(new BeforeRenderEvent(timestamp, elapsed));\n    this.viewer.dynamics.update(elapsed);\n    if (this.state.needsUpdate || this.state.continuousUpdateCount > 0) {\n      this.state.needsUpdate = false;\n      (this.customRenderer || this.renderer).render(this.scene, this.camera);\n      this.viewer.dispatchEvent(new RenderEvent());\n    }\n  }\n  /**\n   * Applies the texture to the scene, creates the scene if needed\n   * @internal\n   */\n  setTexture(textureData) {\n    if (!this.meshContainer) {\n      this.meshContainer = new Group();\n      this.scene.add(this.meshContainer);\n    }\n    if (this.state.textureData) {\n      this.viewer.adapter.disposeTexture(this.state.textureData);\n    }\n    if (this.mesh) {\n      this.meshContainer.remove(this.mesh);\n      this.viewer.adapter.disposeMesh(this.mesh);\n    }\n    this.mesh = this.viewer.adapter.createMesh(textureData.panoData);\n    this.viewer.adapter.setTexture(this.mesh, textureData, false);\n    this.meshContainer.add(this.mesh);\n    this.state.textureData = textureData;\n    this.viewer.needsUpdate();\n  }\n  /**\n   * Applies a panorama data pose to a Mesh\n   * @internal\n   */\n  setPanoramaPose(panoData, mesh = this.mesh) {\n    const cleanCorrection = this.viewer.dataHelper.cleanPanoramaPose(panoData);\n    mesh.rotation.set(cleanCorrection.tilt, cleanCorrection.pan, cleanCorrection.roll, \"YXZ\");\n  }\n  /**\n   * Applies a SphereCorrection to a Group\n   * @internal\n   */\n  setSphereCorrection(sphereCorrection, group = this.meshContainer) {\n    const cleanCorrection = this.viewer.dataHelper.cleanSphereCorrection(sphereCorrection);\n    group.rotation.set(cleanCorrection.tilt, cleanCorrection.pan, cleanCorrection.roll, \"YXZ\");\n  }\n  /**\n   * Performs transition between the current and a new texture\n   * @internal\n   */\n  transition(textureData, options, transition) {\n    const zoomTransition = transition.effect === \"fade\" || transition.rotation;\n    const positionProvided = !isNil(options.position);\n    const zoomProvided = !isNil(options.zoom);\n    const e = new BeforeAnimateEvent(positionProvided ? this.viewer.dataHelper.cleanPosition(options.position) : void 0, options.zoom);\n    this.viewer.dispatchEvent(e);\n    const tempContainer = new Group();\n    const newMesh = this.viewer.adapter.createMesh(textureData.panoData);\n    this.viewer.adapter.setTexture(newMesh, textureData, true);\n    this.viewer.adapter.setTextureOpacity(newMesh, 0);\n    this.setPanoramaPose(textureData.panoData, newMesh);\n    this.setSphereCorrection(options.sphereCorrection, tempContainer);\n    if (positionProvided && !transition.rotation) {\n      const currentPosition = this.viewer.getPosition();\n      const verticalAxis = new Vector33(0, 1, 0);\n      tempContainer.rotateOnWorldAxis(verticalAxis, e.position.yaw - currentPosition.yaw);\n      const horizontalAxis = new Vector33(0, 1, 0).cross(this.camera.getWorldDirection(new Vector33())).normalize();\n      tempContainer.rotateOnWorldAxis(horizontalAxis, e.position.pitch - currentPosition.pitch);\n    }\n    tempContainer.add(newMesh);\n    this.scene.add(tempContainer);\n    this.renderer.setRenderTarget(new WebGLRenderTarget());\n    this.renderer.render(this.scene, this.camera);\n    this.renderer.setRenderTarget(null);\n    const {\n      duration,\n      properties\n    } = this.viewer.dataHelper.getAnimationProperties(transition.speed, transition.rotation ? e.position : null, zoomTransition ? e.zoomLevel : null);\n    const animation = new Animation({\n      properties: {\n        ...properties,\n        opacity: {\n          start: 0,\n          end: 1\n        }\n      },\n      duration,\n      easing: \"inOutCubic\",\n      onTick: props => {\n        switch (transition.effect) {\n          case \"fade\":\n            this.viewer.adapter.setTextureOpacity(newMesh, props.opacity);\n            break;\n          case \"black\":\n          case \"white\":\n            if (props.opacity < 0.5) {\n              this.renderer.toneMappingExposure = transition.effect === \"black\" ? MathUtils9.mapLinear(props.opacity, 0, 0.5, 1, 0) : MathUtils9.mapLinear(props.opacity, 0, 0.5, 1, 4);\n            } else {\n              this.renderer.toneMappingExposure = transition.effect === \"black\" ? MathUtils9.mapLinear(props.opacity, 0.5, 1, 0, 1) : MathUtils9.mapLinear(props.opacity, 0.5, 1, 4, 1);\n              this.mesh.visible = false;\n              this.viewer.adapter.setTextureOpacity(newMesh, 1);\n              if (zoomProvided && !zoomTransition) {\n                this.viewer.dynamics.zoom.setValue(e.zoomLevel);\n              }\n            }\n            break;\n        }\n        if (positionProvided && transition.rotation) {\n          this.viewer.dynamics.position.setValue({\n            yaw: props.yaw,\n            pitch: props.pitch\n          });\n        }\n        if (zoomProvided && zoomTransition) {\n          this.viewer.dynamics.zoom.setValue(props.zoom);\n        }\n        this.viewer.needsUpdate();\n      }\n    });\n    animation.then(completed => {\n      tempContainer.remove(newMesh);\n      this.scene.remove(tempContainer);\n      if (completed) {\n        this.viewer.adapter.disposeTexture(this.state.textureData);\n        this.meshContainer.remove(this.mesh);\n        this.viewer.adapter.disposeMesh(this.mesh);\n        this.mesh = newMesh;\n        this.meshContainer.add(newMesh);\n        this.state.textureData = textureData;\n        this.setPanoramaPose(textureData.panoData);\n        this.setSphereCorrection(options.sphereCorrection);\n        if (positionProvided && !transition.rotation) {\n          this.viewer.rotate(options.position);\n        }\n      } else {\n        this.viewer.adapter.disposeTexture(textureData);\n        this.viewer.adapter.disposeMesh(newMesh);\n      }\n    });\n    return animation;\n  }\n  /**\n   * Returns intersections with objects in the scene\n   */\n  getIntersections(viewerPoint) {\n    vector2.x = 2 * viewerPoint.x / this.state.size.width - 1;\n    vector2.y = -2 * viewerPoint.y / this.state.size.height + 1;\n    this.raycaster.setFromCamera(vector2, this.camera);\n    const intersections = this.raycaster.intersectObjects(this.scene.children, true).filter(i => i.object.visible).filter(i => i.object.isMesh && !!i.object.userData);\n    if (this.customRenderer?.getIntersections) {\n      intersections.push(...this.customRenderer.getIntersections(this.raycaster, vector2));\n    }\n    return intersections;\n  }\n  /**\n   * Checks if an object/point is currently visible\n   */\n  isObjectVisible(value) {\n    if (!value) {\n      return false;\n    }\n    if (this.frustumNeedsUpdate) {\n      matrix4.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse);\n      this.frustum.setFromProjectionMatrix(matrix4);\n      this.frustumNeedsUpdate = false;\n    }\n    if (value.isVector3) {\n      return this.frustum.containsPoint(value);\n    } else if (value.isMesh && value.geometry) {\n      const mesh = value;\n      if (!mesh.geometry.boundingBox) {\n        mesh.geometry.computeBoundingBox();\n      }\n      box3.copy(mesh.geometry.boundingBox).applyMatrix4(mesh.matrixWorld);\n      return this.frustum.intersectsBox(box3);\n    } else if (value.isObject3D) {\n      return this.frustum.intersectsObject(value);\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Adds an object to the THREE scene\n   */\n  addObject(object) {\n    this.scene.add(object);\n  }\n  /**\n   * Removes an object from the THREE scene\n   */\n  removeObject(object) {\n    this.scene.remove(object);\n  }\n  /**\n   * Calls `dispose` on all objects and textures\n   * @internal\n   */\n  cleanScene(object) {\n    const disposeMaterial = material => {\n      material.map?.dispose();\n      if (material.uniforms) {\n        Object.values(material.uniforms).forEach(uniform => {\n          uniform.value?.dispose?.();\n        });\n      }\n      material.dispose();\n    };\n    object.traverse(item => {\n      item.geometry?.dispose();\n      if (item.material) {\n        if (Array.isArray(item.material)) {\n          item.material.forEach(material => {\n            disposeMaterial(material);\n          });\n        } else {\n          disposeMaterial(item.material);\n        }\n      }\n      if (!(item instanceof Scene)) {\n        item.dispose?.();\n      }\n      if (item !== object) {\n        this.cleanScene(item);\n      }\n    });\n  }\n};\n\n// src/lib/BlobLoader.ts\nimport { Loader as Loader2 } from \"three\";\nvar BlobLoader = class extends Loader2 {\n  // @ts-ignore\n  load(url, onLoad, onProgress, onError, abortSignal) {\n    const req = new Request(url, {\n      headers: new Headers(this.requestHeader),\n      credentials: this.withCredentials ? \"include\" : \"same-origin\"\n    });\n    fetch(req, {\n      signal: abortSignal\n    }).then(response => {\n      if (response.status === 200 || response.status === 0) {\n        const reader = response.body.getReader();\n        const contentLength = response.headers.get(\"Content-Length\") || response.headers.get(\"X-File-Size\");\n        const total = contentLength ? parseInt(contentLength) : 0;\n        const lengthComputable = total !== 0;\n        let loaded = 0;\n        const stream = new ReadableStream({\n          start(controller) {\n            readData();\n            function readData() {\n              reader.read().then(({\n                done,\n                value\n              }) => {\n                if (done) {\n                  controller.close();\n                } else {\n                  loaded += value.byteLength;\n                  const event = new ProgressEvent(\"progress\", {\n                    lengthComputable,\n                    loaded,\n                    total\n                  });\n                  onProgress(event);\n                  controller.enqueue(value);\n                  readData();\n                }\n              }).catch(err => {\n                onError(err);\n              });\n            }\n          }\n        });\n        return new Response(stream);\n      } else {\n        throw new Error(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`);\n      }\n    }).then(response => {\n      return response.blob();\n    }).then(data => {\n      onLoad(data);\n    }).catch(err => {\n      onError(err);\n    });\n  }\n};\n\n// src/lib/ImageLoader.ts\nimport { Loader as Loader3 } from \"three\";\nvar ImageLoader = class extends Loader3 {\n  // @ts-ignore\n  load(url, onLoad, onError, abortSignal) {\n    const image = document.createElement(\"img\");\n    function onImageLoad() {\n      removeEventListeners();\n      onLoad(this);\n    }\n    function onImageError(event) {\n      removeEventListeners();\n      if (abortSignal?.aborted) {\n        const e = new Error();\n        e.name = \"AbortError\";\n        e.message = \"The operation was aborted.\";\n        onError(e);\n      } else {\n        onError(event);\n      }\n    }\n    function onAbortSignal() {\n      image.src = \"\";\n    }\n    function removeEventListeners() {\n      image.removeEventListener(\"load\", onImageLoad, false);\n      image.removeEventListener(\"error\", onImageError, false);\n      abortSignal?.removeEventListener(\"abort\", onAbortSignal, false);\n    }\n    image.addEventListener(\"load\", onImageLoad, false);\n    image.addEventListener(\"error\", onImageError, false);\n    abortSignal?.addEventListener(\"abort\", onAbortSignal, false);\n    if (!url.startsWith(\"data:\") && this.crossOrigin !== void 0) {\n      image.crossOrigin = this.crossOrigin;\n    }\n    image.src = url;\n    return image;\n  }\n};\n\n// src/services/TextureLoader.ts\nvar TextureLoader = class extends AbstractService {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer);\n    this.abortCtrl = {};\n    this.fileLoader = new BlobLoader();\n    this.imageLoader = new ImageLoader();\n    if (this.config.withCredentials) {\n      this.fileLoader.setWithCredentials(true);\n      this.imageLoader.setCrossOrigin(\"use-credentials\");\n    }\n  }\n  /**\n   * @internal\n   */\n  destroy() {\n    this.abortLoading();\n    super.destroy();\n  }\n  /**\n   * Cancels current HTTP requests\n   * @internal\n   */\n  abortLoading() {\n    Object.values(this.abortCtrl).forEach(ctrl => ctrl.abort());\n    this.abortCtrl = {};\n  }\n  /**\n   * Loads a Blob with FileLoader\n   */\n  loadFile(url, onProgress, cacheKey) {\n    const cached = Cache.get(url, cacheKey);\n    if (cached) {\n      if (cached instanceof Blob) {\n        onProgress?.(100);\n        return Promise.resolve(cached);\n      } else {\n        Cache.remove(url, cacheKey);\n      }\n    }\n    if (this.config.requestHeaders) {\n      this.fileLoader.setRequestHeader(this.config.requestHeaders(url));\n    }\n    return new Promise((resolve, reject) => {\n      let progress = 0;\n      onProgress?.(progress);\n      this.fileLoader.load(url, result => {\n        progress = 100;\n        onProgress?.(progress);\n        Cache.add(url, cacheKey, result);\n        resolve(result);\n      }, e => {\n        if (e.lengthComputable) {\n          const newProgress = e.loaded / e.total * 100;\n          if (newProgress > progress) {\n            progress = newProgress;\n            onProgress?.(progress);\n          }\n        }\n      }, err => {\n        reject(err);\n      }, this.__getAbortSignal(cacheKey));\n    });\n  }\n  /**\n   * Loads an image with ImageLoader or with FileLoader if progress is tracked or if request headers are configured\n   */\n  loadImage(url, onProgress, cacheKey) {\n    const cached = Cache.get(url, cacheKey);\n    if (cached) {\n      onProgress?.(100);\n      if (cached instanceof Blob) {\n        return this.blobToImage(cached);\n      } else {\n        return Promise.resolve(cached);\n      }\n    }\n    if (!onProgress && !this.config.requestHeaders) {\n      return new Promise((resolve, reject) => {\n        this.imageLoader.load(url, result => {\n          Cache.add(url, cacheKey, result);\n          resolve(result);\n        }, err => {\n          reject(err);\n        }, this.__getAbortSignal(cacheKey));\n      });\n    } else {\n      return this.loadFile(url, onProgress, cacheKey).then(blob => this.blobToImage(blob));\n    }\n  }\n  /**\n   * Converts a file loaded with {@link loadFile} into an image\n   */\n  blobToImage(blob) {\n    return new Promise((resolve, reject) => {\n      const img = document.createElement(\"img\");\n      img.onload = () => {\n        URL.revokeObjectURL(img.src);\n        resolve(img);\n      };\n      img.onerror = reject;\n      img.src = URL.createObjectURL(blob);\n    });\n  }\n  /**\n   * Preload a panorama file without displaying it\n   */\n  preloadPanorama(panorama) {\n    if (this.viewer.adapter.supportsPreload(panorama)) {\n      return this.viewer.adapter.loadTexture(panorama, false);\n    } else {\n      return Promise.reject(new PSVError(\"Current adapter does not support preload\"));\n    }\n  }\n  /**\n   * @internal\n   */\n  dispatchProgress(progress) {\n    this.viewer.loader.setProgress(progress);\n    this.viewer.dispatchEvent(new LoadProgressEvent(Math.round(progress)));\n  }\n  /**\n   * Get an abort signal\n   * the signal is shared accross all requests with the same cache key (for tiles adapters)\n   */\n  __getAbortSignal(cacheKey) {\n    if (cacheKey) {\n      if (this.abortCtrl[cacheKey]?.signal.aborted) {\n        delete this.abortCtrl[cacheKey];\n      }\n      if (!this.abortCtrl[cacheKey]) {\n        this.abortCtrl[cacheKey] = new AbortController();\n      }\n      return this.abortCtrl[cacheKey].signal;\n    }\n    return null;\n  }\n};\n\n// src/services/ViewerDynamics.ts\nimport { MathUtils as MathUtils10 } from \"three\";\nvar ViewerDynamics = class extends AbstractService {\n  /**\n   * @internal\n   */\n  constructor(viewer) {\n    super(viewer);\n    this.zoom = new Dynamic(zoomLevel => {\n      this.viewer.state.vFov = this.viewer.dataHelper.zoomLevelToFov(zoomLevel);\n      this.viewer.state.hFov = this.viewer.dataHelper.vFovToHFov(this.viewer.state.vFov);\n      this.viewer.dispatchEvent(new ZoomUpdatedEvent(zoomLevel));\n    }, {\n      defaultValue: this.viewer.config.defaultZoomLvl,\n      min: 0,\n      max: 100,\n      wrap: false\n    });\n    this.position = new MultiDynamic(position => {\n      this.viewer.dataHelper.sphericalCoordsToVector3(position, this.viewer.state.direction);\n      this.viewer.dispatchEvent(new PositionUpdatedEvent(position));\n    }, {\n      yaw: new Dynamic(null, {\n        defaultValue: this.config.defaultYaw,\n        min: 0,\n        max: 2 * Math.PI,\n        wrap: true\n      }),\n      pitch: new Dynamic(null, {\n        defaultValue: this.config.defaultPitch,\n        min: -Math.PI / 2,\n        max: Math.PI / 2,\n        wrap: false\n      })\n    });\n    this.roll = new Dynamic(roll => {\n      this.viewer.state.roll = roll;\n      this.viewer.dispatchEvent(new RollUpdatedEvent(roll));\n    }, {\n      defaultValue: 0,\n      min: -Math.PI,\n      max: Math.PI,\n      wrap: false\n    });\n    this.updateSpeeds();\n  }\n  /**\n   * @internal\n   */\n  updateSpeeds() {\n    this.zoom.setSpeed(this.config.zoomSpeed * 50);\n    this.position.setSpeed(MathUtils10.degToRad(this.config.moveSpeed * 50));\n    this.roll.setSpeed(MathUtils10.degToRad(this.config.moveSpeed * 50));\n  }\n  /**\n   * @internal\n   */\n  update(elapsed) {\n    this.zoom.update(elapsed);\n    this.position.update(elapsed);\n    this.roll.update(elapsed);\n  }\n};\n\n// src/services/ViewerState.ts\nimport { Vector3 as Vector34 } from \"three\";\nvar ViewerState = class {\n  /**\n   * @internal\n   */\n  // eslint-disable-next-line  @typescript-eslint/no-empty-function\n  constructor() {\n    /**\n     * when all components are loaded\n     */\n    this.ready = false;\n    /**\n     * if the view needs to be renderer\n     */\n    this.needsUpdate = false;\n    /**\n     * number of plugins requesting to continuously render the scene\n     */\n    this.continuousUpdateCount = 0;\n    /**\n     * if the keyboard events are currently listened to\n     */\n    this.keyboardEnabled = false;\n    /**\n     * direction of the camera\n     */\n    this.direction = new Vector34(0, 0, SPHERE_RADIUS);\n    /**\n     * current camera roll\n     */\n    this.roll = 0;\n    /**\n     * vertical FOV\n     */\n    this.vFov = 60;\n    /**\n     * horizontal FOV\n     */\n    this.hFov = 60;\n    /**\n     * renderer aspect ratio\n     */\n    this.aspect = 1;\n    /**\n     * currently running animation\n     */\n    this.animation = null;\n    /**\n     * currently running transition\n     */\n    this.transitionAnimation = null;\n    /**\n     * promise of the last \"setPanorama()\" call\n     */\n    this.loadingPromise = null;\n    /**\n     * time of the last user action\n     */\n    this.idleTime = -1;\n    /**\n     * registered THREE objects observer\n     */\n    this.objectsObservers = {};\n    /**\n     * size of the container\n     */\n    this.size = {\n      width: 0,\n      height: 0\n    };\n  }\n};\n\n// src/Viewer.ts\nvar Viewer = class extends TypedEventTarget {\n  constructor(config) {\n    super();\n    /** @internal */\n    this.plugins = {};\n    /** @internal */\n    this.children = [];\n    this.parent = getElement(config.container);\n    if (!this.parent) {\n      throw new PSVError(`\"container\" element not found.`);\n    }\n    this.parent[VIEWER_DATA] = this;\n    this.container = document.createElement(\"div\");\n    this.container.classList.add(\"psv-container\");\n    this.parent.appendChild(this.container);\n    checkClosedShadowDom(this.parent);\n    checkStylesheet(this.container, \"core\");\n    this.state = new ViewerState();\n    this.config = getViewerConfig(config);\n    this.__setSize(this.config.size);\n    this.overlay = new Overlay(this);\n    try {\n      SYSTEM.load();\n    } catch (err) {\n      console.error(err);\n      this.showError(this.config.lang.webglError);\n      return;\n    }\n    Cache.init();\n    this.adapter = new this.config.adapter[0](this, this.config.adapter[1]);\n    this.renderer = new Renderer(this);\n    this.textureLoader = new TextureLoader(this);\n    this.eventsHandler = new EventsHandler(this);\n    this.dataHelper = new DataHelper(this);\n    this.dynamics = new ViewerDynamics(this);\n    this.adapter.init?.();\n    this.loader = new Loader(this);\n    this.navbar = new Navbar(this);\n    this.panel = new Panel(this);\n    this.notification = new Notification(this);\n    this.autoSize();\n    this.setCursor(null);\n    resolveBoolean(SYSTEM.isTouchEnabled, enabled => {\n      toggleClass(this.container, \"psv--is-touch\", enabled);\n    });\n    this.config.plugins.forEach(([plugin, opts]) => {\n      this.plugins[plugin.id] = new plugin(this, opts);\n    });\n    for (const plugin of Object.values(this.plugins)) {\n      plugin.init?.();\n    }\n    if (this.config.navbar) {\n      this.navbar.setButtons(this.config.navbar);\n    }\n    if (!this.state.loadingPromise) {\n      if (this.config.panorama) {\n        this.setPanorama(this.config.panorama, {\n          sphereCorrection: this.config.sphereCorrection,\n          panoData: this.config.panoData\n        });\n      } else {\n        this.loader.show();\n      }\n    }\n  }\n  /**\n   * Destroys the viewer\n   */\n  destroy() {\n    this.stopAll();\n    this.stopKeyboardControl();\n    this.exitFullscreen();\n    for (const [id, plugin] of Object.entries(this.plugins)) {\n      plugin.destroy();\n      delete this.plugins[id];\n    }\n    this.children.slice().forEach(child => child.destroy());\n    this.children.length = 0;\n    this.eventsHandler?.destroy();\n    this.renderer?.destroy();\n    this.textureLoader?.destroy();\n    this.dataHelper?.destroy();\n    this.adapter?.destroy();\n    this.dynamics?.destroy();\n    this.parent.removeChild(this.container);\n    delete this.parent[VIEWER_DATA];\n  }\n  init() {\n    this.eventsHandler.init();\n    this.renderer.init();\n    if (this.config.navbar) {\n      this.navbar.show();\n    }\n    if (this.config.keyboard === \"always\") {\n      this.startKeyboardControl();\n    }\n    this.resetIdleTimer();\n    this.state.ready = true;\n    this.dispatchEvent(new ReadyEvent());\n  }\n  /**\n   * Restarts the idle timer\n   * @internal\n   */\n  resetIdleTimer() {\n    this.state.idleTime = performance.now();\n  }\n  /**\n   * Stops the idle timer\n   * @internal\n   */\n  disableIdleTimer() {\n    this.state.idleTime = -1;\n  }\n  /**\n   * Returns the instance of a plugin if it exists\n   * @example By plugin identifier\n   * ```js\n   * viewer.getPlugin('markers')\n   * ```\n   * @example By plugin class with TypeScript support\n   * ```ts\n   * viewer.getPlugin<MarkersPlugin>(MarkersPlugin)\n   * ```\n   */\n  getPlugin(pluginId) {\n    if (typeof pluginId === \"string\") {\n      return this.plugins[pluginId];\n    } else {\n      const pluginCtor = pluginInterop(pluginId);\n      return pluginCtor ? this.plugins[pluginCtor.id] : null;\n    }\n  }\n  /**\n   * Returns the current position of the camera\n   */\n  getPosition() {\n    return this.dataHelper.cleanPosition(this.dynamics.position.current);\n  }\n  /**\n   * Returns the current zoom level\n   */\n  getZoomLevel() {\n    return this.dynamics.zoom.current;\n  }\n  /**\n   * Returns the current viewer size\n   */\n  getSize() {\n    return {\n      ...this.state.size\n    };\n  }\n  /**\n   * Checks if the viewer is in fullscreen\n   */\n  isFullscreenEnabled() {\n    return isFullscreenEnabled(this.parent, SYSTEM.isIphone);\n  }\n  /**\n   * Request a new render of the scene\n   */\n  needsUpdate() {\n    this.state.needsUpdate = true;\n  }\n  /**\n   * Request the scene to be continuously renderer (when using videos)\n   */\n  needsContinuousUpdate(enabled) {\n    if (enabled) {\n      this.state.continuousUpdateCount++;\n    } else if (this.state.continuousUpdateCount > 0) {\n      this.state.continuousUpdateCount--;\n    }\n  }\n  /**\n   * Resizes the scene if the viewer is resized\n   */\n  autoSize() {\n    if (this.container.clientWidth !== this.state.size.width || this.container.clientHeight !== this.state.size.height) {\n      this.state.size.width = Math.round(this.container.clientWidth);\n      this.state.size.height = Math.round(this.container.clientHeight);\n      this.state.aspect = this.state.size.width / this.state.size.height;\n      this.state.hFov = this.dataHelper.vFovToHFov(this.state.vFov);\n      this.dispatchEvent(new SizeUpdatedEvent(this.getSize()));\n      this.navbar.autoSize();\n    }\n  }\n  /**\n   * Loads a new panorama file\n   * Loads a new panorama file, optionally changing the camera position/zoom and activating the transition animation.<br>\n   * If the \"options\" parameter is not defined, the camera will not move and the ongoing animation will continue.<br>\n   * If another loading is already in progress it will be aborted.\n   * @returns promise resolved with false if the loading was aborted by another call\n   */\n  setPanorama(path, options = {}) {\n    this.textureLoader.abortLoading();\n    this.state.transitionAnimation?.cancel();\n    const transition = this.dataHelper.getTransitionOptions(options);\n    if (options.showLoader === void 0) {\n      options.showLoader = true;\n    }\n    if (options.caption === void 0) {\n      options.caption = this.config.caption;\n    }\n    if (options.description === void 0) {\n      options.description = this.config.description;\n    }\n    if (!options.panoData && typeof this.config.panoData === \"function\") {\n      options.panoData = this.config.panoData;\n    }\n    this.hideError();\n    this.resetIdleTimer();\n    this.config.panorama = path;\n    this.config.caption = options.caption;\n    this.config.description = options.description;\n    this.config.sphereCorrection = options.sphereCorrection;\n    const done = err => {\n      if (isAbortError(err)) {\n        return false;\n      }\n      this.loader.hide();\n      this.state.loadingPromise = null;\n      if (err) {\n        this.navbar.setCaption(null);\n        this.showError(this.config.lang.loadError);\n        console.error(err);\n        this.dispatchEvent(new PanoramaErrorEvent(path, err));\n        throw err;\n      } else {\n        this.navbar.setCaption(this.config.caption);\n        return true;\n      }\n    };\n    this.navbar.setCaption(`<em>${this.config.lang.loading}</em>`);\n    if (options.showLoader || !this.state.ready) {\n      this.loader.show();\n    }\n    this.dispatchEvent(new PanoramaLoadEvent(path));\n    const loadingPromise = this.adapter.loadTexture(this.config.panorama, true, options.panoData).then(textureData => {\n      if (textureData.panorama !== this.config.panorama) {\n        this.adapter.disposeTexture(textureData);\n        throw getAbortError();\n      }\n      const cleanOptions = this.dataHelper.cleanPanoramaOptions(options, textureData.panoData);\n      if (!isNil(cleanOptions.zoom) || !isNil(cleanOptions.position)) {\n        this.stopAll();\n      }\n      return {\n        textureData,\n        cleanOptions\n      };\n    });\n    if (!transition || !this.state.ready || !this.adapter.supportsTransition(this.config.panorama)) {\n      this.state.loadingPromise = loadingPromise.then(({\n        textureData,\n        cleanOptions\n      }) => {\n        this.renderer.show();\n        this.renderer.setTexture(textureData);\n        this.renderer.setPanoramaPose(textureData.panoData);\n        this.renderer.setSphereCorrection(options.sphereCorrection);\n        if (!this.state.ready) {\n          this.init();\n        }\n        this.dispatchEvent(new PanoramaLoadedEvent(textureData));\n        if (!isNil(cleanOptions.zoom)) {\n          this.zoom(cleanOptions.zoom);\n        }\n        if (!isNil(cleanOptions.position)) {\n          this.rotate(cleanOptions.position);\n        }\n      }).then(() => done(), err => done(err));\n    } else {\n      this.state.loadingPromise = loadingPromise.then(({\n        textureData,\n        cleanOptions\n      }) => {\n        this.loader.hide();\n        this.dispatchEvent(new PanoramaLoadedEvent(textureData));\n        this.state.transitionAnimation = this.renderer.transition(textureData, cleanOptions, transition);\n        return this.state.transitionAnimation;\n      }).then(completed => {\n        this.state.transitionAnimation = null;\n        this.dispatchEvent(new TransitionDoneEvent(completed));\n        if (!completed) {\n          throw getAbortError();\n        }\n      }).then(() => done(), err => done(err));\n    }\n    return this.state.loadingPromise;\n  }\n  /**\n   * Update options\n   * @throws {@link PSVError} if the configuration is invalid\n   */\n  setOptions(options) {\n    const rawConfig = {\n      ...this.config,\n      ...options\n    };\n    for (let [key, value] of Object.entries(options)) {\n      if (!(key in DEFAULTS)) {\n        logWarn(`Unknown option ${key}`);\n        continue;\n      }\n      if (key in READONLY_OPTIONS) {\n        logWarn(READONLY_OPTIONS[key]);\n        continue;\n      }\n      if (key in CONFIG_PARSERS) {\n        value = CONFIG_PARSERS[key](value, {\n          rawConfig,\n          defValue: DEFAULTS[key]\n        });\n      }\n      this.config[key] = value;\n      switch (key) {\n        case \"mousemove\":\n          if (!this.state.cursorOverride) {\n            this.setCursor(null);\n          }\n          break;\n        case \"caption\":\n          this.navbar.setCaption(this.config.caption);\n          break;\n        case \"size\":\n          this.resize(this.config.size);\n          break;\n        case \"sphereCorrection\":\n          this.renderer.setSphereCorrection(this.config.sphereCorrection);\n          break;\n        case \"navbar\":\n        case \"lang\":\n          this.navbar.setButtons(this.config.navbar);\n          break;\n        case \"moveSpeed\":\n        case \"zoomSpeed\":\n          this.dynamics.updateSpeeds();\n          break;\n        case \"minFov\":\n        case \"maxFov\":\n          this.dynamics.zoom.setValue(this.dataHelper.fovToZoomLevel(this.state.vFov));\n          this.dispatchEvent(new ZoomUpdatedEvent(this.getZoomLevel()));\n          break;\n        case \"keyboard\":\n          if (this.config.keyboard === \"always\") {\n            this.startKeyboardControl();\n          } else {\n            this.stopKeyboardControl();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    this.needsUpdate();\n    this.dispatchEvent(new ConfigChangedEvent(Object.keys(options)));\n  }\n  /**\n   * Update options\n   * @throws {@link PSVError} if the configuration is invalid\n   */\n  setOption(option, value) {\n    this.setOptions({\n      [option]: value\n    });\n  }\n  /**\n   * Displays an error message over the viewer\n   */\n  showError(message) {\n    this.overlay.show({\n      id: IDS.ERROR,\n      image: error_default,\n      title: message,\n      dismissible: false\n    });\n  }\n  /**\n   *  Hides the error message\n   */\n  hideError() {\n    this.overlay.hide(IDS.ERROR);\n  }\n  /**\n   * Rotates the view to specific position\n   */\n  rotate(position) {\n    const e = new BeforeRotateEvent(this.dataHelper.cleanPosition(position));\n    this.dispatchEvent(e);\n    if (e.defaultPrevented) {\n      return;\n    }\n    this.dynamics.position.setValue(e.position);\n  }\n  /**\n   * Zooms to a specific level between `maxFov` and `minFov`\n   */\n  zoom(level) {\n    this.dynamics.zoom.setValue(level);\n  }\n  /**\n   * Increases the zoom level\n   */\n  zoomIn(step = 1) {\n    this.dynamics.zoom.step(step);\n  }\n  /**\n   * Decreases the zoom level\n   */\n  zoomOut(step = 1) {\n    this.dynamics.zoom.step(-step);\n  }\n  /**\n   * Rotates and zooms the view with a smooth animation\n   */\n  animate(options) {\n    const positionProvided = isExtendedPosition(options);\n    const zoomProvided = !isNil(options.zoom);\n    const e = new BeforeAnimateEvent(positionProvided ? this.dataHelper.cleanPosition(options) : void 0, options.zoom);\n    this.dispatchEvent(e);\n    if (e.defaultPrevented) {\n      return;\n    }\n    this.stopAll();\n    const {\n      duration,\n      properties\n    } = this.dataHelper.getAnimationProperties(options.speed, e.position, e.zoomLevel);\n    if (!duration) {\n      if (positionProvided) {\n        this.rotate(e.position);\n      }\n      if (zoomProvided) {\n        this.zoom(e.zoomLevel);\n      }\n      return new Animation(null);\n    }\n    this.state.animation = new Animation({\n      properties,\n      duration,\n      easing: options.easing || \"inOutSine\",\n      onTick: props => {\n        if (positionProvided) {\n          this.dynamics.position.setValue({\n            yaw: props.yaw,\n            pitch: props.pitch\n          });\n        }\n        if (zoomProvided) {\n          this.dynamics.zoom.setValue(props.zoom);\n        }\n      }\n    });\n    this.state.animation.then(() => {\n      this.state.animation = null;\n      this.resetIdleTimer();\n    });\n    return this.state.animation;\n  }\n  /**\n   * Stops the ongoing animation\n   * The return value is a Promise because the is no guaranty the animation can be stopped synchronously.\n   */\n  stopAnimation() {\n    if (this.state.animation) {\n      this.state.animation.cancel();\n      return this.state.animation;\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Resizes the viewer\n   */\n  resize(size) {\n    this.__setSize(size);\n    this.autoSize();\n  }\n  __setSize(size) {\n    [\"width\", \"height\"].forEach(dim => {\n      if (size?.[dim]) {\n        if (/^[0-9.]+$/.test(size[dim])) {\n          size[dim] += \"px\";\n        }\n        this.parent.style[dim] = size[dim];\n      }\n    });\n  }\n  /**\n   * Enters the fullscreen mode\n   */\n  enterFullscreen() {\n    if (!this.isFullscreenEnabled()) {\n      requestFullscreen(this.parent, SYSTEM.isIphone);\n    }\n  }\n  /**\n   * Exits the fullscreen mode\n   */\n  exitFullscreen() {\n    if (this.isFullscreenEnabled()) {\n      exitFullscreen(SYSTEM.isIphone);\n    }\n  }\n  /**\n   * Enters or exits the fullscreen mode\n   */\n  toggleFullscreen() {\n    if (!this.isFullscreenEnabled()) {\n      this.enterFullscreen();\n    } else {\n      this.exitFullscreen();\n    }\n  }\n  /**\n   * Enables the keyboard controls\n   */\n  startKeyboardControl() {\n    this.state.keyboardEnabled = true;\n  }\n  /**\n   * Disables the keyboard controls\n   */\n  stopKeyboardControl() {\n    this.state.keyboardEnabled = false;\n  }\n  /**\n   * Creates a new tooltip\n   * Use {@link Tooltip.move} to update the tooltip without re-create\n   * @throws {@link PSVError} if the configuration is invalid\n   */\n  createTooltip(config) {\n    return new Tooltip(this, config);\n  }\n  /**\n   * Changes the global mouse cursor\n   */\n  setCursor(cursor) {\n    this.state.cursorOverride = cursor;\n    if (!cursor) {\n      this.container.style.cursor = this.config.mousemove ? \"move\" : \"default\";\n    } else {\n      this.container.style.cursor = cursor;\n    }\n  }\n  /**\n   * Subscribes to events on objects in the three.js scene\n   * @param userDataKey - only objects with the following `userData` will be observed\n   */\n  observeObjects(userDataKey) {\n    if (!this.state.objectsObservers[userDataKey]) {\n      this.state.objectsObservers[userDataKey] = null;\n    }\n  }\n  /**\n   * Unsubscribes to events on objects\n   */\n  unobserveObjects(userDataKey) {\n    delete this.state.objectsObservers[userDataKey];\n  }\n  /**\n   * Stops all current animations\n   * @internal\n   */\n  stopAll() {\n    this.dispatchEvent(new StopAllEvent());\n    this.disableIdleTimer();\n    return this.stopAnimation();\n  }\n};\n\n// src/index.ts\nvar VERSION = \"5.13.2\";\nexport { AbstractAdapter, AbstractButton, AbstractComponent, AbstractConfigurablePlugin, AbstractPlugin, constants_exports as CONSTANTS, Cache, DEFAULTS, DualFisheyeAdapter, EquirectangularAdapter, PSVError, SYSTEM, TypedEvent, VERSION, Viewer, events_exports as events, registerButton, utils_exports as utils };","map":{"version":3,"names":["constants_exports","__export","ACTIONS","ANIMATION_MIN_DURATION","CAPTURE_EVENTS_CLASS","CTRLZOOM_TIMEOUT","DBLCLICK_DELAY","EASINGS","ICONS","IDS","KEY_CODES","LONGTOUCH_DELAY","MOVE_THRESHOLD","SPHERE_RADIUS","TWOFINGERSOVERLAY_DELAY","VIEWER_DATA","arrow_default","close_default","download_default","fullscreen_in_default","fullscreen_out_default","info_default","menu_default","zoom_in_default","zoom_out_default","ACTIONS2","MENU","TWO_FINGERS","CTRL_ZOOM","ERROR","DESCRIPTION","Enter","Control","Escape","Space","PageUp","PageDown","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Delete","Plus","Minus","arrow","close","download","fullscreenIn","fullscreenOut","info","menu","zoomIn","zoomOut","linear","t","inQuad","outQuad","inOutQuad","inCubic","outCubic","inOutCubic","inQuart","outQuart","inOutQuart","inQuint","outQuint","inOutQuint","inSine","Math","cos","PI","outSine","sin","inOutSine","inExpo","pow","outExpo","inOutExpo","inCirc","sqrt","outCirc","inOutCirc","utils_exports","Animation","Dynamic","MultiDynamic","PressHandler","Slider","SliderDirection","addClasses","angle","applyEulerInverse","checkClosedShadowDom","checkStylesheet","checkVersion","cleanCssPosition","clone","createTexture","cssPositionIsOrdered","dasherize","deepEqual","deepmerge","distance","exitFullscreen","firstNonNull","getAbortError","getAngle","getClosest","getConfigParser","getElement","getEventTarget","getMatchingTarget","getPosition","getShortestArc","getStyleProperty","getTouchData","getXMPValue","greatArcDistance","hasParent","invertResolvableBoolean","isAbortError","isEmpty","isExtendedPosition","isFullscreenEnabled","isNil","isPlainObject","logWarn","mergePanoData","parseAngle","parsePoint","parseSpeed","removeClasses","requestFullscreen","resolveBoolean","speedToDuration","sum","throttle","toggleClass","wrap","value","max","result","array","reduce","a","b","p1","p2","x","y","atan2","from","to","candidates","candidate","newCandidate","abs","Infinity","position1","position2","acos","pitch","yaw","yaw1","pitch1","yaw2","pitch2","selector","match","document","getElementById","querySelector","element","className","active","classList","toggle","add","remove","split","filter","c","el","parent","test","parentElement","matches","e","composedPath","find","HTMLElement","SVGElement","offsetLeft","scrollLeft","clientLeft","offsetTop","scrollTop","clientTop","offsetParent","window","scrollX","scrollY","elt","varname","getComputedStyle","getPropertyValue","touches","length","clientX","clientY","center","fullscreenElement","isIphone","dispatchEvent","Event","str","replace","s","i","toLowerCase","callback","wait","paused","args","setTimeout","apply","Object","prototype","toString","call","getPrototypeOf","proto","target","src","first","merge","target2","src2","Array","isArray","forEach","keys","key","obj","constructor","val","values","obj1","obj2","isObject","prop","LinearFilter","LinearMipmapLinearFilter","MathUtils","Quaternion","Texture","PSVError","_PSVError","Error","message","reason","name","captureStackTrace","cb","initial","promise","then","res","error","err","console","warn","object","some","key1","key2","data","attr","intVal","parseInt","parseFloat","isNaN","CSS_POSITIONS","top","bottom","left","right","X_VALUES","Y_VALUES","POS_VALUES","CENTER","tokens","toLocaleLowerCase","slice","xFirst","map","token","reverse","parsed","join","allowCenter","cssOrder","indexOf","speed","speedStr","trim","speedValue","speedUnit","degToRad","angle2","zeroCenter","halfCircle","unit","clamp","img","mimaps","texture","needsUpdate","minFilter","generateMipmaps","anisotropy","quaternion","vector","euler","setFromEuler","invert","applyQuaternion","defaults","parsers","parser","userConfig","rawConfig","config","entries","defValue","version","coreVersion","ShadowRoot","mode","parentNode","width","height","newPanoData","xmpPanoData","panoData","isEquirectangular","fullWidth","fullHeight","croppedWidth","croppedHeight","croppedX","croppedY","poseHeading","posePitch","poseRoll","initialHeading","initialPitch","initialFov","round","options","easing","callbacks","resolved","cancelled","delayTimeout","animationFrame","requestAnimationFrame","__run","delay","timestamp","start","progress","duration","current","properties","end","onTick","__resolve","onFulfilled","Promise","resolve","push","cancel","clearTimeout","cancelAnimationFrame","MathUtils2","fn","speedMult","currentSpeed","__current","min","defaultValue","setSpeed","goto","position","step","setValue","roll","stop","update","elapsed","dstStop","targetSpeed","next","dynamics","dynamic","d","positions","steps","rolls","hasUpdates","time","pending","down","timeout","Date","getTime","up","now","MathUtils3","SliderDirection2","container","direction","listener","mousedown","mouseover","addEventListener","isVertical","isHorizontal","destroy","removeEventListener","handleEvent","type","stopPropagation","__onMouseDown","__onMouseEnter","__onMouseLeave","__onTouchStart","__onMouseMove","__onTouchMove","__onMouseUp","__onTouchEnd","evt","__update","touch","changedTouches","moving","boundingClientRect","getBoundingClientRect","click","cursor","events_exports","BeforeAnimateEvent","BeforeRenderEvent","BeforeRotateEvent","ClickEvent","ConfigChangedEvent","DoubleClickEvent","FullscreenEvent","HideNotificationEvent","HideOverlayEvent","HidePanelEvent","HideTooltipEvent","KeypressEvent","LoadProgressEvent","ObjectEnterEvent","ObjectEvent","ObjectHoverEvent","ObjectLeaveEvent","PanoramaErrorEvent","PanoramaLoadEvent","PanoramaLoadedEvent","PositionUpdatedEvent","ReadyEvent","RenderEvent","RollUpdatedEvent","ShowNotificationEvent","ShowOverlayEvent","ShowPanelEvent","ShowTooltipEvent","SizeUpdatedEvent","StopAllEvent","TransitionDoneEvent","ViewerEvent","ZoomUpdatedEvent","TypedEvent","cancelable","TypedEventTarget","EventTarget","_BeforeAnimateEvent","zoomLevel","_BeforeRenderEvent","_BeforeRotateEvent","_ClickEvent","_ConfigChangedEvent","containsOptions","option","includes","_DoubleClickEvent","_FullscreenEvent","fullscreenEnabled","_HideNotificationEvent","notificationId","_HideOverlayEvent","overlayId","_HidePanelEvent","panelId","_HideTooltipEvent","tooltipData","_KeypressEvent","originalEvent","_LoadProgressEvent","_PanoramaLoadEvent","panorama","_PanoramaLoadedEvent","_PanoramaErrorEvent","_TransitionDoneEvent","completed","_PositionUpdatedEvent","_RollUpdatedEvent","_ReadyEvent","_RenderEvent","_ShowNotificationEvent","_ShowOverlayEvent","_ShowPanelEvent","_ShowTooltipEvent","tooltip","_SizeUpdatedEvent","size","_StopAllEvent","_ZoomUpdatedEvent","viewerPoint","userDataKey","_ObjectEnterEvent","_ObjectLeaveEvent","_ObjectHoverEvent","AbstractAdapter","viewer","init","supportsTransition","supportsPreload","textureCoordsToSphericalCoords","point","sphericalCoordsToTextureCoords","supportsDownload","adapterInterop","adapter","p","id","VERSION","Mesh","Mesh2","MeshBasicMaterial","MeshBasicMaterial2","SphereGeometry","SphereGeometry2","MathUtils4","LOCALSTORAGE_TOUCH_SUPPORT","SYSTEM","loaded","pixelRatio","isWebGLSupported","maxTextureWidth","isTouchEnabled","__maxCanvasWidth","maxCanvasWidth","getMaxCanvasWidth","load","ctx","getWebGLCtx","devicePixelRatio","getParameter","MAX_TEXTURE_SIZE","navigator","userAgent","canvas","createElement","getContext","maxTouchPoints","localStorage","clear","listenerMouse","listenerTouch","listenerTimeoutId","listenerTimeout","maxWidth","pass","cropCanvas","cropCtx","testCanvas","testCtx","fillStyle","fillRect","drawImage","getImageData","getConfig","resolution","useXmpData","blur","isPowerOfTwo","EquirectangularAdapter","SPHERE_SEGMENTS","SPHERE_HORIZONTAL_SEGMENTS","textureX","textureY","relativeX","relativeY","relativeLong","relativeLat","loadTexture","loader","useXmpPanoData","path","reject","cleanPanorama","blob","textureLoader","loadFile","dispatchProgress","loadXMP","blobToImage","createEquirectangularTexture","cacheKey","binary","loadBlobAsString","substring","reader","FileReader","onload","onerror","readAsText","ratio","buffer","OffscreenCanvas","floor","createMesh","hStart","hLength","vStart","vLength","geometry","scale","material","depthTest","depthWrite","setTexture","mesh","textureData","setTextureOpacity","opacity","transparent","disposeTexture","dispose","disposeMesh","DualFisheyeAdapter","toNonIndexed","uvs","getAttribute","normals","count","j","index","getX","getY","z","getZ","correction","setXY","rotateX","rotateY","AbstractComponent","_AbstractComponent","children","state","visible","tagName","appendChild","removeChild","childIdx","splice","child","isVisible","hide","show","style","display","getConfig2","title","hoverScale","collapsable","tabbable","icon","iconActive","AbstractButton","navbar","enabled","supported","collapsed","__setIcon","offsetWidth","lang","tabIndex","onClick","content","innerHTML","refresh","autoSize","checkSupported","isSupported","toggleActive","disable","enable","collapse","uncollapse","CustomButton","random","customOnClick","attachViewer","disabled","DescriptionButton","closed","__close","__open","caption","getButton","captionHidden","hasDescription","description","notification","panel","DownloadButton","downloadUrl","link","href","startsWith","downloadName","pop","FullscreenButton","toggleFullscreen","BUTTON_DATA","MENU_TEMPLATE","buttons","button","MenuButton","__hideMenu","__showMenu","noMargin","clickHandler","li","buttonId","dataset","getIcon","AbstractMoveButton","handler","dynamicRoll","stopAll","resetIdleTimer","groupId","MoveDownButton","MoveLeftButton","MoveRightButton","MoveUpButton","AbstractZoomButton","zoom","ZoomInButton","ZoomOutButton","ZoomRangeButton","zoomRange","zoomValue","slider","__onSliderUpdate","mediaMinWidth","ready","__moveZoomValue","getZoomLevel","level","MathUtils5","AbstractPlugin","AbstractConfigurablePlugin","configParser","setOption","setOptions","ctor","readonly","readonlyOptions","pluginInterop","plugin","DEFAULTS","plugins","loadingImg","loadingTxt","fisheye","minFov","maxFov","defaultZoomLvl","defaultYaw","defaultPitch","sphereCorrection","moveSpeed","zoomSpeed","moveInertia","mousewheel","mousemove","mousewheelCtrlKey","touchmoveTwoFingers","requestHeaders","canvasBackground","defaultTransition","rotation","effect","rendererParameters","alpha","antialias","withCredentials","moveUp","moveDown","moveLeft","moveRight","fullscreen","loading","twoFingers","ctrlZoom","loadError","webglError","keyboard","keyboardActions","READONLY_OPTIONS","CONFIG_PARSERS","getViewerConfig","NavbarCaption","contentWidth","contentElt","setCaption","html","__refreshButton","AVAILABLE_BUTTONS","AVAILABLE_GROUPS","registerButton","defaultPosition","unshift","pos","idx","btn","Navbar","setButtons","item","buttonCtor","warnNotFound","focusButton","firstElementChild","focus","availableWidth","totalWidth","collapsableButtons","Cache","ThreeCache","maxItems","ttl","items","purgeInterval","setInterval","purge","url","files","lastAccess","get","sort","MathUtils6","Loader","createElementNS","setAttribute","textColor","color","border","thickness","halfSize","__updateContent","setProgress","startX","startY","radius","endX","endY","largeArc","setAttributeNS","showUndefined","inner","maxHeight","Notification","contentId","Overlay","dismissible","image","text","preventDefault","PANEL_MIN_WIDTH","PANEL_CLASS_NO_INTERACTION","Panel","mouseX","mouseY","keyHandler","resizer","closeBtn","__onKeyPress","wasVisible","__startResize","__resize","Tooltip","hideTimeout","__onTransitionEnd","assign","__waitImages","rect","move","box","posClass","arrowTop","arrowLeft","__computeTooltipPosition","swapY","swapX","ordered","newPos","propertyName","offsetSide","offsetX","offsetY","images","querySelectorAll","promises","complete","all","error_default","Euler","Euler2","MathUtils7","Vector3","Vector32","AbstractService","vector3","EULER_ZERO","DataHelper","fovToZoomLevel","fov","temp","zoomLevelToFov","vFovToHFov","vFov","radToDeg","atan","tan","aspect","hFovToVFov","hFov","getAnimationProperties","targetPosition","targetZoom","positionProvided","zoomProvided","currentPosition","dYaw","currentZoom","dZoom","getTransitionOptions","transition","equals","renderer","panoramaPose","sphericalCoordsToVector3","applyEuler","vector3ToSphericalCoords","distance2","phi","theta","viewerCoordsToVector3","sphereIntersect","getIntersections","userData","viewerCoordsToSphericalCoords","vector3ToViewerCoords","vectorClone","project","camera","sphericalCoordsToViewerCoords","isPointVisible","dot","cleanPosition","cleanSphereCorrection","pan","tilt","cleanPanoramaPose","cleanPanoramaOptions","MathUtils8","gesture_default","mousewheel_default","_Step","$","IDLE","is","set","CLICK","MOVING","Step","EventsHandler","startMouseX","startMouseY","pinchDist","moveDelta","accumulatorFactor","ctrlKeyDown","dblclickData","dblclickTimeout","longtouchTimeout","twofingersTimeout","ctrlZoomTimeout","resizeObserver","ResizeObserver","moveThreshold","passive","observe","disconnect","__onKeyDown","__onKeyUp","__onFullscreenChange","__applyMoveDelta","__clearMoveDelta","__onMouseWheel","overlay","keyboardEnabled","action","ctrlKey","altKey","shiftKey","metaKey","__stopMove","__doMove","__handleObjectsEvents","__cancelLongTouch","__cancelTwoFingersOverlay","__startMoveZoom","__doMoveZoom","deltaY","delta","startKeyboardControl","stopKeyboardControl","__resetMove","touchData","event","rightclick","__moveThresholdReached","__doClick","boundingRect","viewerX","viewerY","intersections","sphereIntersection","sphericalCoords","dataHelper","objects","o","textureCoords","objectsObservers","viewerPos","emit","evtCtor","intersection","EPS","rotate","Box3","ColorManagement","Frustum","Group","LinearSRGBColorSpace","LinearToneMapping","MathUtils9","Matrix4","Mesh4","MeshBasicMaterial3","PerspectiveCamera","Raycaster","Scene","SphereGeometry3","Vector2","Vector33","WebGLRenderTarget","WebGLRenderer","vector2","matrix4","box3","Renderer","frustumNeedsUpdate","setPixelRatio","outputColorSpace","toneMapping","domElement","background","scene","matrixAutoUpdate","raycasterMesh","raycaster","frustum","meshContainer","setAnimationLoop","__renderLoop","cleanScene","__onSizeUpdated","__onZoomUpdated","__onPositionUpdated","setCustomRenderer","factory","customRenderer","setSize","updateProjectionMatrix","lookAt","copy","multiplyScalar","negate","rotateZ","updateMatrix","updateMatrixWorld","continuousUpdateCount","render","setPanoramaPose","cleanCorrection","setSphereCorrection","group","zoomTransition","tempContainer","newMesh","verticalAxis","rotateOnWorldAxis","horizontalAxis","cross","getWorldDirection","normalize","setRenderTarget","animation","props","toneMappingExposure","mapLinear","setFromCamera","intersectObjects","isMesh","isObjectVisible","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","isVector3","containsPoint","boundingBox","computeBoundingBox","applyMatrix4","matrixWorld","intersectsBox","isObject3D","intersectsObject","addObject","removeObject","disposeMaterial","uniforms","uniform","traverse","Loader2","BlobLoader","onLoad","onProgress","onError","abortSignal","req","Request","headers","Headers","requestHeader","credentials","fetch","signal","response","status","body","getReader","contentLength","total","lengthComputable","stream","ReadableStream","controller","readData","read","done","byteLength","ProgressEvent","enqueue","catch","Response","statusText","Loader3","ImageLoader","onImageLoad","removeEventListeners","onImageError","aborted","onAbortSignal","crossOrigin","TextureLoader","abortCtrl","fileLoader","imageLoader","setWithCredentials","setCrossOrigin","abortLoading","ctrl","abort","cached","Blob","setRequestHeader","newProgress","__getAbortSignal","loadImage","URL","revokeObjectURL","createObjectURL","preloadPanorama","AbortController","MathUtils10","ViewerDynamics","updateSpeeds","Vector34","ViewerState","transitionAnimation","loadingPromise","idleTime","Viewer","__setSize","showError","eventsHandler","setCursor","opts","setPanorama","performance","disableIdleTimer","getPlugin","pluginId","pluginCtor","getSize","needsContinuousUpdate","clientWidth","clientHeight","showLoader","hideError","cleanOptions","cursorOverride","resize","defaultPrevented","animate","stopAnimation","dim","enterFullscreen","createTooltip","observeObjects","unobserveObjects"],"sources":["/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/data/constants.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/arrow.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/close.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/download.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/fullscreen-in.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/fullscreen-out.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/info.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/menu.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/zoom-in.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/zoom-out.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/index.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/math.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/browser.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/misc.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/psv.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/PSVError.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/Animation.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/Dynamic.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/MultiDynamic.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/PressHandler.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/utils/Slider.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/events.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/lib/TypedEventTarget.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/adapters/AbstractAdapter.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/adapters/DualFisheyeAdapter.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/adapters/EquirectangularAdapter.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/data/system.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/AbstractComponent.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/AbstractButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/CustomButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/DescriptionButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/DownloadButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/FullscreenButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/MenuButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/AbstractMoveButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/MoveDownButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/MoveLeftButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/MoveRightButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/MoveUpButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/AbstractZoomButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/ZoomInButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/ZoomOutButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/buttons/ZoomRangeButton.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/data/config.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/plugins/AbstractPlugin.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/NavbarCaption.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/Navbar.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/data/cache.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/Loader.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/Notification.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/Overlay.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/Panel.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/components/Tooltip.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/error.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/services/DataHelper.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/services/AbstractService.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/services/EventsHandler.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/gesture.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/icons/mousewheel.svg","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/services/Renderer.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/lib/BlobLoader.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/lib/ImageLoader.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/services/TextureLoader.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/services/ViewerDynamics.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/services/ViewerState.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/Viewer.ts","/Users/stan/Downloads/360_proto.html/node_modules/@photo-sphere-viewer/core/src/index.ts"],"sourcesContent":["import arrow from '../icons/arrow.svg';\nimport close from '../icons/close.svg';\nimport download from '../icons/download.svg';\nimport fullscreenIn from '../icons/fullscreen-in.svg';\nimport fullscreenOut from '../icons/fullscreen-out.svg';\nimport info from '../icons/info.svg';\nimport menu from '../icons/menu.svg';\nimport zoomIn from '../icons/zoom-in.svg';\nimport zoomOut from '../icons/zoom-out.svg';\n\n/**\n *  Minimum duration of the animations created with {@link Viewer#animate}\n */\nexport const ANIMATION_MIN_DURATION = 500;\n\n/**\n * Number of pixels below which a mouse move will be considered as a click\n */\nexport const MOVE_THRESHOLD = 4;\n\n/**\n * Delay in milliseconds between two clicks to consider a double click\n */\nexport const DBLCLICK_DELAY = 300;\n\n/**\n * Delay in milliseconds to emulate a long touch\n */\nexport const LONGTOUCH_DELAY = 500;\n\n/**\n * Delay in milliseconds to for the two fingers overlay to appear\n */\nexport const TWOFINGERSOVERLAY_DELAY = 100;\n\n/**\n * Duration in milliseconds of the \"ctrl zoom\" overlay\n */\nexport const CTRLZOOM_TIMEOUT = 2000;\n\n/**\n * Radius of the SphereGeometry, Half-length of the BoxGeometry\n */\nexport const SPHERE_RADIUS = 10;\n\n/**\n * Property name added to viewer element\n */\nexport const VIEWER_DATA = 'photoSphereViewer';\n\n/**\n * CSS class that must be applied on elements whose mouse events must not bubble to the viewer itself\n */\nexport const CAPTURE_EVENTS_CLASS = 'psv--capture-event';\n\n/**\n * Actions available for {@link ViewerConfig['keyboardActions']} configuration\n */\nexport enum ACTIONS {\n    ROTATE_UP = 'ROTATE_UP',\n    ROTATE_DOWN = 'ROTATE_DOWN',\n    ROTATE_RIGHT = 'ROTATE_RIGHT',\n    ROTATE_LEFT = 'ROTATE_LEFT',\n    ZOOM_IN = 'ZOOM_IN',\n    ZOOM_OUT = 'ZOOM_OUT',\n}\n\n/**\n * Internal identifiers for various stuff\n * @internal\n */\nexport const IDS = {\n    MENU: 'menu',\n    TWO_FINGERS: 'twoFingers',\n    CTRL_ZOOM: 'ctrlZoom',\n    ERROR: 'error',\n    DESCRIPTION: 'description',\n};\n\n/**\n * Subset of keyboard codes\n */\nexport const KEY_CODES = {\n    Enter: 'Enter',\n    Control: 'Control',\n    Escape: 'Escape',\n    Space: ' ',\n    PageUp: 'PageUp',\n    PageDown: 'PageDown',\n    ArrowLeft: 'ArrowLeft',\n    ArrowUp: 'ArrowUp',\n    ArrowRight: 'ArrowRight',\n    ArrowDown: 'ArrowDown',\n    Delete: 'Delete',\n    Plus: '+',\n    Minus: '-',\n};\n\n/**\n * Collection of SVG icons\n */\nexport const ICONS = {\n    arrow,\n    close,\n    download,\n    fullscreenIn,\n    fullscreenOut,\n    info,\n    menu,\n    zoomIn,\n    zoomOut,\n};\n\n/**\n * Collection of easing functions\n * @see https://gist.github.com/frederickk/6165768\n */\nexport const EASINGS: Record<string, (t: number) => number> = {\n    linear: (t: number) => t,\n\n    inQuad: (t: number) => t * t,\n    outQuad: (t: number) => t * (2 - t),\n    inOutQuad: (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n\n    inCubic: (t: number) => t * t * t,\n    outCubic: (t: number) => --t * t * t + 1,\n    inOutCubic: (t: number) => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1),\n\n    inQuart: (t: number) => t * t * t * t,\n    outQuart: (t: number) => 1 - --t * t * t * t,\n    inOutQuart: (t: number) => (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t),\n\n    inQuint: (t: number) => t * t * t * t * t,\n    outQuint: (t: number) => 1 + --t * t * t * t * t,\n    inOutQuint: (t: number) => (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t),\n\n    inSine: (t: number) => 1 - Math.cos(t * (Math.PI / 2)),\n    outSine: (t: number) => Math.sin(t * (Math.PI / 2)),\n    inOutSine: (t: number) => 0.5 - 0.5 * Math.cos(Math.PI * t),\n\n    inExpo: (t: number) => Math.pow(2, 10 * (t - 1)),\n    outExpo: (t: number) => 1 - Math.pow(2, -10 * t),\n    inOutExpo: (t: number) => ((t = t * 2 - 1) < 0 ? 0.5 * Math.pow(2, 10 * t) : 1 - 0.5 * Math.pow(2, -10 * t)),\n\n    inCirc: (t: number) => 1 - Math.sqrt(1 - t * t),\n    outCirc: (t: number) => Math.sqrt(1 - (t - 1) * (t - 1)),\n    inOutCirc: (t: number) => (t *= 2) < 1 ? 0.5 - 0.5 * Math.sqrt(1 - t * t) : 0.5 + 0.5 * Math.sqrt(1 - (t -= 2) * t),\n};\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"40 40 432 432\"><g transform=\"rotate(0, 256, 256)\"><path fill=\"currentColor\" d=\"M425.23 210.55H227.39a5 5 0 01-3.53-8.53l56.56-56.57a45.5 45.5 0 000-64.28 45.15 45.15 0 00-32.13-13.3 45.15 45.15 0 00-32.14 13.3L41.32 256l174.83 174.83a45.15 45.15 0 0032.14 13.3 45.15 45.15 0 0032.13-13.3 45.5 45.5 0 000-64.28l-56.57-56.57a5 5 0 013.54-8.53h197.84c25.06 0 45.45-20.39 45.45-45.45s-20.4-45.45-45.45-45.45z\"/></g><!-- Created by Flatart from the Noun Project --></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><g fill=\"currentColor\" transform=\" translate(50, 50) rotate(45)\"><rect x=\"-5\" y=\"-65\" width=\"10\" height=\"130\"/><rect x=\"-65\" y=\"-5\" width=\"130\" height=\"10\"/></g></svg>","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M83.3 35.6h-17V3H32.2v32.6H16.6l33.6 32.7 33-32.7z\"/><path fill=\"currentColor\" d=\"M83.3 64.2v16.3H16.6V64.2H-.1v32.6H100V64.2H83.3z\"/><!--Created by Michael Zenaty from the Noun Project--></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M100 40H87.1V18.8h-21V6H100zM100 93.2H66V80.3h21.1v-21H100zM34 93.2H0v-34h12.9v21.1h21zM12.9 40H0V6h34v12.9H12.8z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M66 7h13v21h21v13H66zM66 60.3h34v12.9H79v21H66zM0 60.3h34v34H21V73.1H0zM21 7h13v34H0V28h21z\"/><!--Created by Garrett Knoll from the Noun Project--></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 64\"><path fill=\"currentColor\" d=\"M28.3 26.1c-1 2.6-1.9 4.8-2.6 7-2.5 7.4-5 14.7-7.2 22-1.3 4.4.5 7.2 4.3 7.8 1.3.2 2.8.2 4.2-.1 8.2-2 11.9-8.6 15.7-15.2l-2.2 2a18.8 18.8 0 0 1-7.4 5.2 2 2 0 0 1-1.6-.2c-.2-.1 0-1 0-1.4l.8-1.8L41.9 28c.5-1.4.9-3 .7-4.4-.2-2.6-3-4.4-6.3-4.4-8.8.2-15 4.5-19.5 11.8-.2.3-.2.6-.3 1.3 3.7-2.8 6.8-6.1 11.8-6.2z\"/><circle fill=\"currentColor\" cx=\"39.3\" cy=\"9.2\" r=\"8.2\"/><!--Created by Arafat Uddin from the Noun Project--></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\"><g fill=\"currentColor\"><circle r=\"10\" cx=\"20\" cy=\"20\"/><circle r=\"10\" cx=\"50\" cy=\"20\"/><circle r=\"10\" cx=\"80\" cy=\"20\"/><circle r=\"10\" cx=\"20\" cy=\"50\"/><circle r=\"10\" cx=\"50\" cy=\"50\"/><circle r=\"10\" cx=\"80\" cy=\"50\"/><circle r=\"10\" cx=\"20\" cy=\"80\"/><circle r=\"10\" cx=\"50\" cy=\"80\"/><circle r=\"10\" cx=\"80\" cy=\"80\"/></g><!-- Created by Richard Kunák from the Noun Project--></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path fill=\"currentColor\" d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path fill=\"currentColor\" d=\"M8.728 4.009H6.744v2.737H4.006V8.73h2.738v2.736h1.984V8.73h2.737V6.746H8.728z\"/><!--Created by Ryan Canning from the Noun Project--></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path fill=\"currentColor\" d=\"M14.043 12.22a7.738 7.738 0 1 0-1.823 1.822l4.985 4.985c.503.504 1.32.504 1.822 0a1.285 1.285 0 0 0 0-1.822l-4.984-4.985zm-6.305 1.043a5.527 5.527 0 1 1 0-11.053 5.527 5.527 0 0 1 0 11.053z\"/><path fill=\"currentColor\" d=\"M4.006 6.746h7.459V8.73H4.006z\"/><!--Created by Ryan Canning from the Noun Project--></svg>\n","export * from './browser';\nexport * from './math';\nexport * from './misc';\nexport * from './psv';\n\nexport * from './Animation';\nexport * from './Dynamic';\nexport * from './MultiDynamic';\nexport * from './PressHandler';\nexport * from './Slider';\n","import { Point, Position } from '../model';\n\n/**\n * Ensures a value is within 0 and `max` by wrapping max to 0\n */\nexport function wrap(value: number, max: number): number {\n    let result = value % max;\n\n    if (result < 0) {\n        result += max;\n    }\n\n    return result;\n}\n\n/**\n * Computes the sum of an array\n */\nexport function sum(array: number[]): number {\n    return array.reduce((a, b) => a + b, 0);\n}\n\n/**\n * Computes the distance between two points\n */\nexport function distance(p1: Point, p2: Point): number {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\n/**\n * Computes the angle between two points\n */\nexport function angle(p1: Point, p2: Point): number {\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x);\n}\n\n/**\n * Compute the shortest offset between two angles on a sphere\n */\nexport function getShortestArc(from: number, to: number): number {\n    const candidates = [\n        0, // direct\n        Math.PI * 2, // clock-wise cross zero\n        -Math.PI * 2, // counter-clock-wise cross zero\n    ];\n\n    return candidates.reduce((value, candidate) => {\n        const newCandidate = to - from + candidate;\n        return Math.abs(newCandidate) < Math.abs(value) ? newCandidate : value;\n    }, Infinity);\n}\n\n/**\n * Computes the angle between the current position and a target position\n */\nexport function getAngle(position1: Position, position2: Position): number {\n    return Math.acos(\n        Math.cos(position1.pitch)\n        * Math.cos(position2.pitch)\n        * Math.cos(position1.yaw - position2.yaw)\n        + Math.sin(position1.pitch)\n        * Math.sin(position2.pitch),\n    );\n}\n\n/**\n * Returns the distance between two points on a sphere of radius one\n * @see http://www.movable-type.co.uk/scripts/latlong.html\n */\nexport function greatArcDistance([yaw1, pitch1]: [number, number], [yaw2, pitch2]: [number, number]): number {\n    // if yaw delta is > PI, apply an offset to only consider the shortest arc\n    if (yaw1 - yaw2 > Math.PI) {\n        yaw1 -= 2 * Math.PI;\n    } else if (yaw1 - yaw2 < -Math.PI) {\n        yaw1 += 2 * Math.PI;\n    }\n    const x = (yaw2 - yaw1) * Math.cos((pitch1 + pitch2) / 2);\n    const y = pitch2 - pitch1;\n    return Math.sqrt(x * x + y * y);\n}\n","import { Point } from '../model';\nimport { angle, distance } from './math';\n\n/**\n * Get an element in the page by an unknown selector\n */\nexport function getElement(selector: string | HTMLElement): HTMLElement {\n    if (typeof selector === 'string') {\n        return selector.match(/^[a-z]/i) ? document.getElementById(selector) : document.querySelector(selector);\n    } else {\n        return selector;\n    }\n}\n\n/**\n * Toggles a CSS class\n */\nexport function toggleClass(element: Element, className: string, active?: boolean) {\n    if (active === undefined) {\n        element.classList.toggle(className);\n    } else if (active) {\n        element.classList.add(className);\n    } else if (!active) {\n        element.classList.remove(className);\n    }\n}\n\n/**\n * Adds one or several CSS classes to an element\n */\nexport function addClasses(element: Element, className: string) {\n    element.classList.add(...className.split(' ').filter(c => !!c));\n}\n\n/**\n * Removes one or several CSS classes to an element\n */\nexport function removeClasses(element: Element, className: string) {\n    element.classList.remove(...className.split(' ').filter(c => !!c));\n}\n\n/**\n * Searches if an element has a particular parent at any level including itself\n */\nexport function hasParent(el: HTMLElement, parent: Element): boolean {\n    let test: HTMLElement | null = el;\n\n    do {\n        if (test === parent) {\n            return true;\n        }\n        test = test.parentElement;\n    } while (test);\n\n    return false;\n}\n\n/**\n * Gets the closest parent matching the selector (can by itself)\n */\nexport function getClosest(el: HTMLElement, selector: string): HTMLElement | null {\n    // When el is document or window, the matches does not exist\n    if (!el?.matches) {\n        return null;\n    }\n\n    let test: HTMLElement | null = el;\n\n    do {\n        if (test.matches(selector)) {\n            return test;\n        }\n        test = test.parentElement;\n    } while (test);\n\n    return null;\n}\n\n/**\n * Returns the first element of the event' composedPath\n */\nexport function getEventTarget(e: Event): HTMLElement | null {\n    return e?.composedPath()[0] as HTMLElement || null;\n}\n\n/**\n * Returns the first element of the event's composedPath matching the selector\n */\nexport function getMatchingTarget(e: Event, selector: string): HTMLElement | null {\n    if (!e) {\n        return null;\n    }\n    return e.composedPath().find((el) => {\n        if (!(el instanceof HTMLElement) && !(el instanceof SVGElement)) {\n            return false;\n        }\n\n        return el.matches(selector);\n    }) as HTMLElement;\n}\n\n/**\n * Gets the position of an element in the viewport without reflow\n * Will gives the same result as getBoundingClientRect() as soon as there are no CSS transforms\n */\nexport function getPosition(el: HTMLElement): Point {\n    let x = 0;\n    let y = 0;\n    let test: HTMLElement | null = el;\n\n    while (test) {\n        x += test.offsetLeft - test.scrollLeft + test.clientLeft;\n        y += test.offsetTop - test.scrollTop + test.clientTop;\n        test = test.offsetParent as HTMLElement;\n    }\n\n    x -= window.scrollX;\n    y -= window.scrollY;\n\n    return { x, y };\n}\n\n/**\n * Gets an element style value\n */\nexport function getStyleProperty(elt: Element, varname: string): string {\n    return window.getComputedStyle(elt).getPropertyValue(varname);\n}\n\nexport type TouchData = {\n    distance: number;\n    angle: number;\n    center: Point;\n};\n\n/**\n * Returns data about a touch event (first 2 fingers) : distance, angle, center\n */\nexport function getTouchData(e: TouchEvent): TouchData {\n    if (e.touches.length < 2) {\n        return null;\n    }\n\n    const p1 = { x: e.touches[0].clientX, y: e.touches[0].clientY };\n    const p2 = { x: e.touches[1].clientX, y: e.touches[1].clientY };\n\n    return {\n        distance: distance(p1, p2),\n        angle: angle(p1, p2),\n        center: { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 },\n    };\n}\n\nlet fullscreenElement: HTMLElement;\n\n/**\n * Detects if fullscreen is enabled\n */\nexport function isFullscreenEnabled(elt: HTMLElement, isIphone = false): boolean {\n    if (isIphone) {\n        return elt === fullscreenElement;\n    } else {\n        return document.fullscreenElement === elt;\n    }\n}\n\n/**\n * Enters fullscreen mode\n */\nexport function requestFullscreen(elt: HTMLElement, isIphone = false) {\n    if (isIphone) {\n        fullscreenElement = elt;\n        elt.classList.add('psv-fullscreen-emulation');\n        document.dispatchEvent(new Event('fullscreenchange'));\n    } else {\n        elt.requestFullscreen();\n    }\n}\n\n/**\n * Exits fullscreen mode\n */\nexport function exitFullscreen(isIphone = false) {\n    if (isIphone) {\n        fullscreenElement.classList.remove('psv-fullscreen-emulation');\n        fullscreenElement = null;\n        document.dispatchEvent(new Event('fullscreenchange'));\n    } else {\n        document.exitFullscreen();\n    }\n}\n","/**\n * Transforms a string to dash-case\n * @see https://github.com/shahata/dasherize\n */\nexport function dasherize(str: string): string {\n    return str.replace(/[A-Z](?:(?=[^A-Z])|[A-Z]*(?=[A-Z][^A-Z]|$))/g, (s, i) => {\n        return (i > 0 ? '-' : '') + s.toLowerCase();\n    });\n}\n\n/**\n * Returns a function, that, when invoked, will only be triggered at most once during a given window of time.\n */\nexport function throttle<T extends (...args: any) => any>(callback: T, wait: number): (...args: Parameters<T>) => void {\n    let paused = false;\n    return function (this: any, ...args: Parameters<T>) {\n        if (!paused) {\n            paused = true;\n            setTimeout(() => {\n                callback.apply(this, args);\n                paused = false;\n            }, wait);\n        }\n    };\n}\n\n/**\n * Test if an object is a plain object\n * Test if an object is a plain object, i.e. is constructed by the built-in\n * Object constructor and inherits directly from Object.prototype or null.\n * @see https://github.com/lodash/lodash/blob/master/isPlainObject.js\n */\nexport function isPlainObject<T extends Record<string, any>>(value: any): value is T {\n    if (typeof value !== 'object' || value === null || Object.prototype.toString.call(value) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n}\n\n/**\n * Merges the enumerable attributes of two objects\n * Replaces arrays and alters the target object.\n * @copyright Nicholas Fisher <nfisher110@gmail.com>\n */\nexport function deepmerge<T>(target: T, src: T): T {\n    const first = src;\n\n    return (function merge(target: any, src: any) {\n        if (Array.isArray(src)) {\n            if (!target || !Array.isArray(target)) {\n                target = [];\n            } else {\n                target.length = 0;\n            }\n            src.forEach((e, i) => {\n                target[i] = merge(null, e);\n            });\n        } else if (typeof src === 'object') {\n            if (!target || Array.isArray(target)) {\n                target = {};\n            }\n            Object.keys(src).forEach((key) => {\n                if (key === '__proto__') {\n                    return;\n                }\n                if (typeof src[key] !== 'object' || !src[key] || !isPlainObject(src[key])) {\n                    target[key] = src[key];\n                } else if (src[key] !== first) {\n                    if (!target[key]) {\n                        target[key] = merge(null, src[key]);\n                    } else {\n                        merge(target[key], src[key]);\n                    }\n                }\n            });\n        } else {\n            target = src;\n        }\n\n        return target;\n    })(target, src);\n}\n\n/**\n * Deeply clones an object\n */\nexport function clone<T>(src: T): T {\n    return deepmerge(null as T, src);\n}\n\n/**\n * Tests of an object is empty\n */\nexport function isEmpty(obj: any): boolean {\n    return !obj || (Object.keys(obj).length === 0 && obj.constructor === Object);\n}\n\n/**\n * Returns if a valu is null or undefined\n */\nexport function isNil(val: any): val is null | undefined {\n    return val === null || val === undefined;\n}\n\n/**\n * Returns the first non null non undefined parameter\n */\nexport function firstNonNull<T>(...values: T[]): T | null {\n    for (const val of values) {\n        if (!isNil(val)) {\n            return val;\n        }\n    }\n\n    return null;\n}\n\n/**\n * Returns deep equality between objects\n * @see https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9\n */\nexport function deepEqual(obj1: any, obj2: any): boolean {\n    if (obj1 === obj2) {\n        return true;\n    } else if (isObject(obj1) && isObject(obj2)) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const prop of Object.keys(obj1)) {\n            if (!deepEqual(obj1[prop], obj2[prop])) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction isObject(obj: any): boolean {\n    return typeof obj === 'object' && obj !== null;\n}\n","import { Euler, LinearFilter, LinearMipmapLinearFilter, MathUtils, Quaternion, Texture, Vector3 } from 'three';\nimport { PSVError } from '../PSVError';\nimport { ExtendedPosition, PanoData, Point, ResolvableBoolean } from '../model';\nimport { getStyleProperty } from './browser';\nimport { wrap } from './math';\nimport { clone, firstNonNull, isPlainObject } from './misc';\n\n/**\n * Executes a callback with the value of a ResolvableBoolean\n */\nexport function resolveBoolean(value: boolean | ResolvableBoolean, cb: (val: boolean, init: boolean) => void) {\n    if (isPlainObject(value)) {\n        cb((value as ResolvableBoolean).initial, true);\n        (value as ResolvableBoolean).promise.then(res => cb(res, false));\n    } else {\n        cb(value as boolean, true);\n    }\n}\n\n/**\n * Inverts the result of a ResolvableBoolean\n */\nexport function invertResolvableBoolean(value: ResolvableBoolean): ResolvableBoolean {\n    return {\n        initial: !value.initial,\n        promise: value.promise.then(res => !res),\n    };\n}\n\n/**\n * Builds an Error with name 'AbortError'\n */\nexport function getAbortError(): Error {\n    const error = new Error('Loading was aborted.');\n    error.name = 'AbortError';\n    return error;\n}\n\n/**\n * Tests if an Error has name 'AbortError'\n */\nexport function isAbortError(err: Error): boolean {\n    return err?.name === 'AbortError';\n}\n\n/**\n * Displays a warning in the console with \"PhotoSphereViewer\" prefix\n */\nexport function logWarn(message: string) {\n    console.warn(`PhotoSphereViewer: ${message}`);\n}\n\n/**\n * Checks if an object is a ExtendedPosition, ie has textureX/textureY or yaw/pitch\n */\nexport function isExtendedPosition(object: any): object is ExtendedPosition {\n    if (!object || Array.isArray(object)) {\n        return false;\n    }\n    return [\n        ['textureX', 'textureY'],\n        ['yaw', 'pitch'],\n    ].some(([key1, key2]) => {\n        return object[key1] !== undefined && object[key2] !== undefined;\n    });\n}\n\n/**\n * Returns the value of a given attribute in the panorama metadata\n */\nexport function getXMPValue(data: string, attr: string, intVal = true): number | null {\n    // XMP data are stored in children\n    let result = data.match('<GPano:' + attr + '>(.*)</GPano:' + attr + '>');\n    if (result !== null) {\n        const val = intVal ? parseInt(result[1], 10) : parseFloat(result[1]);\n        return isNaN(val) ? null : val;\n    }\n\n    // XMP data are stored in attributes\n    result = data.match('GPano:' + attr + '=\"(.*?)\"');\n    if (result !== null) {\n        const val = intVal ? parseInt(result[1], 10) : parseFloat(result[1]);\n        return isNaN(val) ? null : val;\n    }\n\n    return null;\n}\n\nconst CSS_POSITIONS: Record<string, string> = {\n    top: '0%',\n    bottom: '100%',\n    left: '0%',\n    right: '100%',\n    center: '50%',\n};\nconst X_VALUES = ['left', 'center', 'right'];\nconst Y_VALUES = ['top', 'center', 'bottom'];\nconst POS_VALUES = [...X_VALUES, ...Y_VALUES];\nconst CENTER = 'center';\n\n/**\n * Translate CSS values like \"top center\" or \"10% 50%\" as top and left positions (0-1 range)\n * The implementation is as close as possible to the \"background-position\" specification\n * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/background-position}\n */\nexport function parsePoint(value: string | Point): Point {\n    if (!value) {\n        return { x: 0.5, y: 0.5 };\n    }\n\n    if (typeof value === 'object') {\n        return value;\n    }\n\n    let tokens = value.toLocaleLowerCase().split(' ').slice(0, 2);\n\n    if (tokens.length === 1) {\n        if (CSS_POSITIONS[tokens[0]]) {\n            tokens = [tokens[0], CENTER];\n        } else {\n            tokens = [tokens[0], tokens[0]];\n        }\n    }\n\n    const xFirst = tokens[1] !== 'left' && tokens[1] !== 'right' && tokens[0] !== 'top' && tokens[0] !== 'bottom';\n\n    tokens = tokens.map(token => CSS_POSITIONS[token] || token);\n\n    if (!xFirst) {\n        tokens.reverse();\n    }\n\n    const parsed = tokens.join(' ').match(/^([0-9.]+)% ([0-9.]+)%$/);\n\n    if (parsed) {\n        return {\n            x: parseFloat(parsed[1]) / 100,\n            y: parseFloat(parsed[2]) / 100,\n        };\n    } else {\n        return { x: 0.5, y: 0.5 };\n    }\n}\n\n/**\n * Parse a CSS-like position into an array of position keywords among top, bottom, left, right and center\n * @param value\n * @param [options]\n * @param [options.allowCenter=true] allow \"center center\"\n * @param [options.cssOrder=true] force CSS order (y axis then x axis)\n */\nexport function cleanCssPosition(\n    value: string | string[],\n    { allowCenter, cssOrder } = {\n        allowCenter: true,\n        cssOrder: true,\n    },\n): [string, string] | null {\n    if (!value) {\n        return null;\n    }\n\n    if (typeof value === 'string') {\n        value = value.split(' ');\n    }\n\n    if (value.length === 1) {\n        if (value[0] === CENTER) {\n            value = [CENTER, CENTER];\n        } else if (X_VALUES.indexOf(value[0]) !== -1) {\n            value = [CENTER, value[0]];\n        } else if (Y_VALUES.indexOf(value[0]) !== -1) {\n            value = [value[0], CENTER];\n        }\n    }\n\n    if (value.length !== 2 || POS_VALUES.indexOf(value[0]) === -1 || POS_VALUES.indexOf(value[1]) === -1) {\n        logWarn(`Unparsable position ${value}`);\n        return null;\n    }\n\n    if (!allowCenter && value[0] === CENTER && value[1] === CENTER) {\n        logWarn(`Invalid position center center`);\n        return null;\n    }\n\n    if (cssOrder && !cssPositionIsOrdered(value)) {\n        value = [value[1], value[0]];\n    }\n    if (value[1] === CENTER && X_VALUES.indexOf(value[0]) !== -1) {\n        value = [CENTER, value[0]];\n    }\n    if (value[0] === CENTER && Y_VALUES.indexOf(value[1]) !== -1) {\n        value = [value[1], CENTER];\n    }\n\n    return value as [string, string];\n}\n\n/**\n * Checks if an array of two positions is ordered (y axis then x axis)\n */\nexport function cssPositionIsOrdered(value: string[]): boolean {\n    return Y_VALUES.indexOf(value[0]) !== -1 && X_VALUES.indexOf(value[1]) !== -1;\n}\n\n/**\n * Parses an speed\n * @param speed in radians/degrees/revolutions per second/minute\n * @throws {@link PSVError} when the speed cannot be parsed\n */\nexport function parseSpeed(speed: string | number): number {\n    let parsed;\n\n    if (typeof speed === 'string') {\n        const speedStr = speed.toString().trim();\n\n        // Speed extraction\n        let speedValue = parseFloat(speedStr.replace(/^(-?[0-9]+(?:\\.[0-9]*)?).*$/, '$1'));\n        const speedUnit = speedStr.replace(/^-?[0-9]+(?:\\.[0-9]*)?(.*)$/, '$1').trim();\n\n        // \"per minute\" -> \"per second\"\n        if (speedUnit.match(/(pm|per minute)$/)) {\n            speedValue /= 60;\n        }\n\n        // Which unit?\n        switch (speedUnit) {\n            // Degrees per minute / second\n            case 'dpm':\n            case 'degrees per minute':\n            case 'dps':\n            case 'degrees per second':\n                parsed = MathUtils.degToRad(speedValue);\n                break;\n\n            // Radians per minute / second\n            case 'rdpm':\n            case 'radians per minute':\n            case 'rdps':\n            case 'radians per second':\n                parsed = speedValue;\n                break;\n\n            // Revolutions per minute / second\n            case 'rpm':\n            case 'revolutions per minute':\n            case 'rps':\n            case 'revolutions per second':\n                parsed = speedValue * Math.PI * 2;\n                break;\n\n            // Unknown unit\n            default:\n                throw new PSVError(`Unknown speed unit \"${speedUnit}\"`);\n        }\n    } else {\n        parsed = speed;\n    }\n\n    return parsed;\n}\n\n/**\n * Converts a speed into a duration for a specific angle to travel\n */\nexport function speedToDuration(value: string | number, angle: number): number {\n    if (typeof value !== 'number') {\n        // desired radial speed\n        const speed = parseSpeed(value);\n        // compute duration\n        return (angle / Math.abs(speed)) * 1000;\n    } else {\n        return Math.abs(value);\n    }\n}\n\n/**\n * Parses an angle value in radians or degrees and returns a normalized value in radians\n * @param angle - eg: 3.14, 3.14rad, 180deg\n * @param [zeroCenter=false] - normalize between -Pi - Pi instead of 0 - 2*Pi\n * @param [halfCircle=zeroCenter] - normalize between -Pi/2 - Pi/2 instead of -Pi - Pi\n * @throws {@link PSVError} when the angle cannot be parsed\n */\nexport function parseAngle(angle: string | number, zeroCenter = false, halfCircle = zeroCenter): number {\n    let parsed;\n\n    if (typeof angle === 'string') {\n        const match = angle\n            .toLowerCase()\n            .trim()\n            .match(/^(-?[0-9]+(?:\\.[0-9]*)?)(.*)$/);\n\n        if (!match) {\n            throw new PSVError(`Unknown angle \"${angle}\"`);\n        }\n\n        const value = parseFloat(match[1]);\n        const unit = match[2];\n\n        if (unit) {\n            switch (unit) {\n                case 'deg':\n                case 'degs':\n                    parsed = MathUtils.degToRad(value);\n                    break;\n                case 'rad':\n                case 'rads':\n                    parsed = value;\n                    break;\n                default:\n                    throw new PSVError(`Unknown angle unit \"${unit}\"`);\n            }\n        } else {\n            parsed = value;\n        }\n    } else if (typeof angle === 'number' && !isNaN(angle)) {\n        parsed = angle;\n    } else {\n        throw new PSVError(`Unknown angle \"${angle}\"`);\n    }\n\n    parsed = wrap(zeroCenter ? parsed + Math.PI : parsed, Math.PI * 2);\n\n    return zeroCenter\n        ? MathUtils.clamp(parsed - Math.PI, -Math.PI / (halfCircle ? 2 : 1), Math.PI / (halfCircle ? 2 : 1))\n        : parsed;\n}\n\n/**\n * Creates a THREE texture from an image\n */\nexport function createTexture(img: TexImageSource, mimaps = false): Texture {\n    const texture = new Texture(img);\n    texture.needsUpdate = true;\n    texture.minFilter = mimaps ? LinearMipmapLinearFilter : LinearFilter;\n    texture.generateMipmaps = mimaps;\n    texture.anisotropy = mimaps ? 2 : 1;\n    return texture;\n}\n\nconst quaternion = new Quaternion();\n\n/**\n * Applies the inverse of Euler angles to a vector\n */\nexport function applyEulerInverse(vector: Vector3, euler: Euler) {\n    quaternion.setFromEuler(euler).invert();\n    vector.applyQuaternion(quaternion);\n}\n\n/**\n * Declaration of configuration parsers, used by {@link getConfigParser}\n */\nexport type ConfigParsers<T, U extends T = T> = {\n    [key in keyof T]: (val: T[key], opts: { defValue: U[key]; rawConfig: T }) => U[key];\n};\n\n/**\n * Result of {@link getConfigParser}\n */\nexport type ConfigParser<T, U extends T> = {\n    (config: T): U;\n    defaults: Required<U>;\n    parsers: ConfigParsers<T, U>;\n};\n\n/**\n * Creates a function to validate an user configuration object\n *\n * @template T type of input config\n * @template U type of config after parsing\n *\n * @param defaults the default configuration\n * @param parsers function used to parse/validate the configuration\n *\n * @example\n * ```ts\n * type MyConfig = {\n *      value: number;\n *      label?: string;\n * };\n *\n * const getConfig<MyConfig>({\n *      value: 1,\n *      label: 'Title',\n * }, {\n *      value(value, { defValue }) {\n *          return value < 10 ? value : defValue;\n *      }\n * });\n *\n * const config = getConfig({ value: 3 });\n * ```\n */\nexport function getConfigParser<T extends Record<string, any>, U extends T = T>(\n    defaults: Required<U>,\n    parsers?: ConfigParsers<T, U>,\n): ConfigParser<T, U> {\n    const parser = function (userConfig: T): U {\n        const rawConfig: U = clone({\n            ...defaults,\n            ...userConfig,\n        });\n\n        const config: U = {} as U;\n\n        for (let [key, value] of Object.entries(rawConfig) as Array<[keyof T, any]>) {\n            if (parsers && key in parsers) {\n                value = parsers[key](value, {\n                    rawConfig: rawConfig,\n                    defValue: defaults[key],\n                });\n            } else if (!(key in defaults)) {\n                logWarn(`Unknown option ${key as string}`);\n                continue;\n            }\n\n            // @ts-ignore\n            config[key] = value;\n        }\n\n        return config;\n    } as ConfigParser<T, U>;\n\n    parser.defaults = defaults;\n    parser.parsers = parsers || ({} as any);\n\n    return parser;\n}\n\n/**\n * Checks if a stylesheet is loaded by the presence of a CSS variable\n */\nexport function checkStylesheet(element: HTMLElement, name: string) {\n    if (getStyleProperty(element, `--psv-${name}-loaded`) !== 'true') {\n        console.error(`PhotoSphereViewer: stylesheet \"@photo-sphere-viewer/${name}/index.css\" is not loaded`);\n    }\n}\n\n/**\n * Checks that a dependency version is the same as the core\n */\nexport function checkVersion(name: string, version: string, coreVersion: string) {\n    if (version && version !== coreVersion) {\n        console.error(`PhotoSphereViewer: @photo-sphere-viewer/${name} is in version ${version} but @photo-sphere-viewer/core is in version ${coreVersion}`);\n    }\n}\n\n/**\n * Checks if the viewer is not used insude a closed shadow DOM\n */\nexport function checkClosedShadowDom(el: Node) {\n    do {\n        if (el instanceof ShadowRoot && el.mode === 'closed') {\n            console.error(`PhotoSphereViewer: closed shadow DOM detected, the viewer might not work as expected`);\n            return;\n        }\n        el = el.parentNode;\n    } while (el);\n}\n\n/**\n * Merge XMP data with custom panoData, also apply default behaviour when data is missing\n */\nexport function mergePanoData(width: number, height: number, newPanoData?: PanoData, xmpPanoData?: PanoData): PanoData {\n    const panoData: PanoData = {\n        isEquirectangular: true,\n        fullWidth: firstNonNull(newPanoData?.fullWidth, xmpPanoData?.fullWidth),\n        fullHeight: firstNonNull(newPanoData?.fullHeight, xmpPanoData?.fullHeight),\n        croppedWidth: width,\n        croppedHeight: height,\n        croppedX: firstNonNull(newPanoData?.croppedX, xmpPanoData?.croppedX),\n        croppedY: firstNonNull(newPanoData?.croppedY, xmpPanoData?.croppedY),\n        poseHeading: firstNonNull(newPanoData?.poseHeading, xmpPanoData?.poseHeading, 0),\n        posePitch: firstNonNull(newPanoData?.posePitch, xmpPanoData?.posePitch, 0),\n        poseRoll: firstNonNull(newPanoData?.poseRoll, xmpPanoData?.poseRoll, 0),\n        initialHeading: xmpPanoData?.initialHeading,\n        initialPitch: xmpPanoData?.initialPitch,\n        initialFov: xmpPanoData?.initialFov,\n    };\n\n    // construct missing data\n    if (!panoData.fullWidth && !panoData.fullHeight) {\n        panoData.fullWidth = Math.max(width, height * 2);\n        panoData.fullHeight = Math.round(panoData.fullWidth / 2);\n    }\n    if (!panoData.fullWidth) {\n        panoData.fullWidth = panoData.fullHeight * 2;\n    }\n    if (!panoData.fullHeight) {\n        panoData.fullHeight = Math.round(panoData.fullWidth / 2);\n    }\n    if (panoData.croppedX === null) {\n        panoData.croppedX = Math.round((panoData.fullWidth - width) / 2);\n    }\n    if (panoData.croppedY === null) {\n        panoData.croppedY = Math.round((panoData.fullHeight - height) / 2);\n    }\n\n    // sanity checks\n    if (Math.abs(panoData.fullWidth - panoData.fullHeight * 2) > 1) {\n        logWarn('Invalid panoData, fullWidth should be twice fullHeight');\n        panoData.fullHeight = Math.round(panoData.fullWidth / 2);\n    }\n    if (panoData.croppedX + panoData.croppedWidth > panoData.fullWidth) {\n        logWarn('Invalid panoData, croppedX + croppedWidth > fullWidth');\n        panoData.croppedX = panoData.fullWidth - panoData.croppedWidth;\n    }\n    if (panoData.croppedY + panoData.croppedHeight > panoData.fullHeight) {\n        logWarn('Invalid panoData, croppedY + croppedHeight > fullHeight');\n        panoData.croppedY = panoData.fullHeight - panoData.croppedHeight;\n    }\n    if (panoData.croppedX < 0) {\n        logWarn('Invalid panoData, croppedX < 0');\n        panoData.croppedX = 0;\n    }\n    if (panoData.croppedY < 0) {\n        logWarn('Invalid panoData, croppedY < 0');\n        panoData.croppedY = 0;\n    }\n\n    return panoData;\n}\n","export class PSVError extends Error {\n    constructor(message: string, reason?: any) {\n        super(reason && reason instanceof Error ? `${message}: ${reason.message}` : message);\n        this.name = 'PSVError';\n        (Error as any).captureStackTrace?.(this, PSVError);\n    }\n}\n","import { EASINGS } from '../data/constants';\n\n/**\n * Options for {@link Animation}\n */\nexport type AnimationOptions<T> = {\n    /**\n     * interpolated properties\n     */\n    properties: Partial<Record<keyof T, { start: number; end: number }>>;\n    /**\n     * duration of the animation\n     */\n    duration: number;\n    /**\n     * delay before start\n     * @default 0\n     */\n    delay?: number;\n    /**\n     * interpoaltion function, see {@link CONSTANTS.EASINGS}\n     * @default 'linear'\n     */\n    easing?: string | ((t: number) => number);\n    /**\n     * function called for each frame\n     */\n    onTick: (properties: Record<keyof T, number>, progress: number) => void;\n};\n\ntype PropertyValues = AnimationOptions<any>['properties']['k'];\n\n/**\n * Interpolation helper for animations\n *\n * Implements the Promise API with an additional \"cancel\" method.\n * The promise is resolved with `true` when the animation is completed and `false` if the animation is cancelled.\n * @template T the type of interpoalted properties\n *\n * @example\n * ```ts\n * const anim = new Animation({\n *     properties: {\n *         width: {start: 100, end: 200}\n *     },\n *     duration: 5000,\n *     onTick: (properties) => element.style.width = `${properties.width}px`;\n * });\n *\n * anim.then((completed) => ...);\n *\n * anim.cancel();\n * ```\n */\nexport class Animation<T = any> implements PromiseLike<boolean> {\n    private options: AnimationOptions<T>;\n    private easing: (t: number) => number = EASINGS['linear'];\n    private callbacks: Array<(complete: boolean) => void> = [];\n    private start?: number;\n    private delayTimeout: ReturnType<typeof setTimeout>;\n    private animationFrame: ReturnType<typeof requestAnimationFrame>;\n\n    resolved = false;\n    cancelled = false;\n\n    constructor(options: AnimationOptions<T>) {\n        this.options = options;\n\n        if (options) {\n            if (options.easing) {\n                this.easing = typeof options.easing === 'function'\n                    ? options.easing\n                    : EASINGS[options.easing] || EASINGS['linear'];\n            }\n\n            this.delayTimeout = setTimeout(() => {\n                this.delayTimeout = undefined;\n                this.animationFrame = window.requestAnimationFrame(t => this.__run(t));\n            }, options.delay || 0);\n        } else {\n            this.resolved = true;\n        }\n    }\n\n    private __run(timestamp: number) {\n        if (this.cancelled) {\n            return;\n        }\n\n        // first iteration\n        if (!this.start) {\n            this.start = timestamp;\n        }\n\n        // compute progress\n        const progress = (timestamp - this.start) / this.options.duration;\n        const current = {} as Record<keyof T, number>;\n\n        if (progress < 1.0) {\n            // interpolate properties\n            for (const [name, prop] of Object.entries(this.options.properties) as Array<[string, PropertyValues]>) {\n                if (prop) {\n                    const value = prop.start + (prop.end - prop.start) * this.easing(progress);\n                    // @ts-ignore\n                    current[name] = value;\n                }\n            }\n            this.options.onTick(current, progress);\n\n            this.animationFrame = window.requestAnimationFrame(t => this.__run(t));\n        } else {\n            // call onTick one last time with final values\n            for (const [name, prop] of Object.entries(this.options.properties) as Array<[string, PropertyValues]>) {\n                if (prop) {\n                    // @ts-ignore\n                    current[name] = prop.end;\n                }\n            }\n            this.options.onTick(current, 1.0);\n\n            this.__resolve(true);\n            this.animationFrame = undefined;\n        }\n    }\n\n    private __resolve(value: boolean) {\n        if (value) {\n            this.resolved = true;\n        } else {\n            this.cancelled = true;\n        }\n        this.callbacks.forEach(cb => cb(value));\n        this.callbacks.length = 0;\n    }\n\n    /**\n     * Promise chaining\n     * @param [onFulfilled] - Called when the animation is complete (true) or cancelled (false)\n     */\n    then<U>(onFulfilled: (complete: boolean) => PromiseLike<U> | U): Promise<U> {\n        if (this.resolved || this.cancelled) {\n            return Promise.resolve(this.resolved).then(onFulfilled);\n        }\n\n        return new Promise((resolve: (complete: boolean) => void) => {\n            this.callbacks.push(resolve);\n        }).then(onFulfilled);\n    }\n\n    /**\n     * Cancels the animation\n     */\n    cancel() {\n        if (!this.cancelled && !this.resolved) {\n            this.__resolve(false);\n\n            if (this.delayTimeout) {\n                window.clearTimeout(this.delayTimeout);\n                this.delayTimeout = undefined;\n            }\n            if (this.animationFrame) {\n                window.cancelAnimationFrame(this.animationFrame);\n                this.animationFrame = undefined;\n            }\n        }\n    }\n}\n","import { MathUtils } from 'three';\nimport { PSVError } from '../PSVError';\nimport { wrap } from './math';\n\nconst enum DynamicMode {\n    STOP,\n    INFINITE,\n    POSITION,\n}\n\n/**\n * Represents a variable that can dynamically change with time (using requestAnimationFrame)\n */\nexport class Dynamic {\n    private readonly min: number;\n    private readonly max: number;\n    private readonly wrap: boolean;\n\n    private mode = DynamicMode.STOP;\n    private speed = 0;\n    private speedMult = 0;\n    private currentSpeed = 0;\n    private target = 0;\n    private __current = 0;\n\n    get current(): number {\n        return this.__current;\n    }\n\n    private set current(current: number) {\n        this.__current = current;\n    }\n\n    constructor(\n        private readonly fn: (val: number) => void,\n        config: {\n            min: number;\n            max: number;\n            defaultValue: number;\n            wrap: boolean;\n        },\n    ) {\n        this.min = config.min;\n        this.max = config.max;\n        this.wrap = config.wrap;\n        this.current = config.defaultValue;\n\n        if (this.wrap && this.min !== 0) {\n            throw new PSVError('invalid config');\n        }\n\n        if (this.fn) {\n            this.fn(this.current);\n        }\n    }\n\n    /**\n     * Changes base speed\n     */\n    setSpeed(speed: number) {\n        this.speed = speed;\n    }\n\n    /**\n     * Defines the target position\n     */\n    goto(position: number, speedMult = 1) {\n        this.mode = DynamicMode.POSITION;\n        this.target = this.wrap ? wrap(position, this.max) : MathUtils.clamp(position, this.min, this.max);\n        this.speedMult = speedMult;\n    }\n\n    /**\n     * Increases/decreases the target position\n     */\n    step(step: number, speedMult = 1) {\n        if (speedMult === 0) {\n            this.setValue(this.current + step);\n        } else {\n            if (this.mode !== DynamicMode.POSITION) {\n                this.target = this.current;\n            }\n            this.goto(this.target + step, speedMult);\n        }\n    }\n\n    /**\n     * Starts infinite movement\n     */\n    roll(invert = false, speedMult = 1) {\n        this.mode = DynamicMode.INFINITE;\n        this.target = invert ? -Infinity : Infinity;\n        this.speedMult = speedMult;\n    }\n\n    /**\n     * Stops movement\n     */\n    stop() {\n        this.mode = DynamicMode.STOP;\n    }\n\n    /**\n     * Defines the current position and immediately stops movement\n     * @param {number} value\n     */\n    setValue(value: number): boolean {\n        this.target = this.wrap ? wrap(value, this.max) : MathUtils.clamp(value, this.min, this.max);\n        this.mode = DynamicMode.STOP;\n        this.currentSpeed = 0;\n        if (this.target !== this.current) {\n            this.current = this.target;\n            if (this.fn) {\n                this.fn(this.current);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @internal\n     */\n    update(elapsed: number): boolean {\n        // in position mode switch to stop mode when in the decceleration window\n        if (this.mode === DynamicMode.POSITION) {\n            // in loop mode, alter \"current\" to avoid crossing the origin\n            if (this.wrap && Math.abs(this.target - this.current) > this.max / 2) {\n                this.current = this.current < this.target ? this.current + this.max : this.current - this.max;\n            }\n\n            const dstStop = (this.currentSpeed * this.currentSpeed) / (this.speed * this.speedMult * 4);\n            if (Math.abs(this.target - this.current) <= dstStop) {\n                this.mode = DynamicMode.STOP;\n            }\n        }\n\n        // compute speed\n        let targetSpeed = this.mode === DynamicMode.STOP ? 0 : this.speed * this.speedMult;\n        if (this.target < this.current) {\n            targetSpeed = -targetSpeed;\n        }\n        if (this.currentSpeed < targetSpeed) {\n            this.currentSpeed = Math.min(\n                targetSpeed,\n                this.currentSpeed + (elapsed / 1000) * this.speed * this.speedMult * 2,\n            );\n        } else if (this.currentSpeed > targetSpeed) {\n            this.currentSpeed = Math.max(\n                targetSpeed,\n                this.currentSpeed - (elapsed / 1000) * this.speed * this.speedMult * 2,\n            );\n        }\n\n        // compute new position\n        let next = null;\n        if (this.current > this.target && this.currentSpeed) {\n            next = Math.max(this.target, this.current + (this.currentSpeed * elapsed) / 1000);\n        } else if (this.current < this.target && this.currentSpeed) {\n            next = Math.min(this.target, this.current + (this.currentSpeed * elapsed) / 1000);\n        }\n\n        // apply value\n        if (next !== null) {\n            next = this.wrap ? wrap(next, this.max) : MathUtils.clamp(next, this.min, this.max);\n            if (next !== this.current) {\n                this.current = next;\n                if (this.fn) {\n                    this.fn(this.current);\n                }\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","import { Dynamic } from './Dynamic';\n\n/**\n * Wrapper for multiple {@link Dynamic} evolving together\n */\nexport class MultiDynamic<T extends Record<string, Dynamic>> {\n    get current(): Record<keyof T, number> {\n        return Object.entries(this.dynamics).reduce(\n            (values, [name, dynamic]) => {\n                // @ts-ignore\n                values[name] = dynamic.current;\n                return values;\n            },\n            {} as Record<keyof T, number>,\n        );\n    }\n\n    constructor(\n        private readonly fn: (val: Record<keyof T, number>) => void,\n        private readonly dynamics: T,\n    ) {\n        if (this.fn) {\n            this.fn(this.current);\n        }\n    }\n\n    /**\n     * Changes base speed\n     */\n    setSpeed(speed: number) {\n        for (const d of Object.values(this.dynamics)) {\n            d.setSpeed(speed);\n        }\n    }\n\n    /**\n     * Defines the target positions\n     */\n    goto(positions: Partial<Record<keyof T, number>>, speedMult = 1) {\n        for (const [name, position] of Object.entries(positions)) {\n            this.dynamics[name].goto(position as number, speedMult);\n        }\n    }\n\n    /**\n     * Increase/decrease the target positions\n     */\n    step(steps: Partial<Record<keyof T, number>>, speedMult = 1) {\n        if (speedMult === 0) {\n            this.setValue(\n                Object.keys(steps).reduce(\n                    (values, name: keyof T) => {\n                        values[name] = steps[name] + this.dynamics[name].current;\n                        return values;\n                    },\n                    {} as typeof steps,\n                ),\n            );\n        } else {\n            for (const [name, step] of Object.entries(steps)) {\n                this.dynamics[name].step(step as number, speedMult);\n            }\n        }\n    }\n\n    /**\n     * Starts infinite movements\n     */\n    roll(rolls: Partial<Record<keyof T, boolean>>, speedMult = 1) {\n        for (const [name, roll] of Object.entries(rolls)) {\n            this.dynamics[name].roll(roll, speedMult);\n        }\n    }\n\n    /**\n     * Stops movements\n     */\n    stop() {\n        for (const d of Object.values(this.dynamics)) {\n            d.stop();\n        }\n    }\n\n    /**\n     * Defines the current positions and immediately stops movements\n     */\n    setValue(values: Partial<Record<keyof T, number>>): boolean {\n        let hasUpdates = false;\n\n        for (const [name, value] of Object.entries(values)) {\n            hasUpdates = this.dynamics[name].setValue(value as number) || hasUpdates;\n        }\n\n        if (hasUpdates && this.fn) {\n            this.fn(this.current);\n        }\n\n        return hasUpdates;\n    }\n\n    /**\n     * @internal\n     */\n    update(elapsed: number): boolean {\n        let hasUpdates = false;\n\n        for (const d of Object.values(this.dynamics)) {\n            hasUpdates = d.update(elapsed) || hasUpdates;\n        }\n\n        if (hasUpdates && this.fn) {\n            this.fn(this.current);\n        }\n\n        return hasUpdates;\n    }\n}\n","/**\n * Helper for pressable things (buttons, keyboard)\n * When the pressed thing goes up and was not pressed long enough, wait a bit more before execution\n * @internal\n */\nexport class PressHandler<TData = never> {\n    private time = 0;\n    private timeout: ReturnType<typeof setTimeout>;\n    private data: TData;\n\n    get pending() {\n        return this.time !== 0;\n    }\n\n    constructor(private readonly delay = 200) {\n        this.delay = delay;\n    }\n\n    down(data?: TData) {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = undefined;\n        }\n\n        this.time = new Date().getTime();\n        this.data = data;\n    }\n\n    up(cb: (data: TData) => void) {\n        if (!this.time) {\n            return;\n        }\n\n        const elapsed = Date.now() - this.time;\n        if (elapsed < this.delay) {\n            this.timeout = setTimeout(() => {\n                cb(this.data);\n                this.timeout = undefined;\n                this.time = 0;\n                this.data = undefined;\n            }, this.delay);\n        } else {\n            cb(this.data);\n            this.time = 0;\n            this.data = undefined;\n        }\n    }\n}\n","import { MathUtils } from 'three';\n\n/**\n * Direction of a {@link Slider}\n */\nexport enum SliderDirection {\n    VERTICAL = 'VERTICAL',\n    HORIZONTAL = 'HORIZONTAL',\n}\n\n/**\n * Data transmitted to the {@link Slider} listener\n */\nexport type SliderUpdateData = {\n    /**\n     * slider progression for 0-1\n     */\n    readonly value: number;\n\n    /**\n     * the user clicked on the slider\n     */\n    readonly click: boolean;\n\n    /**\n     * the user moves the cursor above the slider, without click\n     */\n    readonly mouseover: boolean;\n\n    /**\n     * the user moves the cursor above the slider while maintaining click\n     */\n    readonly mousedown: boolean;\n\n    /**\n     * the cursor position on the page\n     */\n    readonly cursor: { clientX: number; clientY: number };\n};\n\n/**\n * Helper to make sliders elements\n */\nexport class Slider {\n    private mousedown = false;\n    private mouseover = false;\n\n    get isVertical() {\n        return this.direction === SliderDirection.VERTICAL;\n    }\n\n    get isHorizontal() {\n        return this.direction === SliderDirection.HORIZONTAL;\n    }\n\n    constructor(\n        /** main container of the sliding element */\n        private readonly container: HTMLElement,\n        /** direction of the slider */\n        private readonly direction: SliderDirection,\n        /** callback when the user interacts with the slider */\n        private readonly listener: (data: SliderUpdateData) => void,\n    ) {\n        this.container.addEventListener('click', this);\n        this.container.addEventListener('mousedown', this);\n        this.container.addEventListener('mouseenter', this);\n        this.container.addEventListener('mouseleave', this);\n        this.container.addEventListener('touchstart', this);\n        this.container.addEventListener('mousemove', this, true);\n        this.container.addEventListener('touchmove', this, true);\n        window.addEventListener('mouseup', this);\n        window.addEventListener('touchend', this);\n    }\n\n    destroy() {\n        window.removeEventListener('mouseup', this);\n        window.removeEventListener('touchend', this);\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case 'click': e.stopPropagation(); break;\n            case 'mousedown': this.__onMouseDown(e as MouseEvent); break;\n            case 'mouseenter': this.__onMouseEnter(e as MouseEvent); break;\n            case 'mouseleave': this.__onMouseLeave(e as MouseEvent); break;\n            case 'touchstart': this.__onTouchStart(e as TouchEvent); break;\n            case 'mousemove': this.__onMouseMove(e as MouseEvent); break;\n            case 'touchmove': this.__onTouchMove(e as TouchEvent); break;\n            case 'mouseup': this.__onMouseUp(e as MouseEvent); break;\n            case 'touchend': this.__onTouchEnd(e as TouchEvent); break;\n        }\n    }\n\n    private __onMouseDown(evt: MouseEvent) {\n        this.mousedown = true;\n        this.__update(evt.clientX, evt.clientY, true);\n    }\n\n    private __onMouseEnter(evt: MouseEvent) {\n        this.mouseover = true;\n        this.__update(evt.clientX, evt.clientY, true);\n    }\n\n    private __onTouchStart(evt: TouchEvent) {\n        this.mouseover = true;\n        this.mousedown = true;\n        const touch = evt.changedTouches[0];\n        this.__update(touch.clientX, touch.clientY, true);\n    }\n\n    private __onMouseMove(evt: MouseEvent) {\n        if (this.mousedown || this.mouseover) {\n            evt.stopPropagation();\n            this.__update(evt.clientX, evt.clientY, true);\n        }\n    }\n\n    private __onTouchMove(evt: TouchEvent) {\n        if (this.mousedown || this.mouseover) {\n            evt.stopPropagation();\n            const touch = evt.changedTouches[0];\n            this.__update(touch.clientX, touch.clientY, true);\n        }\n    }\n\n    private __onMouseUp(evt: MouseEvent) {\n        if (this.mousedown) {\n            this.mousedown = false;\n            this.__update(evt.clientX, evt.clientY, false);\n        }\n    }\n\n    private __onMouseLeave(evt: MouseEvent) {\n        if (this.mouseover) {\n            this.mouseover = false;\n            this.__update(evt.clientX, evt.clientY, true);\n        }\n    }\n\n    private __onTouchEnd(evt: TouchEvent) {\n        if (this.mousedown) {\n            this.mouseover = false;\n            this.mousedown = false;\n            const touch = evt.changedTouches[0];\n            this.__update(touch.clientX, touch.clientY, false);\n        }\n    }\n\n    private __update(clientX: number, clientY: number, moving: boolean) {\n        const boundingClientRect = this.container.getBoundingClientRect();\n\n        let val: number;\n        if (this.isVertical) {\n            val = MathUtils.clamp((boundingClientRect.bottom - clientY) / boundingClientRect.height, 0, 1);\n        } else {\n            val = MathUtils.clamp((clientX - boundingClientRect.left) / boundingClientRect.width, 0, 1);\n        }\n\n        this.listener({\n            value: val,\n            click: !moving,\n            mousedown: this.mousedown,\n            mouseover: this.mouseover,\n            cursor: { clientX, clientY },\n        });\n    }\n}\n","import { Mesh } from 'three';\nimport { Tooltip, TooltipConfig } from './components/Tooltip';\nimport { TypedEvent } from './lib/TypedEventTarget';\nimport { ClickData, Point, Position, Size, TextureData, ViewerConfig } from './model';\nimport type { Viewer } from './Viewer';\n\n/**\n * Base class for all events dispatched by {@link Viewer}\n */\nexport abstract class ViewerEvent extends TypedEvent<Viewer> {}\n\n/**\n * @event Triggered before an animation, can be cancelled\n */\nexport class BeforeAnimateEvent extends ViewerEvent {\n    static override readonly type = 'before-animate';\n    override type: 'before-animate';\n\n    /** @internal */\n    constructor(\n        /** target position, can be modified */\n        public position: Position | undefined,\n        /** target zoom level, can be modified */\n        public zoomLevel: number | undefined,\n    ) {\n        super(BeforeAnimateEvent.type, true);\n    }\n}\n\n/**\n * @event Triggered before a render\n */\nexport class BeforeRenderEvent extends ViewerEvent {\n    static override readonly type = 'before-render';\n    override type: 'before-render';\n\n    /** @internal */\n    constructor(\n        /** time provided by requestAnimationFrame */\n        public readonly timestamp: number,\n        /**  time elapsed since the previous frame */\n        public readonly elapsed: number,\n    ) {\n        super(BeforeRenderEvent.type);\n    }\n}\n\n/**\n * @event Triggered before a rotate operation, can be cancelled\n */\nexport class BeforeRotateEvent extends ViewerEvent {\n    static override readonly type = 'before-rotate';\n    override type: 'before-rotate';\n\n    /** @internal */\n    constructor(\n        /** target position, can be modified */\n        public position: Position,\n    ) {\n        super(BeforeRotateEvent.type, true);\n    }\n}\n\n/**\n * @event Triggered when the user clicks on the viewer (everywhere excluding the navbar and the side panel)\n */\nexport class ClickEvent extends ViewerEvent {\n    static override readonly type = 'click';\n    override type: 'click';\n\n    /** @internal */\n    constructor(public readonly data: ClickData) {\n        super(ClickEvent.type);\n    }\n}\n\n/**\n * @event Triggered when some options are changed\n */\nexport class ConfigChangedEvent extends ViewerEvent {\n    static override readonly type = 'config-changed';\n    override type: 'config-changed';\n\n    /** @internal */\n    constructor(public readonly options: Array<keyof ViewerConfig>) {\n        super(ConfigChangedEvent.type);\n    }\n\n    /**\n     * Checks if at least one of the `options` has been modified\n     */\n    containsOptions(...options: Array<keyof ViewerConfig>): boolean {\n        return options.some(option => this.options.includes(option));\n    }\n}\n\n/**\n * @event Triggered when the user double clicks on the viewer. The simple `click` event is always fired before `dblclick`.\n */\nexport class DoubleClickEvent extends ViewerEvent {\n    static override readonly type = 'dblclick';\n    override type: 'dblclick';\n\n    /** @internal */\n    constructor(public readonly data: ClickData) {\n        super(DoubleClickEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the fullscreen is enabled/disabled\n */\nexport class FullscreenEvent extends ViewerEvent {\n    static override readonly type = 'fullscreen';\n    override type: 'fullscreen';\n\n    /** @internal */\n    constructor(public readonly fullscreenEnabled: boolean) {\n        super(FullscreenEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the notification is hidden\n */\nexport class HideNotificationEvent extends ViewerEvent {\n    static override readonly type = 'hide-notification';\n    override type: 'hide-notification';\n\n    /** @internal */\n    constructor(public readonly notificationId?: string) {\n        super(HideNotificationEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the overlay is hidden\n */\nexport class HideOverlayEvent extends ViewerEvent {\n    static override readonly type = 'hide-overlay';\n    override type: 'hide-overlay';\n\n    /** @internal */\n    constructor(public readonly overlayId?: string) {\n        super(HideOverlayEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the panel is hidden\n */\nexport class HidePanelEvent extends ViewerEvent {\n    static override readonly type = 'hide-panel';\n    override type: 'hide-panel';\n\n    /** @internal */\n    constructor(public readonly panelId?: string) {\n        super(HidePanelEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a tooltip is hidden\n */\nexport class HideTooltipEvent extends ViewerEvent {\n    static override readonly type = 'hide-tooltip';\n    override type: 'hide-tooltip';\n\n    /** @internal */\n    constructor(\n        /** Userdata associated to the tooltip */\n        public readonly tooltipData: TooltipConfig['data'],\n    ) {\n        super(HideTooltipEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a key is pressed, can be cancelled\n */\nexport class KeypressEvent extends ViewerEvent {\n    static override readonly type = 'key-press';\n    override type: 'key-press';\n\n    /** @internal */\n    constructor(public readonly key: string, public readonly originalEvent: KeyboardEvent) {\n        super(KeypressEvent.type, true);\n    }\n}\n\n/**\n * @event Triggered when the loader value changes\n */\nexport class LoadProgressEvent extends ViewerEvent {\n    static override readonly type = 'load-progress';\n    override type: 'load-progress';\n\n    /** @internal */\n    constructor(public readonly progress: number) {\n        super(LoadProgressEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a panorama image starts loading\n */\nexport class PanoramaLoadEvent extends ViewerEvent {\n    static override readonly type = 'panorama-load';\n    override type: 'panorama-load';\n\n    /** @internal */\n    constructor(public readonly panorama: any) {\n        super(PanoramaLoadEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a panorama image has been loaded\n */\nexport class PanoramaLoadedEvent extends ViewerEvent {\n    static override readonly type = 'panorama-loaded';\n    override type: 'panorama-loaded';\n\n    /** @internal */\n    constructor(public readonly data: TextureData) {\n        super(PanoramaLoadedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when an error occured when loading the panorama\n */\nexport class PanoramaErrorEvent extends ViewerEvent {\n    static override readonly type = 'panorama-error';\n    override type: 'panorama-error';\n\n    /** @internal */\n    constructor(\n        public readonly panorama: any,\n        public readonly error: Error,\n    ) {\n        super(PanoramaErrorEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the transition to a new panorama is done (complete or not)\n */\nexport class TransitionDoneEvent extends ViewerEvent {\n    static override readonly type = 'transition-done';\n    override type: 'transition-done';\n\n    /** @internal */\n    constructor(public readonly completed: boolean) {\n        super(TransitionDoneEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the view angles change\n */\nexport class PositionUpdatedEvent extends ViewerEvent {\n    static override readonly type = 'position-updated';\n    override type: 'position-updated';\n\n    /** @internal */\n    constructor(public readonly position: Position) {\n        super(PositionUpdatedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when camera roll change\n */\nexport class RollUpdatedEvent extends ViewerEvent {\n    static override readonly type = 'roll-updated';\n    override type: 'roll-updated';\n\n    /** @internal */\n    constructor(public readonly roll: number) {\n        super(RollUpdatedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the panorama image has been loaded and the viewer is ready to perform the first render\n */\nexport class ReadyEvent extends ViewerEvent {\n    static override readonly type = 'ready';\n    override type: 'ready';\n\n    /** @internal */\n    constructor() {\n        super(ReadyEvent.type);\n    }\n}\n\n/**\n * @event Triggered on each viewer render\n */\nexport class RenderEvent extends ViewerEvent {\n    static override readonly type = 'render';\n    override type: 'render';\n\n    /** @internal */\n    constructor() {\n        super(RenderEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the notification is shown\n */\nexport class ShowNotificationEvent extends ViewerEvent {\n    static override readonly type = 'show-notification';\n    override type: 'show-notification';\n\n    /** @internal */\n    constructor(public readonly notificationId?: string) {\n        super(ShowNotificationEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the overlay is shown\n */\nexport class ShowOverlayEvent extends ViewerEvent {\n    static override readonly type = 'show-overlay';\n    override type: 'show-overlay';\n\n    /** @internal */\n    constructor(public readonly overlayId?: string) {\n        super(ShowOverlayEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the panel is shown\n */\nexport class ShowPanelEvent extends ViewerEvent {\n    static override readonly type = 'show-panel';\n    override type: 'show-panel';\n\n    /** @internal */\n    constructor(public readonly panelId?: string) {\n        super(ShowPanelEvent.type);\n    }\n}\n\n/**\n * @event Triggered when a tooltip is shown\n */\nexport class ShowTooltipEvent extends ViewerEvent {\n    static override readonly type = 'show-tooltip';\n    override type: 'show-tooltip';\n\n    /** @internal */\n    constructor(\n        /** Instance of the tooltip */\n        public readonly tooltip: Tooltip,\n        /** Userdata associated to the tooltip */\n        public readonly tooltipData?: TooltipConfig['data'],\n    ) {\n        super(ShowTooltipEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the viewer size changes\n */\nexport class SizeUpdatedEvent extends ViewerEvent {\n    static override readonly type = 'size-updated';\n    override type: 'size-updated';\n\n    /** @internal */\n    constructor(public readonly size: Size) {\n        super(SizeUpdatedEvent.type);\n    }\n}\n\n/**\n * @event Triggered when all current animations are stopped\n */\nexport class StopAllEvent extends ViewerEvent {\n    static override readonly type = 'stop-all';\n    override type: 'stop-all';\n\n    /** @internal */\n    constructor() {\n        super(StopAllEvent.type);\n    }\n}\n\n/**\n * @event Triggered when the viewer zoom changes\n */\nexport class ZoomUpdatedEvent extends ViewerEvent {\n    static override readonly type = 'zoom-updated';\n    override type: 'zoom-updated';\n\n    /** @internal */\n    constructor(public readonly zoomLevel: number) {\n        super(ZoomUpdatedEvent.type);\n    }\n}\n\n/**\n * Base class for events on three.js objects\n *\n * Note: {@link Viewer#observeObjects} must be called for these events to be dispatched\n */\nexport abstract class ObjectEvent extends ViewerEvent {\n    /** @internal */\n    constructor(\n        type: string,\n        public readonly originalEvent: MouseEvent,\n        public readonly object: Mesh<any, any>,\n        public readonly viewerPoint: Point,\n        public readonly userDataKey: string,\n    ) {\n        super(type);\n    }\n}\n\n/**\n * @event Triggered when the cursor enters an object in the scene\n *\n * Note: {@link Viewer#observeObjects} must be called for this event to be dispatched\n */\nexport class ObjectEnterEvent extends ObjectEvent {\n    static override readonly type = 'enter-object';\n    override type: 'enter-object';\n\n    /** @internal */\n    constructor(originalEvent: MouseEvent, object: Mesh, viewerPoint: Point, userDataKey: string) {\n        super(ObjectEnterEvent.type, originalEvent, object, viewerPoint, userDataKey);\n    }\n}\n\n/**\n * @event Triggered when the cursor leaves an object in the scene\n *\n * Note: {@link Viewer#observeObjects} must be called for this event to be dispatched\n */\nexport class ObjectLeaveEvent extends ObjectEvent {\n    static override readonly type = 'leave-object';\n    override type: 'leave-object';\n\n    /** @internal */\n    constructor(originalEvent: MouseEvent, object: Mesh, viewerPoint: Point, userDataKey: string) {\n        super(ObjectLeaveEvent.type, originalEvent, object, viewerPoint, userDataKey);\n    }\n}\n\n/**\n * @event Triggered when the cursor moves over an object in the scene\n *\n * Note: {@link Viewer#observeObjects} must be called for this event to be dispatched\n */\nexport class ObjectHoverEvent extends ObjectEvent {\n    static override readonly type = 'hover-object';\n    override type: 'hover-object';\n\n    /** @internal */\n    constructor(originalEvent: MouseEvent, object: Mesh, viewerPoint: Point, userDataKey: string) {\n        super(ObjectHoverEvent.type, originalEvent, object, viewerPoint, userDataKey);\n    }\n}\n\nexport type ViewerEvents =\n    | BeforeAnimateEvent\n    | BeforeRenderEvent\n    | BeforeRotateEvent\n    | ClickEvent\n    | ConfigChangedEvent\n    | DoubleClickEvent\n    | FullscreenEvent\n    | HideNotificationEvent\n    | HideOverlayEvent\n    | HidePanelEvent\n    | HideTooltipEvent\n    | KeypressEvent\n    | LoadProgressEvent\n    | PanoramaLoadEvent\n    | PanoramaLoadedEvent\n    | PanoramaErrorEvent\n    | TransitionDoneEvent\n    | PositionUpdatedEvent\n    | RollUpdatedEvent\n    | ReadyEvent\n    | RenderEvent\n    | ShowNotificationEvent\n    | ShowOverlayEvent\n    | ShowPanelEvent\n    | ShowTooltipEvent\n    | SizeUpdatedEvent\n    | StopAllEvent\n    | ZoomUpdatedEvent\n    | ObjectEnterEvent\n    | ObjectLeaveEvent\n    | ObjectHoverEvent;\n","/**\n * Base class for events dispatched by {@link TypedEventTarget}\n * @template TTarget type of the event target\n */\nexport abstract class TypedEvent<TTarget extends TypedEventTarget<any>> extends Event {\n    static readonly type: string;\n\n    override target: TTarget;\n\n    constructor(type: string, cancelable = false) {\n        super(type, { cancelable });\n    }\n}\n\n/**\n * Decorator for EventTarget allowing to strongly type events and listeners\n * @see https://rjzaworski.com/2021/06/event-target-with-typescript\n * @template TEvents union of dispatched events\n */\nexport class TypedEventTarget<TEvents extends TypedEvent<any>> extends EventTarget {\n    override dispatchEvent(e: TEvents): boolean {\n        return super.dispatchEvent(e);\n    }\n\n    /**\n     * @template T the name of event\n     * @template E the class of the event\n     */\n    override addEventListener<T extends TEvents['type'], E extends TEvents & { type: T }>(\n        type: T,\n        callback: ((e: E) => void) | EventListenerObject | null,\n        options?: AddEventListenerOptions | boolean,\n    ) {\n        super.addEventListener(type, callback as any, options);\n    }\n\n    /**\n     * @template T the name of event\n     * @template E the class of the event\n     */\n    override removeEventListener<T extends TEvents['type'], E extends TEvents & { type: T }>(\n        type: TEvents['type'],\n        callback: ((e: E) => void) | EventListenerObject | null,\n        options?: EventListenerOptions | boolean,\n    ) {\n        super.removeEventListener(type, callback as any, options);\n    }\n}\n","import { Object3D } from 'three';\nimport { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { PanoData, PanoDataProvider, PanoramaPosition, Position, TextureData } from '../model';\nimport { checkVersion } from '../utils';\n\n/**\n * Base class for adapters\n * @template TPanorama type of the panorama object\n * @template TData type of the panorama metadata\n * @template TTexture type of the loaded texture\n * @template TMesh type of the mesh\n */\nexport abstract class AbstractAdapter<TPanorama, TData, TTexture, TMesh extends Object3D> {\n    /**\n     * Unique identifier of the adapter\n     */\n    static readonly id: string;\n    /**\n     * Expected version of the core\n     * DO NOT USE on custom adapters\n     */\n    static readonly VERSION: string;\n\n    /**\n     * Indicates if the adapter supports panorama download natively\n     */\n    static readonly supportsDownload: boolean = false;\n\n    constructor(protected readonly viewer: Viewer) {}\n\n    /**\n     * Initializes the adapter\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init(): void {}\n\n    /**\n     * Destroys the adapter\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    destroy(): void {}\n\n    /**\n     * Indicates if the adapter supports transitions between panoramas\n     */\n    // @ts-ignore unused parameter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    supportsTransition(panorama: TPanorama): boolean {\n        return false;\n    }\n\n    /**\n     * Indicates if the adapter supports preload of a panorama\n     */\n    // @ts-ignore unused parameter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    supportsPreload(panorama: TPanorama): boolean {\n        return false;\n    }\n\n    /**\n     * Converts pixel texture coordinates to spherical radians coordinates\n     * @throws {@link PSVError} when the current adapter does not support texture coordinates\n     */\n    // @ts-ignore unused parameter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    textureCoordsToSphericalCoords(point: PanoramaPosition, data: TData): Position {\n        throw new PSVError('Current adapter does not support texture coordinates.');\n    }\n\n    /**\n     * Converts spherical radians coordinates to pixel texture coordinates\n     * @throws {@link PSVError} when the current adapter does not support texture coordinates\n     */\n    // @ts-ignore unused parameter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    sphericalCoordsToTextureCoords(position: Position, data: TData): PanoramaPosition {\n        throw new PSVError('Current adapter does not support texture coordinates.');\n    }\n\n    /**\n     * Loads the panorama texture\n     */\n    abstract loadTexture(\n        panorama: TPanorama,\n        loader?: boolean,\n        newPanoData?: PanoData | PanoDataProvider,\n        useXmpPanoData?: boolean\n    ): Promise<TextureData<TTexture, TPanorama, TData>>;\n\n    /**\n     * Creates the mesh\n     */\n    abstract createMesh(panoData: TData): TMesh;\n\n    /**\n     * Applies the texture to the mesh\n     */\n    abstract setTexture(mesh: TMesh, textureData: TextureData<TTexture, TPanorama, TData>, transition: boolean): void;\n\n    /**\n     * Changes the opacity of the mesh\n     */\n    abstract setTextureOpacity(mesh: TMesh, opacity: number): void;\n\n    /**\n     * Clear a loaded texture from memory\n     */\n    abstract disposeTexture(textureData: TextureData<TTexture, TPanorama, TData>): void;\n\n    /**\n     * Cleanup a mesh from memory\n     */\n    abstract disposeMesh(mesh: TMesh): void;\n}\n\nexport type AdapterConstructor = (new (viewer: Viewer, config?: any) => AbstractAdapter<any, any, any, any>);\n\n/**\n * Returns the adapter constructor from the imported object\n * @internal\n */\nexport function adapterInterop(adapter: any): AdapterConstructor & typeof AbstractAdapter {\n    if (adapter) {\n        for (const [, p] of [['_', adapter], ...Object.entries(adapter)]) {\n            if (p.prototype instanceof AbstractAdapter) {\n                checkVersion(p.id, p.VERSION, PKG_VERSION);\n                return p;\n            }\n        }\n    }\n    return null;\n}\n","import { BufferAttribute, Mesh, MeshBasicMaterial, SphereGeometry } from 'three';\nimport { type Viewer } from '../Viewer';\nimport { SPHERE_RADIUS } from '../data/constants';\nimport { EquirectangularAdapter, EquirectangularMesh, EquirectangularTextureData } from './EquirectangularAdapter';\n\nexport type DualFisheyeAdapterConfig = {\n    /**\n     * number of faces of the sphere geometry, higher values may decrease performances\n     * @default 64\n     */\n    resolution?: number;\n};\n\n/**\n * @see https://github.com/acalcutt/Gear360_html5_viewer\n */\nexport class DualFisheyeAdapter extends EquirectangularAdapter {\n    static override readonly id: string = 'dual-fisheye';\n    static override readonly VERSION = PKG_VERSION;\n\n    constructor(viewer: Viewer, config?: DualFisheyeAdapterConfig) {\n        super(viewer, {\n            resolution: config?.resolution ?? 64,\n            useXmpData: false,\n        });\n    }\n\n    override async loadTexture(panorama: string, loader?: boolean): Promise<EquirectangularTextureData> {\n        const result = await super.loadTexture(panorama, loader, null, false);\n        result.panoData = null;\n        return result;\n    }\n\n    override createMesh(): EquirectangularMesh {\n        const geometry = new SphereGeometry(\n            SPHERE_RADIUS,\n            this.SPHERE_SEGMENTS,\n            this.SPHERE_HORIZONTAL_SEGMENTS,\n        )\n            .scale(-1, 1, 1)\n            .toNonIndexed() as SphereGeometry;\n\n        const uvs = geometry.getAttribute('uv') as BufferAttribute;\n        const normals = geometry.getAttribute('normal') as BufferAttribute;\n\n        for (let i = 0; i < uvs.count; i++) {\n            for (let j = 0; j < 3; j++) {\n                const index = i * 3 + j;\n\n                const x = normals.getX(index);\n                const y = normals.getY(index);\n                const z = normals.getZ(index);\n\n                const c = 0.947;\n                if (i < uvs.count / 6) {\n                    const correction = (x === 0 && z === 0) ? 1 : (Math.acos(y) / Math.sqrt(x * x + z * z)) * (2 / Math.PI);\n                    uvs.setXY(index,\n                        x * (c / 4) * correction + (1 / 4),\n                        z * (c / 2) * correction + (1 / 2),\n                    );\n                } else {\n                    const correction = (x === 0 && z === 0) ? 1 : (Math.acos(-y) / Math.sqrt(x * x + z * z)) * (2 / Math.PI);\n                    uvs.setXY(index,\n                        -x * (c / 4) * correction + (3 / 4),\n                        z * (c / 2) * correction + (1 / 2),\n                    );\n                }\n            }\n        }\n\n        geometry.rotateX(-Math.PI / 2);\n        geometry.rotateY(Math.PI);\n\n        const material = new MeshBasicMaterial({ depthTest: false, depthWrite: false });\n\n        return new Mesh(geometry, material);\n    }\n}\n","import { MathUtils, Mesh, MeshBasicMaterial, SphereGeometry, Texture } from 'three';\nimport { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { SPHERE_RADIUS } from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport { EquirectangularPanorama, PanoData, PanoDataProvider, PanoramaPosition, Position, TextureData } from '../model';\nimport { createTexture, getConfigParser, getXMPValue, isNil, mergePanoData } from '../utils';\nimport { AbstractAdapter } from './AbstractAdapter';\n\n/**\n * Configuration for {@link EquirectangularAdapter}\n */\nexport type EquirectangularAdapterConfig = {\n    /**\n     * number of faces of the sphere geometry, higher values may decrease performances\n     * @default 64\n     */\n    resolution?: number;\n    /**\n     * read real image size from XMP data\n     * @default true\n     */\n    useXmpData?: boolean;\n    /**\n     * used for equirectangular tiles adapter\n     * @internal\n     */\n    blur?: boolean;\n};\n\nexport type EquirectangularMesh = Mesh<SphereGeometry, MeshBasicMaterial>;\nexport type EquirectangularTextureData = TextureData<Texture, string | EquirectangularPanorama, PanoData>;\n\nconst getConfig = getConfigParser<EquirectangularAdapterConfig>(\n    {\n        resolution: 64,\n        useXmpData: true,\n        blur: false,\n    },\n    {\n        resolution: (resolution) => {\n            if (!resolution || !MathUtils.isPowerOfTwo(resolution)) {\n                throw new PSVError('EquirectangularAdapter resolution must be power of two.');\n            }\n            return resolution;\n        },\n    },\n);\n\n/**\n * Adapter for equirectangular panoramas\n */\nexport class EquirectangularAdapter extends AbstractAdapter<string | EquirectangularPanorama, PanoData, Texture, EquirectangularMesh> {\n    static override readonly id: string = 'equirectangular';\n    static override readonly VERSION = PKG_VERSION;\n    static override readonly supportsDownload: boolean = true;\n\n    private readonly config: EquirectangularAdapterConfig;\n\n    // @internal\n    public readonly SPHERE_SEGMENTS: number;\n    // @internal\n    public readonly SPHERE_HORIZONTAL_SEGMENTS: number;\n\n    constructor(viewer: Viewer, config?: EquirectangularAdapterConfig) {\n        super(viewer);\n\n        this.config = getConfig(config);\n\n        this.SPHERE_SEGMENTS = this.config.resolution;\n        this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n    }\n\n    override supportsTransition() {\n        return true;\n    }\n\n    override supportsPreload() {\n        return true;\n    }\n\n    override textureCoordsToSphericalCoords(point: PanoramaPosition, data: PanoData): Position {\n        if (isNil(point.textureX) || isNil(point.textureY)) {\n            throw new PSVError(`Texture position is missing 'textureX' or 'textureY'`);\n        }\n\n        const relativeX = ((point.textureX + data.croppedX) / data.fullWidth) * Math.PI * 2;\n        const relativeY = ((point.textureY + data.croppedY) / data.fullHeight) * Math.PI;\n\n        return {\n            yaw: relativeX >= Math.PI ? relativeX - Math.PI : relativeX + Math.PI,\n            pitch: Math.PI / 2 - relativeY,\n        };\n    }\n\n    override sphericalCoordsToTextureCoords(position: Position, data: PanoData): PanoramaPosition {\n        const relativeLong = (position.yaw / Math.PI / 2) * data.fullWidth;\n        const relativeLat = (position.pitch / Math.PI) * data.fullHeight;\n\n        let textureX = Math.round(position.yaw < Math.PI ? relativeLong + data.fullWidth / 2 : relativeLong - data.fullWidth / 2) - data.croppedX;\n        let textureY = Math.round(data.fullHeight / 2 - relativeLat) - data.croppedY;\n\n        if (textureX < 0 || textureX > data.croppedWidth || textureY < 0 || textureY > data.croppedHeight) {\n            textureX = textureY = undefined;\n        }\n\n        return { textureX, textureY };\n    }\n\n    async loadTexture(\n        panorama: string | EquirectangularPanorama,\n        loader = true,\n        newPanoData?: PanoData | PanoDataProvider,\n        useXmpPanoData = this.config.useXmpData,\n    ): Promise<EquirectangularTextureData> {\n        if (typeof panorama !== 'string' && (typeof panorama !== 'object' || !panorama.path)) {\n            return Promise.reject(new PSVError('Invalid panorama url, are you using the right adapter?'));\n        }\n\n        let cleanPanorama: EquirectangularPanorama;\n        if (typeof panorama === 'string') {\n            cleanPanorama = {\n                path: panorama,\n                data: newPanoData,\n            };\n        } else {\n            cleanPanorama = {\n                data: newPanoData,\n                ...panorama,\n            };\n        }\n\n        const blob = await this.viewer.textureLoader.loadFile(\n            cleanPanorama.path,\n            loader ? p => this.viewer.textureLoader.dispatchProgress(p) : null,\n            cleanPanorama.path,\n        );\n        const xmpPanoData = useXmpPanoData ? await this.loadXMP(blob) : null;\n        const img = await this.viewer.textureLoader.blobToImage(blob);\n\n        if (typeof cleanPanorama.data === 'function') {\n            cleanPanorama.data = cleanPanorama.data(img, xmpPanoData);\n        }\n\n        const panoData = mergePanoData(img.width, img.height, cleanPanorama.data, xmpPanoData);\n\n        const texture = this.createEquirectangularTexture(img);\n\n        return {\n            panorama,\n            texture,\n            panoData,\n            cacheKey: cleanPanorama.path,\n        };\n    }\n\n    /**\n     * Loads the XMP data of an image\n     */\n    private async loadXMP(blob: Blob): Promise<PanoData> {\n        const binary = await this.loadBlobAsString(blob);\n\n        const a = binary.indexOf('<x:xmpmeta');\n        if (a === -1) {\n            return null;\n        }\n\n        const b = binary.indexOf('</x:xmpmeta>', a);\n        if (b === -1) {\n            return null;\n        }\n\n        const data = binary.substring(a, b);\n        if (!data.includes('GPano:')) {\n            return null;\n        }\n\n        return {\n            fullWidth: getXMPValue(data, 'FullPanoWidthPixels'),\n            fullHeight: getXMPValue(data, 'FullPanoHeightPixels'),\n            croppedWidth: getXMPValue(data, 'CroppedAreaImageWidthPixels'),\n            croppedHeight: getXMPValue(data, 'CroppedAreaImageHeightPixels'),\n            croppedX: getXMPValue(data, 'CroppedAreaLeftPixels'),\n            croppedY: getXMPValue(data, 'CroppedAreaTopPixels'),\n            poseHeading: getXMPValue(data, 'PoseHeadingDegrees', false),\n            posePitch: getXMPValue(data, 'PosePitchDegrees', false),\n            poseRoll: getXMPValue(data, 'PoseRollDegrees', false),\n            initialHeading: getXMPValue(data, 'InitialViewHeadingDegrees', false),\n            initialPitch: getXMPValue(data, 'InitialViewPitchDegrees', false),\n            initialFov: getXMPValue(data, 'InitialHorizontalFOVDegrees', false),\n        };\n    }\n\n    /**\n     * Reads a Blob as a string\n     */\n    private loadBlobAsString(blob: Blob): Promise<string> {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result as string);\n            reader.onerror = reject;\n            reader.readAsText(blob);\n        });\n    }\n\n    /**\n     * Creates the final texture from image and panorama data\n     */\n    private createEquirectangularTexture(img: HTMLImageElement): Texture {\n        if (this.config.blur || img.width > SYSTEM.maxTextureWidth) {\n            const ratio = Math.min(1, SYSTEM.maxCanvasWidth / img.width);\n\n            const buffer = new OffscreenCanvas(Math.floor(img.width * ratio), Math.floor(img.height * ratio));\n\n            const ctx = buffer.getContext('2d');\n\n            if (this.config.blur) {\n                ctx.filter = `blur(${buffer.width / 2048}px)`;\n            }\n\n            ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n            return createTexture(buffer);\n        }\n\n        return createTexture(img);\n    }\n\n    createMesh(panoData: PanoData): EquirectangularMesh {\n        const hStart = (panoData.croppedX / panoData.fullWidth) * 2 * Math.PI;\n        const hLength = (panoData.croppedWidth / panoData.fullWidth) * 2 * Math.PI;\n        const vStart = (panoData.croppedY / panoData.fullHeight) * Math.PI;\n        const vLength = (panoData.croppedHeight / panoData.fullHeight) * Math.PI;\n\n        // The middle of the panorama is placed at yaw=0\n        const geometry = new SphereGeometry(\n            SPHERE_RADIUS,\n            Math.round((this.SPHERE_SEGMENTS / (2 * Math.PI)) * hLength),\n            Math.round((this.SPHERE_HORIZONTAL_SEGMENTS / Math.PI) * vLength),\n            -Math.PI / 2 + hStart,\n            hLength,\n            vStart,\n            vLength,\n        ).scale(-1, 1, 1);\n\n        const material = new MeshBasicMaterial({ depthTest: false, depthWrite: false });\n\n        return new Mesh(geometry, material);\n    }\n\n    setTexture(mesh: EquirectangularMesh, textureData: EquirectangularTextureData) {\n        mesh.material.map = textureData.texture;\n    }\n\n    setTextureOpacity(mesh: EquirectangularMesh, opacity: number) {\n        mesh.material.opacity = opacity;\n        mesh.material.transparent = opacity < 1;\n    }\n\n    disposeTexture({ texture }: EquirectangularTextureData) {\n        texture.dispose();\n    }\n\n    disposeMesh(mesh: EquirectangularMesh) {\n        mesh.geometry.dispose();\n        mesh.material.dispose();\n    }\n}\n","import { ResolvableBoolean } from '../model';\nimport { PSVError } from '../PSVError';\nimport { VIEWER_DATA } from './constants';\n\nconst LOCALSTORAGE_TOUCH_SUPPORT = `${VIEWER_DATA}_touchSupport`;\n\n/**\n * General information about the system\n */\nexport const SYSTEM = {\n    /**\n     * Indicates if the system data has been loaded\n     */\n    loaded: false,\n\n    /**\n     * Device screen pixel ratio\n     */\n    pixelRatio: 1,\n\n    /**\n     * Device supports WebGL\n     */\n    isWebGLSupported: false,\n\n    /**\n     * Maximum WebGL texture width\n     */\n    maxTextureWidth: 0,\n\n    /**\n     * Device supports touch events\n     */\n    isTouchEnabled: null as ResolvableBoolean,\n\n    /**\n     * @internal\n     */\n    __maxCanvasWidth: null as number | null,\n\n    /**\n     * If the current device is an iPhone\n     */\n    isIphone: false,\n\n    /**\n     * Maximum canvas width\n     */\n    get maxCanvasWidth(): number {\n        if (this.__maxCanvasWidth === null) {\n            this.__maxCanvasWidth = getMaxCanvasWidth(this.maxTextureWidth);\n        }\n        return this.__maxCanvasWidth;\n    },\n\n    /**\n     * Loads the system if not already loaded\n     * @internal\n     */\n    load() {\n        if (!this.loaded) {\n            const ctx = getWebGLCtx();\n\n            this.pixelRatio = window.devicePixelRatio || 1;\n            this.isWebGLSupported = !!ctx;\n            this.maxTextureWidth = ctx ? ctx.getParameter(ctx.MAX_TEXTURE_SIZE) : 0;\n            this.isTouchEnabled = isTouchEnabled();\n            this.isIphone = /iPhone/i.test(navigator.userAgent);\n            this.loaded = true;\n        }\n\n        if (!SYSTEM.isWebGLSupported) {\n            throw new PSVError('WebGL 2 is not supported.');\n        }\n        if (SYSTEM.maxTextureWidth === 0) {\n            throw new PSVError('Unable to detect system capabilities');\n        }\n    },\n};\n\n/**\n * Tries to return a canvas webgl context\n */\nfunction getWebGLCtx(): WebGLRenderingContext | null {\n    try {\n        const canvas = document.createElement('canvas');\n        return canvas.getContext('webgl2');\n    } catch {\n        return null;\n    }\n}\n\n/**\n * Detects if the user is using a touch screen\n */\nfunction isTouchEnabled(): ResolvableBoolean {\n    let initial = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\n    if (LOCALSTORAGE_TOUCH_SUPPORT in localStorage) {\n        initial = localStorage[LOCALSTORAGE_TOUCH_SUPPORT] === 'true';\n    }\n\n    const promise = new Promise<boolean>((resolve) => {\n        const clear = () => {\n            window.removeEventListener('mousedown', listenerMouse);\n            window.removeEventListener('touchstart', listenerTouch);\n            clearTimeout(listenerTimeoutId);\n        };\n\n        const listenerMouse = () => {\n            clear();\n            localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = false;\n            resolve(false);\n        };\n\n        const listenerTouch = () => {\n            clear();\n            localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = true;\n            resolve(true);\n        };\n\n        const listenerTimeout = () => {\n            clear();\n            localStorage[LOCALSTORAGE_TOUCH_SUPPORT] = initial;\n            resolve(initial);\n        };\n\n        window.addEventListener('mousedown', listenerMouse, false);\n        window.addEventListener('touchstart', listenerTouch, false);\n        const listenerTimeoutId = setTimeout(listenerTimeout, 10000);\n    });\n\n    return { initial, promise };\n}\n\n/**\n * Gets max canvas width supported by the browser.\n * We only test powers of 2 and height = width / 2 because that's what we need to generate WebGL textures\n * Adapted from https://github.com/jhildenbiddle/canvas-size\n */\nfunction getMaxCanvasWidth(maxWidth: number): number {\n    let width = maxWidth;\n    let pass = false;\n\n    // use 1x1 canvas to reduce the time for getImageData to complete\n    const cropCanvas = document.createElement('canvas');\n    const cropCtx = cropCanvas.getContext('2d');\n    cropCanvas.width = 1;\n    cropCanvas.height = 1;\n\n    while (width > 1024 && !pass) {\n        const testCanvas = document.createElement('canvas');\n        const testCtx = testCanvas.getContext('2d');\n        testCanvas.width = width;\n        testCanvas.height = width / 2;\n\n        try {\n            testCtx.fillStyle = 'white';\n            testCtx.fillRect(width - 1, width / 2 - 1, 1, 1);\n\n            cropCtx.drawImage(testCanvas, width - 1, width / 2 - 1, 1, 1, 0, 0, 1, 1);\n\n            if (cropCtx.getImageData(0, 0, 1, 1).data[0] > 0) {\n                pass = true;\n            }\n        } catch {\n            // continue\n        }\n\n        // Release canvas elements (Safari memory usage fix)\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        testCanvas.width = 0;\n        testCanvas.height = 0;\n\n        if (!pass) {\n            width /= 2;\n        }\n    }\n\n    if (pass) {\n        return width;\n    } else {\n        throw new PSVError('Unable to detect system capabilities');\n    }\n}\n","import type { Viewer } from '../Viewer';\n\n/**\n * Base class for UI components\n */\nexport abstract class AbstractComponent {\n    /**\n     * Reference to main controller\n     */\n    protected readonly viewer: Viewer;\n\n    /**\n     * All child components\n     * @internal\n     */\n    readonly children: AbstractComponent[] = [];\n\n    /**\n     * Container element\n     */\n    readonly container: HTMLElement;\n\n    /**\n     * Internal properties\n     * @internal\n     */\n    protected readonly state = {\n        visible: true,\n    };\n\n    constructor(\n        protected readonly parent: Viewer | AbstractComponent,\n        config: { className?: string; tagName?: string },\n    ) {\n        this.viewer = parent instanceof AbstractComponent ? parent.viewer : parent;\n\n        this.container = document.createElement(config.tagName ?? 'div');\n        this.container.className = config.className || '';\n\n        this.parent.children.push(this);\n        this.parent.container.appendChild(this.container);\n    }\n\n    /**\n     * Destroys the component\n     */\n    destroy() {\n        this.parent.container.removeChild(this.container);\n\n        const childIdx = this.parent.children.indexOf(this);\n        if (childIdx !== -1) {\n            this.parent.children.splice(childIdx, 1);\n        }\n\n        this.children.slice().forEach(child => child.destroy());\n        this.children.length = 0;\n    }\n\n    /**\n     * Displays or hides the component\n     */\n    toggle(visible = !this.isVisible()) {\n        if (!visible) {\n            this.hide();\n        } else {\n            this.show();\n        }\n    }\n\n    /**\n     * Hides the component\n     */\n    // @ts-ignore unused parameter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    hide(options?: any) {\n        this.container.style.display = 'none';\n        this.state.visible = false;\n    }\n\n    /**\n     * Displays the component\n     */\n    // @ts-ignore unused parameter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    show(options?: any) {\n        this.container.style.display = '';\n        this.state.visible = true;\n    }\n\n    /**\n     * Checks if the component is visible\n     */\n    isVisible(): boolean {\n        return this.state.visible;\n    }\n}\n","import { AbstractComponent } from '../components/AbstractComponent';\nimport type { Navbar } from '../components/Navbar';\nimport { KEY_CODES } from '../data/constants';\nimport { ResolvableBoolean } from '../model';\nimport { addClasses, getConfigParser, resolveBoolean, toggleClass } from '../utils';\n\n/**\n * Configuration for {@link AbstractButton}\n */\nexport type ButtonConfig = {\n    id?: string;\n    tagName?: string;\n    className?: string;\n    title?: string;\n    /**\n     * if the button has an mouse hover effect\n     * @default false\n     */\n    hoverScale?: boolean;\n    /**\n     * if the button can be moved to menu when the navbar is too small\n     * @default false\n     */\n    collapsable?: boolean;\n    /**\n     * if the button is accessible with the keyboard\n     * @default true\n     */\n    tabbable?: boolean;\n    /**\n     * icon of the button\n     */\n    icon?: string;\n    /**\n     * override icon when the button is active\n     */\n    iconActive?: string;\n};\n\nconst getConfig = getConfigParser<ButtonConfig>({\n    id: null,\n    tagName: null,\n    className: null,\n    title: null,\n    hoverScale: false,\n    collapsable: false,\n    tabbable: true,\n    icon: null,\n    iconActive: null,\n});\n\n/**\n * Base class for navbar buttons\n */\nexport abstract class AbstractButton extends AbstractComponent {\n    /**\n     * Unique identifier of the button\n     */\n    static readonly id: string;\n\n    /**\n     * Identifier to declare a group of buttons\n     */\n    static readonly groupId?: string;\n\n    /**\n     * Internal properties\n     */\n    protected override readonly state = {\n        visible: true,\n        enabled: true,\n        supported: true,\n        collapsed: false,\n        active: false,\n        width: 0,\n    };\n\n    protected readonly config: ButtonConfig;\n\n    get id(): string {\n        return this.config.id;\n    }\n\n    get title(): string {\n        return this.container.title;\n    }\n\n    get content(): string {\n        return this.container.innerHTML;\n    }\n\n    get width(): number {\n        return this.state.width;\n    }\n\n    get collapsable(): boolean {\n        return this.config.collapsable;\n    }\n\n    constructor(navbar: Navbar, config: ButtonConfig) {\n        super(navbar, {\n            tagName: config.tagName,\n            className: `psv-button ${config.hoverScale ? 'psv-button--hover-scale' : ''} ${config.className || ''}`,\n        });\n\n        this.config = getConfig(config);\n        if (!config.id) {\n            this.config.id = (this.constructor as typeof AbstractButton).id;\n        }\n\n        if (config.icon) {\n            this.__setIcon(config.icon);\n        }\n\n        this.state.width = this.container.offsetWidth;\n\n        if (this.config.title) {\n            this.container.title = this.viewer.config.lang[this.config.title] ?? this.config.title;\n        } else if (this.id && this.id in this.viewer.config.lang) {\n            this.container.title = (this.viewer.config.lang as any)[this.id];\n        }\n\n        if (config.tabbable) {\n            this.container.tabIndex = 0;\n        }\n\n        this.container.addEventListener('click', (e) => {\n            if (this.state.enabled) {\n                this.onClick();\n            }\n            e.stopPropagation();\n        });\n\n        this.container.addEventListener('keydown', (e) => {\n            if (e.key === KEY_CODES.Enter && this.state.enabled) {\n                this.onClick();\n                e.stopPropagation();\n            }\n        });\n    }\n\n    /**\n     * Action when the button is clicked\n     */\n    abstract onClick(): void;\n\n    override show(refresh = true) {\n        if (!this.isVisible()) {\n            this.state.visible = true;\n            if (!this.state.collapsed) {\n                this.container.style.display = '';\n            }\n            if (refresh) {\n                this.viewer.navbar.autoSize();\n            }\n        }\n    }\n\n    override hide(refresh = true) {\n        if (this.isVisible()) {\n            this.state.visible = false;\n            this.container.style.display = 'none';\n            if (refresh) {\n                this.viewer.navbar.autoSize();\n            }\n        }\n    }\n\n    /**\n     * Hides/shows the button depending of the result of {@link isSupported}\n     * @internal\n     */\n    checkSupported() {\n        resolveBoolean(this.isSupported(), (supported, init) => {\n            if (!this.state) {\n                return; // the component has been destroyed\n            }\n            this.state.supported = supported;\n            if (!init) {\n                this.toggle(supported);\n            } else if (!supported) {\n                this.hide();\n            }\n        });\n    }\n\n    /**\n     * Perform action when the navbar size/content changes\n     * @internal\n     */\n    autoSize() {\n        // nothing\n    }\n\n    /**\n     * Checks if the button can be displayed\n     */\n    isSupported(): boolean | ResolvableBoolean {\n        return true;\n    }\n\n    /**\n     * Changes the active state of the button\n     */\n    toggleActive(active = !this.state.active) {\n        if (active !== this.state.active) {\n            this.state.active = active;\n            toggleClass(this.container, 'psv-button--active', this.state.active);\n\n            if (this.config.iconActive) {\n                this.__setIcon(this.state.active ? this.config.iconActive : this.config.icon);\n            }\n        }\n    }\n\n    /**\n     * Disables the button\n     */\n    disable() {\n        this.container.classList.add('psv-button--disabled');\n        this.state.enabled = false;\n    }\n\n    /**\n     * Enables the button\n     */\n    enable() {\n        this.container.classList.remove('psv-button--disabled');\n        this.state.enabled = true;\n    }\n\n    /**\n     * Collapses the button in the navbar menu\n     */\n    collapse() {\n        this.state.collapsed = true;\n        this.container.style.display = 'none';\n    }\n\n    /**\n     * Uncollapses the button from the navbar menu\n     */\n    uncollapse() {\n        this.state.collapsed = false;\n        if (this.state.visible) {\n            this.container.style.display = '';\n        }\n    }\n\n    private __setIcon(icon: string) {\n        this.container.innerHTML = icon;\n        addClasses(this.container.querySelector('svg'), 'psv-button-svg');\n    }\n}\n\nexport type ButtonConstructor = (new (navbar: Navbar) => AbstractButton) & typeof AbstractButton;\n","import type { Navbar } from '../components/Navbar';\nimport { NavbarCustomButton } from '../model';\nimport { AbstractButton } from './AbstractButton';\n\nexport class CustomButton extends AbstractButton {\n    private readonly customOnClick: NavbarCustomButton['onClick'];\n\n    constructor(navbar: Navbar, config: NavbarCustomButton) {\n        super(navbar, {\n            id: config.id ?? `psvButton-${Math.random().toString(36).substring(2)}`,\n            className: `psv-custom-button ${config.className || ''}`,\n            hoverScale: false,\n            collapsable: config.collapsable !== false,\n            tabbable: config.tabbable !== false,\n            title: config.title,\n        });\n\n        this.customOnClick = config.onClick;\n\n        if (config.content) {\n            if (typeof config.content === 'string') {\n                this.container.innerHTML = config.content;\n            } else {\n                this.container.classList.add('psv-custom-button--no-padding');\n                config.content.style.height = '100%';\n                config.content.attachViewer?.(this.viewer);\n                this.container.appendChild(config.content);\n            }\n        }\n\n        this.state.width = this.container.offsetWidth;\n\n        if (config.disabled) {\n            this.disable();\n        }\n\n        if (config.visible === false) {\n            this.hide();\n        }\n    }\n\n    onClick() {\n        this.customOnClick?.(this.viewer);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { ICONS, IDS } from '../data/constants';\nimport {\n    ConfigChangedEvent,\n    HideNotificationEvent,\n    HidePanelEvent,\n    ShowNotificationEvent,\n    ShowPanelEvent,\n} from '../events';\nimport { AbstractButton } from './AbstractButton';\n\nconst enum DescriptionButtonMode {\n    NONE,\n    NOTIF,\n    PANEL,\n}\n\nexport class DescriptionButton extends AbstractButton {\n    static override readonly id = 'description';\n\n    private mode = DescriptionButtonMode.NONE;\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-description-button',\n            hoverScale: true,\n            collapsable: false,\n            tabbable: true,\n            icon: ICONS.info,\n        });\n\n        this.viewer.addEventListener(HideNotificationEvent.type, this);\n        this.viewer.addEventListener(ShowNotificationEvent.type, this);\n        this.viewer.addEventListener(HidePanelEvent.type, this);\n        this.viewer.addEventListener(ShowPanelEvent.type, this);\n        this.viewer.addEventListener(ConfigChangedEvent.type, this);\n    }\n\n    override destroy() {\n        this.viewer.removeEventListener(HideNotificationEvent.type, this);\n        this.viewer.removeEventListener(ShowNotificationEvent.type, this);\n        this.viewer.removeEventListener(HidePanelEvent.type, this);\n        this.viewer.removeEventListener(ShowPanelEvent.type, this);\n        this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof ConfigChangedEvent) {\n            e.containsOptions('description') && this.autoSize(true);\n            return;\n        }\n\n        if (!this.mode) {\n            return;\n        }\n\n        let closed = false;\n        if (e instanceof HideNotificationEvent) {\n            closed = this.mode === DescriptionButtonMode.NOTIF;\n        } else if (e instanceof ShowNotificationEvent) {\n            closed = this.mode === DescriptionButtonMode.NOTIF && e.notificationId !== IDS.DESCRIPTION;\n        } else if (e instanceof HidePanelEvent) {\n            closed = this.mode === DescriptionButtonMode.PANEL;\n        } else if (e instanceof ShowPanelEvent) {\n            closed = this.mode === DescriptionButtonMode.PANEL && e.panelId !== IDS.DESCRIPTION;\n        }\n\n        if (closed) {\n            this.toggleActive(false);\n            this.mode = DescriptionButtonMode.NONE;\n        }\n    }\n\n    onClick() {\n        if (this.mode) {\n            this.__close();\n        } else {\n            this.__open();\n        }\n    }\n\n    override hide(refresh?: boolean) {\n        super.hide(refresh);\n\n        if (this.mode) {\n            this.__close();\n        }\n    }\n\n    /**\n     * This button can only be refreshed from NavbarCaption\n     * @internal\n     */\n    override autoSize(refresh = false) {\n        if (refresh) {\n            const caption = this.viewer.navbar.getButton('caption', false);\n            const captionHidden = caption && !caption.isVisible();\n            const hasDescription = !!this.viewer.config.description;\n\n            if (captionHidden || hasDescription) {\n                this.show(false);\n            } else {\n                this.hide(false);\n            }\n        }\n    }\n\n    private __close() {\n        switch (this.mode) {\n            case DescriptionButtonMode.NOTIF:\n                this.viewer.notification.hide(IDS.DESCRIPTION);\n                break;\n            case DescriptionButtonMode.PANEL:\n                this.viewer.panel.hide(IDS.DESCRIPTION);\n                break;\n            default:\n        }\n    }\n\n    private __open() {\n        this.toggleActive(true);\n\n        if (this.viewer.config.description) {\n            this.mode = DescriptionButtonMode.PANEL;\n            this.viewer.panel.show({\n                id: IDS.DESCRIPTION,\n                content: `${this.viewer.config.caption ? `<p>${this.viewer.config.caption}</p>` : ''}${this.viewer.config.description}`,\n            });\n        } else {\n            this.mode = DescriptionButtonMode.NOTIF;\n            this.viewer.notification.show({\n                id: IDS.DESCRIPTION,\n                content: this.viewer.config.caption,\n            });\n        }\n    }\n}\n","import { AbstractAdapter } from '../adapters/AbstractAdapter';\nimport type { Navbar } from '../components/Navbar';\nimport { ICONS } from '../data/constants';\nimport { ConfigChangedEvent, PanoramaLoadedEvent } from '../events';\nimport { AbstractButton } from './AbstractButton';\n\nexport class DownloadButton extends AbstractButton {\n    static override readonly id = 'download';\n\n    readonly link: HTMLAnchorElement;\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            tagName: 'a',\n            className: 'psv-download-button',\n            hoverScale: true,\n            collapsable: true,\n            tabbable: true,\n            icon: ICONS.download,\n        });\n\n        this.viewer.addEventListener(ConfigChangedEvent.type, this);\n        this.viewer.addEventListener(PanoramaLoadedEvent.type, this);\n    }\n\n    override destroy(): void {\n        this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n        this.viewer.removeEventListener(PanoramaLoadedEvent.type, this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof ConfigChangedEvent) {\n            e.containsOptions('downloadUrl') && this.checkSupported();\n            e.containsOptions('downloadUrl', 'downloadName') && this.__update();\n        } else if (e instanceof PanoramaLoadedEvent) {\n            this.__update();\n        }\n    }\n\n    onClick() {\n        // nothing\n    }\n\n    override checkSupported() {\n        const adapter = this.viewer.adapter.constructor as typeof AbstractAdapter;\n        const supported = adapter.supportsDownload || this.viewer.config.downloadUrl;\n        if (supported) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n\n    private __update() {\n        const link = this.container as HTMLAnchorElement;\n        link.href = this.viewer.config.downloadUrl || this.viewer.config.panorama;\n        link.target = '_blank';\n        if (link.href.startsWith('data:') && !this.viewer.config.downloadName) {\n            link.download = 'panorama.' + link.href.substring(0, link.href.indexOf(';')).split('/').pop();\n        } else {\n            link.download = this.viewer.config.downloadName || link.href.split('/').pop();\n        }\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { FullscreenEvent } from '../events';\nimport { AbstractButton } from './AbstractButton';\nimport { ICONS } from '../data/constants';\n\nexport class FullscreenButton extends AbstractButton {\n    static override readonly id = 'fullscreen';\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-fullscreen-button',\n            hoverScale: true,\n            collapsable: false,\n            tabbable: true,\n            icon: ICONS.fullscreenIn,\n            iconActive: ICONS.fullscreenOut,\n        });\n\n        this.viewer.addEventListener(FullscreenEvent.type, this);\n    }\n\n    override destroy() {\n        this.viewer.removeEventListener(FullscreenEvent.type, this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof FullscreenEvent) {\n            this.toggleActive(e.fullscreenEnabled);\n        }\n    }\n\n    onClick() {\n        this.viewer.toggleFullscreen();\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { ICONS, IDS } from '../data/constants';\nimport { HidePanelEvent, ShowPanelEvent } from '../events';\nimport { getClosest } from '../utils';\nimport { AbstractButton } from './AbstractButton';\n\nconst BUTTON_DATA = 'psvButton';\n\nconst MENU_TEMPLATE = (buttons: AbstractButton[], title: string) => `\n<div class=\"psv-panel-menu psv-panel-menu--stripped\">\n  <h1 class=\"psv-panel-menu-title\">${ICONS.menu} ${title}</h1>\n  <ul class=\"psv-panel-menu-list\">\n    ${buttons\n        .map(\n            button => `\n    <li data-psv-button=\"${button.id}\" class=\"psv-panel-menu-item\" tabindex=\"0\">\n      <span class=\"psv-panel-menu-item-icon\">${button.content}</span>\n      <span class=\"psv-panel-menu-item-label\">${button.title}</span>\n    </li>\n    `,\n        )\n        .join('')}\n  </ul>\n</div>\n`;\n\nexport class MenuButton extends AbstractButton {\n    static override readonly id = 'menu';\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-menu-button',\n            hoverScale: true,\n            collapsable: false,\n            tabbable: true,\n            icon: ICONS.menu,\n        });\n\n        this.viewer.addEventListener(ShowPanelEvent.type, this);\n        this.viewer.addEventListener(HidePanelEvent.type, this);\n\n        super.hide();\n    }\n\n    override destroy() {\n        this.viewer.removeEventListener(ShowPanelEvent.type, this);\n        this.viewer.removeEventListener(HidePanelEvent.type, this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof ShowPanelEvent) {\n            this.toggleActive(e.panelId === IDS.MENU);\n        } else if (e instanceof HidePanelEvent) {\n            this.toggleActive(false);\n        }\n    }\n\n    onClick() {\n        if (this.state.active) {\n            this.__hideMenu();\n        } else {\n            this.__showMenu();\n        }\n    }\n\n    override hide(refresh?: boolean) {\n        super.hide(refresh);\n        this.__hideMenu();\n    }\n\n    override show(refresh?: boolean) {\n        super.show(refresh);\n\n        if (this.state.active) {\n            this.__showMenu();\n        }\n    }\n\n    private __showMenu() {\n        this.viewer.panel.show({\n            id: IDS.MENU,\n            content: MENU_TEMPLATE(this.viewer.navbar.collapsed, this.viewer.config.lang.menu),\n            noMargin: true,\n            clickHandler: (target) => {\n                const li = target ? getClosest(target as HTMLElement, '.psv-panel-menu-item') : undefined;\n                const buttonId = li ? li.dataset[BUTTON_DATA] : undefined;\n\n                if (buttonId) {\n                    this.viewer.navbar.getButton(buttonId).onClick();\n                    this.__hideMenu();\n                }\n            },\n        });\n    }\n\n    private __hideMenu() {\n        this.viewer.panel.hide(IDS.MENU);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { ICONS, KEY_CODES } from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport { invertResolvableBoolean } from '../utils';\nimport { PressHandler } from '../utils/PressHandler';\nimport { AbstractButton } from './AbstractButton';\n\nexport const enum MoveButtonDirection {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT,\n}\n\nfunction getIcon(value: MoveButtonDirection): string {\n    let angle = 0;\n    switch (value) {\n        case MoveButtonDirection.UP: angle = 90; break;\n        case MoveButtonDirection.DOWN: angle = -90; break;\n        case MoveButtonDirection.RIGHT: angle = 180; break;\n        default: angle = 0; break;\n    }\n\n    return ICONS.arrow.replace('rotate(0', `rotate(${angle}`);\n}\n\nexport abstract class AbstractMoveButton extends AbstractButton {\n    static override readonly groupId = 'move';\n\n    private readonly handler = new PressHandler();\n\n    constructor(\n        navbar: Navbar,\n        private direction: MoveButtonDirection,\n    ) {\n        super(navbar, {\n            className: 'psv-move-button',\n            hoverScale: true,\n            collapsable: false,\n            tabbable: true,\n            icon: getIcon(direction),\n        });\n\n        this.container.addEventListener('mousedown', this);\n        this.container.addEventListener('keydown', this);\n        this.container.addEventListener('keyup', this);\n        this.viewer.container.addEventListener('mouseup', this);\n        this.viewer.container.addEventListener('touchend', this);\n    }\n\n    override destroy() {\n        this.__onMouseUp();\n\n        this.viewer.container.removeEventListener('mouseup', this);\n        this.viewer.container.removeEventListener('touchend', this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case 'mousedown': this.__onMouseDown(); break;\n            case 'mouseup': this.__onMouseUp(); break;\n            case 'touchend': this.__onMouseUp(); break;\n            case 'keydown': (e as KeyboardEvent).key === KEY_CODES.Enter && this.__onMouseDown(); break;\n            case 'keyup': (e as KeyboardEvent).key === KEY_CODES.Enter && this.__onMouseUp(); break;\n        }\n    }\n\n    onClick() {\n        // nothing\n    }\n\n    override isSupported() {\n        return invertResolvableBoolean(SYSTEM.isTouchEnabled);\n    }\n\n    private __onMouseDown() {\n        if (!this.state.enabled) {\n            return;\n        }\n\n        const dynamicRoll: {\n            yaw?: boolean;\n            pitch?: boolean;\n        } = {};\n        switch (this.direction) {\n            case MoveButtonDirection.UP: dynamicRoll.pitch = false; break;\n            case MoveButtonDirection.DOWN: dynamicRoll.pitch = true; break;\n            case MoveButtonDirection.RIGHT: dynamicRoll.yaw = false; break;\n            default: dynamicRoll.yaw = true; break;\n        }\n\n        this.viewer.stopAll();\n        this.viewer.dynamics.position.roll(dynamicRoll);\n        this.handler.down();\n    }\n\n    private __onMouseUp() {\n        if (!this.state.enabled) {\n            return;\n        }\n\n        this.handler.up(() => {\n            this.viewer.dynamics.position.stop();\n            this.viewer.resetIdleTimer();\n        });\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { AbstractMoveButton, MoveButtonDirection } from './AbstractMoveButton';\n\nexport class MoveDownButton extends AbstractMoveButton {\n    static override readonly id = 'moveDown';\n\n    constructor(navbar: Navbar) {\n        super(navbar, MoveButtonDirection.DOWN);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { AbstractMoveButton, MoveButtonDirection } from './AbstractMoveButton';\n\nexport class MoveLeftButton extends AbstractMoveButton {\n    static override readonly id = 'moveLeft';\n\n    constructor(navbar: Navbar) {\n        super(navbar, MoveButtonDirection.LEFT);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { AbstractMoveButton, MoveButtonDirection } from './AbstractMoveButton';\n\nexport class MoveRightButton extends AbstractMoveButton {\n    static override readonly id = 'moveRight';\n\n    constructor(navbar: Navbar) {\n        super(navbar, MoveButtonDirection.RIGHT);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { AbstractMoveButton, MoveButtonDirection } from './AbstractMoveButton';\n\nexport class MoveUpButton extends AbstractMoveButton {\n    static override readonly id = 'moveUp';\n\n    constructor(navbar: Navbar) {\n        super(navbar, MoveButtonDirection.UP);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { KEY_CODES } from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport { invertResolvableBoolean } from '../utils';\nimport { PressHandler } from '../utils/PressHandler';\nimport { AbstractButton } from './AbstractButton';\n\nexport const enum ZoomButtonDirection {\n    IN,\n    OUT,\n}\n\nexport class AbstractZoomButton extends AbstractButton {\n    static override readonly groupId = 'zoom';\n\n    private readonly handler = new PressHandler();\n\n    constructor(\n        navbar: Navbar,\n        icon: string,\n        private direction: ZoomButtonDirection,\n    ) {\n        super(navbar, {\n            className: 'psv-zoom-button',\n            hoverScale: true,\n            collapsable: false,\n            tabbable: true,\n            icon: icon,\n        });\n\n        this.container.addEventListener('mousedown', this);\n        this.container.addEventListener('keydown', this);\n        this.container.addEventListener('keyup', this);\n        this.viewer.container.addEventListener('mouseup', this);\n        this.viewer.container.addEventListener('touchend', this);\n    }\n\n    override destroy() {\n        this.__onMouseUp();\n\n        this.viewer.container.removeEventListener('mouseup', this);\n        this.viewer.container.removeEventListener('touchend', this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case 'mousedown': this.__onMouseDown(); break;\n            case 'mouseup': this.__onMouseUp(); break;\n            case 'touchend': this.__onMouseUp(); break;\n            case 'keydown': (e as KeyboardEvent).key === KEY_CODES.Enter && this.__onMouseDown(); break;\n            case 'keyup': (e as KeyboardEvent).key === KEY_CODES.Enter && this.__onMouseUp(); break;\n        }\n    }\n\n    onClick() {\n        // nothing\n    }\n\n    override isSupported() {\n        return invertResolvableBoolean(SYSTEM.isTouchEnabled);\n    }\n\n    private __onMouseDown() {\n        if (!this.state.enabled) {\n            return;\n        }\n\n        this.viewer.dynamics.zoom.roll(this.direction === ZoomButtonDirection.OUT);\n        this.handler.down();\n    }\n\n    private __onMouseUp() {\n        if (!this.state.enabled) {\n            return;\n        }\n\n        this.handler.up(() => this.viewer.dynamics.zoom.stop());\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { ICONS } from '../data/constants';\nimport { AbstractZoomButton, ZoomButtonDirection } from './AbstractZoomButton';\n\nexport class ZoomInButton extends AbstractZoomButton {\n    static override readonly id = 'zoomIn';\n\n    constructor(navbar: Navbar) {\n        super(navbar, ICONS.zoomIn, ZoomButtonDirection.IN);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { ICONS } from '../data/constants';\nimport { AbstractZoomButton, ZoomButtonDirection } from './AbstractZoomButton';\n\nexport class ZoomOutButton extends AbstractZoomButton {\n    static override readonly id = 'zoomOut';\n\n    constructor(navbar: Navbar) {\n        super(navbar, ICONS.zoomOut, ZoomButtonDirection.OUT);\n    }\n}\n","import type { Navbar } from '../components/Navbar';\nimport { SYSTEM } from '../data/system';\nimport { ReadyEvent, ZoomUpdatedEvent } from '../events';\nimport { Slider, SliderDirection, SliderUpdateData, getStyleProperty, invertResolvableBoolean } from '../utils';\nimport { AbstractButton } from './AbstractButton';\n\nexport class ZoomRangeButton extends AbstractButton {\n    static override readonly id = 'zoomRange';\n    static override readonly groupId = 'zoom';\n\n    private readonly slider: Slider;\n    private readonly zoomRange: HTMLElement;\n    private readonly zoomValue: HTMLElement;\n    private readonly mediaMinWidth: number;\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-zoom-range',\n            hoverScale: false,\n            collapsable: false,\n            tabbable: false,\n        });\n\n        this.zoomRange = document.createElement('div');\n        this.zoomRange.className = 'psv-zoom-range-line';\n        this.container.appendChild(this.zoomRange);\n\n        this.zoomValue = document.createElement('div');\n        this.zoomValue.className = 'psv-zoom-range-handle';\n        this.zoomRange.appendChild(this.zoomValue);\n\n        this.slider = new Slider(this.container, SliderDirection.HORIZONTAL, data => this.__onSliderUpdate(data));\n\n        this.mediaMinWidth = parseInt(getStyleProperty(this.container, 'max-width'), 10);\n\n        this.viewer.addEventListener(ZoomUpdatedEvent.type, this);\n        if (this.viewer.state.ready) {\n            this.__moveZoomValue(this.viewer.getZoomLevel());\n        } else {\n            this.viewer.addEventListener(ReadyEvent.type, this);\n        }\n    }\n\n    override destroy() {\n        this.slider.destroy();\n\n        this.viewer.removeEventListener(ZoomUpdatedEvent.type, this);\n        this.viewer.removeEventListener(ReadyEvent.type, this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        if (e instanceof ZoomUpdatedEvent) {\n            this.__moveZoomValue(e.zoomLevel);\n        } else if (e instanceof ReadyEvent) {\n            this.__moveZoomValue(this.viewer.getZoomLevel());\n        }\n    }\n\n    onClick() {\n        // nothing\n    }\n\n    override isSupported() {\n        return invertResolvableBoolean(SYSTEM.isTouchEnabled);\n    }\n\n    override autoSize() {\n        if (this.state.supported) {\n            if (this.viewer.state.size.width <= this.mediaMinWidth && this.state.visible) {\n                this.hide(false);\n            } else if (this.viewer.state.size.width > this.mediaMinWidth && !this.state.visible) {\n                this.show(false);\n            }\n        }\n    }\n\n    private __moveZoomValue(level: number) {\n        this.zoomValue.style.left = (level / 100) * this.zoomRange.offsetWidth - this.zoomValue.offsetWidth / 2 + 'px';\n    }\n\n    private __onSliderUpdate(data: SliderUpdateData) {\n        if (data.mousedown) {\n            this.viewer.zoom(data.value * 100);\n        }\n    }\n}\n","import { MathUtils } from 'three';\nimport { PSVError } from '../PSVError';\nimport { adapterInterop } from '../adapters/AbstractAdapter';\nimport { EquirectangularAdapter } from '../adapters/EquirectangularAdapter';\nimport { ParsedViewerConfig, ReadonlyViewerConfig, ViewerConfig } from '../model';\nimport { pluginInterop } from '../plugins/AbstractPlugin';\nimport { ConfigParsers, clone, getConfigParser, logWarn, parseAngle } from '../utils';\nimport { ACTIONS, KEY_CODES } from './constants';\n\n/**\n * Default options\n */\nexport const DEFAULTS: Required<ParsedViewerConfig> = {\n    panorama: null,\n    container: null,\n    adapter: [EquirectangularAdapter as any, null],\n    plugins: [],\n    caption: null,\n    description: null,\n    downloadUrl: null,\n    downloadName: null,\n    loadingImg: null,\n    loadingTxt: '', // empty string => `lang.loading`\n    size: null,\n    fisheye: 0,\n    minFov: 30,\n    maxFov: 90,\n    defaultZoomLvl: 50,\n    defaultYaw: 0,\n    defaultPitch: 0,\n    sphereCorrection: null,\n    moveSpeed: 1,\n    zoomSpeed: 1,\n    moveInertia: 0.8,\n    mousewheel: true,\n    mousemove: true,\n    mousewheelCtrlKey: false,\n    touchmoveTwoFingers: false,\n    panoData: null,\n    requestHeaders: null,\n    canvasBackground: '#000',\n    defaultTransition: {\n        speed: 1500,\n        rotation: true,\n        effect: 'fade',\n    },\n    rendererParameters: { alpha: true, antialias: true },\n    withCredentials: false,\n    navbar: [\n        'zoom',\n        'move',\n        'download',\n        'description',\n        'caption',\n        'fullscreen',\n    ],\n    lang: {\n        zoom: 'Zoom',\n        zoomOut: 'Zoom out',\n        zoomIn: 'Zoom in',\n        moveUp: 'Move up',\n        moveDown: 'Move down',\n        moveLeft: 'Move left',\n        moveRight: 'Move right',\n        description: 'Description',\n        download: 'Download',\n        fullscreen: 'Fullscreen',\n        loading: 'Loading...',\n        menu: 'Menu',\n        close: 'Close',\n        twoFingers: 'Use two fingers to navigate',\n        ctrlZoom: 'Use ctrl + scroll to zoom the image',\n        loadError: 'The panorama cannot be loaded',\n        webglError: 'Your browser does not seem to support WebGL',\n    },\n    keyboard: 'fullscreen',\n    keyboardActions: {\n        [KEY_CODES.ArrowUp]: ACTIONS.ROTATE_UP,\n        [KEY_CODES.ArrowDown]: ACTIONS.ROTATE_DOWN,\n        [KEY_CODES.ArrowRight]: ACTIONS.ROTATE_RIGHT,\n        [KEY_CODES.ArrowLeft]: ACTIONS.ROTATE_LEFT,\n        [KEY_CODES.PageUp]: ACTIONS.ZOOM_IN,\n        [KEY_CODES.PageDown]: ACTIONS.ZOOM_OUT,\n        [KEY_CODES.Plus]: ACTIONS.ZOOM_IN,\n        [KEY_CODES.Minus]: ACTIONS.ZOOM_OUT,\n    },\n};\n\n/**\n * List of unmodifiable options and their error messages\n * @internal\n */\nexport const READONLY_OPTIONS: Record<ReadonlyViewerConfig, string> = {\n    panorama: 'Use setPanorama method to change the panorama',\n    panoData: 'Use setPanorama method to change the panorama',\n    container: 'Cannot change viewer container',\n    adapter: 'Cannot change adapter',\n    plugins: 'Cannot change plugins',\n};\n\n/**\n * Parsers/validators for each option\n * @internal\n */\nexport const CONFIG_PARSERS: ConfigParsers<ViewerConfig, ParsedViewerConfig> = {\n    container: (container) => {\n        if (!container) {\n            throw new PSVError('No value given for container.');\n        }\n        return container;\n    },\n    adapter: (adapter, { defValue }) => {\n        if (!adapter) {\n            adapter = defValue;\n        } else if (Array.isArray(adapter)) {\n            adapter = [adapterInterop(adapter[0]), adapter[1]];\n        } else {\n            adapter = [adapterInterop(adapter), null];\n        }\n        if (!adapter[0]) {\n            throw new PSVError('An undefined value was given for adapter.');\n        }\n        if (!(adapter[0] as any).id) {\n            throw new PSVError(`Adapter has no id.`);\n        }\n        return adapter;\n    },\n    defaultYaw: (defaultYaw) => {\n        // defaultYaw is between 0 and PI\n        return parseAngle(defaultYaw);\n    },\n    defaultPitch: (defaultPitch) => {\n        // defaultPitch is between -PI/2 and PI/2\n        return parseAngle(defaultPitch, true);\n    },\n    defaultZoomLvl: (defaultZoomLvl) => {\n        return MathUtils.clamp(defaultZoomLvl, 0, 100);\n    },\n    minFov: (minFov, { rawConfig }) => {\n        // minFov and maxFov must be ordered\n        if (rawConfig.maxFov < minFov) {\n            logWarn('maxFov cannot be lower than minFov');\n            minFov = rawConfig.maxFov;\n        }\n        // minFov between 1 and 179\n        return MathUtils.clamp(minFov, 1, 179);\n    },\n    maxFov: (maxFov, { rawConfig }) => {\n        // minFov and maxFov must be ordered\n        if (maxFov < rawConfig.minFov) {\n            maxFov = rawConfig.minFov;\n        }\n        // maxFov between 1 and 179\n        return MathUtils.clamp(maxFov, 1, 179);\n    },\n    moveInertia: (moveInertia, { defValue }) => {\n        if (moveInertia === true) {\n            return defValue;\n        }\n        if (moveInertia === false) {\n            return 0;\n        }\n        return moveInertia;\n    },\n    lang: (lang) => {\n        return {\n            ...DEFAULTS.lang,\n            ...lang,\n        };\n    },\n    keyboardActions: (keyboardActions, { rawConfig }) => {\n        if (rawConfig.keyboard && typeof rawConfig.keyboard === 'object') {\n            return rawConfig.keyboard;\n        }\n        return keyboardActions;\n    },\n    fisheye: (fisheye) => {\n        // translate boolean fisheye to amount\n        if (fisheye === true) {\n            return 1;\n        } else if (fisheye === false) {\n            return 0;\n        }\n        return fisheye;\n    },\n    requestHeaders: (requestHeaders) => {\n        if (requestHeaders && typeof requestHeaders === 'object') {\n            return () => requestHeaders;\n        }\n        if (typeof requestHeaders === 'function') {\n            return requestHeaders;\n        }\n        return null;\n    },\n    defaultTransition: (defaultTransition, { defValue }) => {\n        if (defaultTransition === null || defaultTransition.speed === 0) {\n            return null;\n        } else {\n            return { ...defValue, ...defaultTransition };\n        }\n    },\n    rendererParameters: (rendererParameters, { defValue }) => ({\n        ...rendererParameters,\n        ...defValue,\n    }),\n    plugins: (plugins) => {\n        return plugins.map((plugin, i) => {\n            if (Array.isArray(plugin)) {\n                plugin = [pluginInterop(plugin[0]), plugin[1]];\n            } else {\n                plugin = [pluginInterop(plugin), null];\n            }\n            if (!plugin[0]) {\n                throw new PSVError(`An undefined value was given for plugin ${i}.`);\n            }\n            if (!(plugin[0] as any).id) {\n                throw new PSVError(`Plugin ${i} has no id.`);\n            }\n            return plugin;\n        });\n    },\n    navbar: (navbar) => {\n        if (navbar === false) {\n            return null;\n        }\n        if (navbar === true) {\n            // true becomes the default array\n            return clone(DEFAULTS.navbar as string[]);\n        }\n        if (typeof navbar === 'string') {\n            // can be a space or coma separated list\n            return navbar.split(/[ ,]/);\n        }\n        return navbar;\n    },\n};\n\n/**\n * @internal\n */\nexport const getViewerConfig = getConfigParser<ViewerConfig, ParsedViewerConfig>(DEFAULTS, CONFIG_PARSERS);\n","import { TypedEvent, TypedEventTarget } from '../lib/TypedEventTarget';\nimport { checkVersion, ConfigParser, logWarn } from '../utils';\nimport type { Viewer } from '../Viewer';\n\n/**\n * Base class for plugins\n * @template TEvents union of dispatched events\n */\nexport abstract class AbstractPlugin<\n    TEvents extends TypedEvent<AbstractPlugin> = never,\n> extends TypedEventTarget<TEvents> {\n    /**\n     * Unique identifier of the plugin\n     */\n    static readonly id: string;\n    /**\n     * Expected version of the core\n     * DO NOT USE on custom plugins\n     */\n    static readonly VERSION: string;\n\n    constructor(protected viewer: Viewer) {\n        super();\n    }\n\n    /**\n     * Initializes the plugin\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init(): void {}\n\n    /**\n     * Destroys the plugin\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    destroy(): void {}\n}\n\n/**\n * Base class for plugins with updatable configuration\n * The implementation must have a static `configParser` property which is the result of {@link utils.getConfigParser}\n *\n * @template TConfig type of input config\n * @template TParsedConfig type of config after parsing\n * @template TUpdatableConfig type of config that can be updated\n * @template TEvents union of dispatched events\n */\nexport abstract class AbstractConfigurablePlugin<\n    TConfig extends Record<string, any>,\n    TParsedConfig extends TConfig = TConfig,\n    TUpdatableConfig extends TConfig = TConfig,\n    TEvents extends TypedEvent<AbstractPlugin> = never,\n> extends AbstractPlugin<TEvents> {\n    static configParser: ConfigParser<any, any>;\n    static readonlyOptions: string[] = [];\n\n    readonly config: TParsedConfig;\n\n    constructor(viewer: Viewer, config: TConfig) {\n        super(viewer);\n\n        this.config = (this.constructor as typeof AbstractConfigurablePlugin).configParser(config) as TParsedConfig;\n    }\n\n    /**\n     * Update options\n     */\n    setOption<T extends keyof TUpdatableConfig>(option: T, value: TUpdatableConfig[T]) {\n        // @ts-ignore\n        this.setOptions({ [option]: value });\n    }\n\n    /**\n     * Update options\n     */\n    setOptions(options: Partial<TUpdatableConfig>) {\n        const rawConfig: TConfig = {\n            ...this.config,\n            ...options,\n        };\n\n        const ctor = this.constructor as typeof AbstractConfigurablePlugin;\n        const parser: ConfigParser<TConfig, TParsedConfig> = ctor.configParser as any;\n        const readonly = ctor.readonlyOptions;\n        const id = ctor.id;\n\n        for (let [key, value] of Object.entries(options) as Array<[keyof TConfig, any]>) {\n            if (!(key in parser.defaults)) {\n                logWarn(`${id}: Unknown option \"${key as string}\"`);\n                continue;\n            }\n\n            if (readonly.includes(key as string)) {\n                logWarn(`${id}: Option \"${key as string}\" cannot be updated`);\n                continue;\n            }\n\n            if (key in parser.parsers) {\n                value = parser.parsers[key](value, {\n                    rawConfig: rawConfig,\n                    defValue: parser.defaults[key],\n                });\n            }\n\n            this.config[key] = value;\n        }\n    }\n}\n\nexport type PluginConstructor = new (viewer: Viewer, config?: any) => AbstractPlugin<any>;\n\n/**\n * Returns the plugin constructor from the imported object\n * @internal\n */\nexport function pluginInterop(plugin: any): PluginConstructor & typeof AbstractPlugin {\n    if (plugin) {\n        for (const [, p] of [['_', plugin], ...Object.entries(plugin)]) {\n            if (p.prototype instanceof AbstractPlugin) {\n                checkVersion(p.id, p.VERSION, PKG_VERSION);\n                return p;\n            }\n        }\n    }\n    return null;\n}\n","import { AbstractButton } from '../buttons/AbstractButton';\nimport { DescriptionButton } from '../buttons/DescriptionButton';\nimport type { Navbar } from './Navbar';\n\nexport class NavbarCaption extends AbstractButton {\n    static override readonly id = 'caption';\n\n    private contentWidth = 0;\n\n    private readonly contentElt: HTMLElement;\n\n    constructor(navbar: Navbar) {\n        super(navbar, {\n            className: 'psv-caption',\n            hoverScale: false,\n            collapsable: false,\n            tabbable: true,\n        });\n\n        this.state.width = 0;\n\n        this.contentElt = document.createElement('div');\n        this.contentElt.className = 'psv-caption-content';\n        this.container.appendChild(this.contentElt);\n\n        this.setCaption(this.viewer.config.caption);\n    }\n\n    override hide() {\n        this.contentElt.style.display = 'none';\n        this.state.visible = false;\n    }\n\n    override show() {\n        this.contentElt.style.display = '';\n        this.state.visible = true;\n    }\n\n    onClick(): void {\n        // nothing\n    }\n\n    /**\n     * Changes the caption\n     */\n    setCaption(html: string | null) {\n        this.show();\n        this.contentElt.innerHTML = html ?? '';\n\n        if (this.contentElt.innerHTML) {\n            this.contentWidth = this.contentElt.offsetWidth;\n        } else {\n            this.contentWidth = 0;\n        }\n\n        this.autoSize();\n    }\n\n    /**\n     * Toggles content and icon depending on available space\n     */\n    override autoSize() {\n        this.toggle(this.container.offsetWidth >= this.contentWidth);\n        this.__refreshButton();\n    }\n\n    private __refreshButton() {\n        (this.viewer.navbar.getButton(DescriptionButton.id, false) as DescriptionButton)?.autoSize(true);\n    }\n}\n","import { AbstractButton, ButtonConstructor } from '../buttons/AbstractButton';\nimport { CustomButton } from '../buttons/CustomButton';\nimport { DescriptionButton } from '../buttons/DescriptionButton';\nimport { DownloadButton } from '../buttons/DownloadButton';\nimport { FullscreenButton } from '../buttons/FullscreenButton';\nimport { MenuButton } from '../buttons/MenuButton';\nimport { MoveDownButton } from '../buttons/MoveDownButton';\nimport { MoveLeftButton } from '../buttons/MoveLeftButton';\nimport { MoveRightButton } from '../buttons/MoveRightButton';\nimport { MoveUpButton } from '../buttons/MoveUpButton';\nimport { ZoomInButton } from '../buttons/ZoomInButton';\nimport { ZoomOutButton } from '../buttons/ZoomOutButton';\nimport { ZoomRangeButton } from '../buttons/ZoomRangeButton';\nimport { DEFAULTS } from '../data/config';\nimport { CAPTURE_EVENTS_CLASS } from '../data/constants';\nimport { ParsedViewerConfig } from '../model';\nimport { PSVError } from '../PSVError';\nimport { logWarn } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { AbstractComponent } from './AbstractComponent';\nimport { NavbarCaption } from './NavbarCaption';\n\n/**\n * List of available buttons\n */\nconst AVAILABLE_BUTTONS: Record<string, ButtonConstructor> = {};\n\n/**\n * List of available buttons\n */\nconst AVAILABLE_GROUPS: Record<string, ButtonConstructor[]> = {};\n\n/**\n * Register a new button available for all viewers\n * @param button\n * @param [defaultPosition]  If provided the default configuration of the navbar will be modified.\n * Possible values are :\n *    - `start`\n *    - `end`\n *    - `[id]:left`\n *    - `[id]:right`\n * @throws {@link PSVError} if the button constructor has no \"id\"\n */\nexport function registerButton(button: ButtonConstructor, defaultPosition?: string) {\n    if (!button.id) {\n        throw new PSVError('Button id is required');\n    }\n\n    AVAILABLE_BUTTONS[button.id] = button;\n\n    if (button.groupId) {\n        (AVAILABLE_GROUPS[button.groupId] = AVAILABLE_GROUPS[button.groupId] || []).push(button);\n    }\n\n    if (defaultPosition) {\n        const navbar = DEFAULTS.navbar as string[];\n        switch (defaultPosition) {\n            case 'start':\n                navbar.unshift(button.id);\n                break;\n            case 'end':\n                navbar.push(button.id);\n                break;\n            default: {\n                const [id, pos] = defaultPosition.split(':');\n                const idx = navbar.indexOf(id);\n                if (!id || !pos || idx === -1) {\n                    throw new PSVError(`Invalid defaultPosition ${defaultPosition}`);\n                }\n                navbar.splice(idx + (pos === 'right' ? 1 : 0), 0, button.id);\n            }\n        }\n    }\n}\n\n[\n    ZoomOutButton,\n    ZoomRangeButton,\n    ZoomInButton,\n    DescriptionButton,\n    NavbarCaption,\n    DownloadButton,\n    FullscreenButton,\n    MoveLeftButton,\n    MoveRightButton,\n    MoveUpButton,\n    MoveDownButton,\n].forEach(btn => registerButton(btn));\n\n/**\n * Navigation bar component\n */\nexport class Navbar extends AbstractComponent {\n    /**\n     * @internal\n     */\n    collapsed: AbstractButton[] = [];\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer, {\n            className: `psv-navbar ${CAPTURE_EVENTS_CLASS}`,\n        });\n\n        this.state.visible = false;\n    }\n\n    /**\n     * Shows the navbar\n     */\n    override show() {\n        this.viewer.container.classList.add('psv--has-navbar');\n        this.container.classList.add('psv-navbar--open');\n        this.state.visible = true;\n    }\n\n    /**\n     * Hides the navbar\n     */\n    override hide() {\n        this.viewer.container.classList.remove('psv--has-navbar');\n        this.container.classList.remove('psv-navbar--open');\n        this.state.visible = false;\n    }\n\n    /**\n     * Change the buttons visible on the navbar\n     */\n    setButtons(buttons: ParsedViewerConfig['navbar']) {\n        this.children.slice().forEach(item => item.destroy());\n        this.children.length = 0;\n\n        // force description button if caption is present (used on narrow screens)\n        if (buttons.indexOf(NavbarCaption.id) !== -1 && buttons.indexOf(DescriptionButton.id) === -1) {\n            buttons.splice(buttons.indexOf(NavbarCaption.id), 0, DescriptionButton.id);\n        }\n\n        buttons.forEach((button) => {\n            if (typeof button === 'object') {\n                new CustomButton(this, button);\n            } else if (AVAILABLE_BUTTONS[button]) {\n                // @ts-ignore\n                new AVAILABLE_BUTTONS[button](this);\n            } else if (AVAILABLE_GROUPS[button]) {\n                AVAILABLE_GROUPS[button].forEach((buttonCtor) => {\n                    // @ts-ignore\n                    new buttonCtor(this);\n                });\n            } else {\n                logWarn(`Unknown button ${button}`);\n            }\n        });\n\n        new MenuButton(this);\n\n        this.children.forEach((item) => {\n            if (item instanceof AbstractButton) {\n                item.checkSupported();\n            }\n        });\n\n        this.autoSize();\n    }\n\n    /**\n     * Changes the navbar caption\n     */\n    setCaption(html: string | null) {\n        this.children.some((item) => {\n            if (item instanceof NavbarCaption) {\n                item.setCaption(html);\n                return true;\n            } else {\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Returns a button by its identifier\n     */\n    getButton(id: string, warnNotFound = true): AbstractButton {\n        const button = this.children.find((item) => {\n            return item instanceof AbstractButton && item.id === id;\n        });\n\n        if (!button && warnNotFound) {\n            logWarn(`button \"${id}\" not found in the navbar`);\n        }\n\n        return button as AbstractButton;\n    }\n\n    /**\n     * Try to focus a button, will focus the first button if the requested button does not exist.\n     */\n    focusButton(id: string) {\n        if (this.isVisible()) {\n            (this.getButton(id, false)?.container || this.container.firstElementChild as HTMLElement)?.focus();\n        }\n    }\n\n    /**\n     * Automatically collapses buttons\n     * @internal\n     */\n    autoSize() {\n        this.children.forEach((child) => {\n            if (child instanceof AbstractButton) {\n                child.autoSize();\n            }\n        });\n\n        const availableWidth = this.container.offsetWidth;\n\n        let totalWidth = 0;\n        const collapsableButtons: AbstractButton[] = [];\n\n        this.children.forEach((item) => {\n            if (item.isVisible() && item instanceof AbstractButton) {\n                totalWidth += item.width;\n                if (item.collapsable) {\n                    collapsableButtons.push(item);\n                }\n            }\n        });\n\n        if (totalWidth === 0) {\n            return;\n        }\n\n        if (availableWidth < totalWidth && collapsableButtons.length > 0) {\n            collapsableButtons.forEach(item => item.collapse());\n            this.collapsed = collapsableButtons;\n\n            this.getButton(MenuButton.id).show(false);\n        } else if (availableWidth >= totalWidth && this.collapsed.length > 0) {\n            this.collapsed.forEach(item => item.uncollapse());\n            this.collapsed = [];\n\n            this.getButton(MenuButton.id).hide(false);\n        }\n\n        this.getButton(NavbarCaption.id, false)?.autoSize();\n    }\n}\n","import { Cache as ThreeCache } from 'three';\nimport { logWarn } from '../utils';\n\nThreeCache.enabled = false;\n\nexport const Cache = {\n    enabled: true,\n\n    maxItems: 10,\n\n    ttl: 10 * 60,\n\n    items: {} as Record<string, { files: Record<string, HTMLImageElement | Blob>; lastAccess: number }>,\n\n    purgeInterval: null as ReturnType<typeof setInterval>,\n\n    init() {\n        if (ThreeCache.enabled) {\n            logWarn('ThreeJS cache should be disabled');\n            ThreeCache.enabled = false;\n        }\n\n        if (!this.purgeInterval && this.enabled) {\n            this.purgeInterval = setInterval(() => this.purge(), 60 * 1000);\n        }\n    },\n\n    add(url: string, key: string, data: HTMLImageElement | Blob) {\n        if (this.enabled && key) {\n            this.items[key] = this.items[key] ?? { files: {}, lastAccess: null };\n            this.items[key].files[url] = data;\n            this.items[key].lastAccess = Date.now();\n        }\n    },\n\n    get(url: string, key: string): HTMLImageElement | Blob {\n        if (this.enabled && key && this.items[key]) {\n            this.items[key].lastAccess = Date.now();\n            return this.items[key].files[url];\n        }\n    },\n\n    remove(url: string, key: string) {\n        if (this.enabled && key && this.items[key]) {\n            delete this.items[key].files[url];\n            if (Object.keys(this.items[key].files).length === 0) {\n                delete this.items[key];\n            }\n        }\n    },\n\n    purge() {\n        Object.entries(this.items)\n            .sort(([, a], [, b]) => {\n                return b.lastAccess - a.lastAccess;\n            })\n            .forEach(([key, { lastAccess }], index) => {\n                // remove expired items and extra numerous items\n                // but always keep the most recent one\n                if (index > 0 && (Date.now() - lastAccess >= this.ttl * 1000 || index >= this.maxItems)) {\n                    delete this.items[key];\n                }\n            });\n    },\n};\n","import { MathUtils } from 'three';\nimport { ConfigChangedEvent } from '../events';\nimport { getStyleProperty } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { AbstractComponent } from './AbstractComponent';\n\n/**\n * Loader component\n */\nexport class Loader extends AbstractComponent {\n    private readonly loader: HTMLElement;\n    private readonly canvas: SVGElement;\n\n    private readonly size: number;\n    private readonly border: number;\n    private readonly thickness: number;\n    private readonly color: string;\n    private readonly textColor: string;\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer, { className: 'psv-loader-container' });\n\n        this.loader = document.createElement('div');\n        this.loader.className = 'psv-loader';\n        this.container.appendChild(this.loader);\n\n        this.size = this.loader.offsetWidth;\n\n        this.canvas = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        this.canvas.setAttribute('class', 'psv-loader-canvas');\n        this.canvas.setAttribute('viewBox', `0 0 ${this.size} ${this.size}`);\n        this.loader.appendChild(this.canvas);\n\n        this.textColor = getStyleProperty(this.loader, 'color');\n        this.color = getStyleProperty(this.canvas, 'color');\n        this.border = parseInt(getStyleProperty(this.loader, '--psv-loader-border'), 10);\n        this.thickness = parseInt(getStyleProperty(this.loader, '--psv-loader-tickness'), 10);\n\n        const halfSize = this.size / 2;\n        this.canvas.innerHTML = `\n            <circle cx=\"${halfSize}\" cy=\"${halfSize}\" r=\"${halfSize}\" fill=\"${this.color}\"/>\n            <path d=\"\" fill=\"none\" stroke=\"${this.textColor}\" stroke-width=\"${this.thickness}\" stroke-linecap=\"round\"/>\n        `;\n\n        this.viewer.addEventListener(ConfigChangedEvent.type, this);\n\n        this.__updateContent();\n        this.hide();\n    }\n\n    /**\n     * @internal\n     */\n    override destroy(): void {\n        this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof ConfigChangedEvent) {\n            e.containsOptions('loadingImg', 'loadingTxt', 'lang') && this.__updateContent();\n        }\n    }\n\n    /**\n     * Sets the loader progression\n     */\n    setProgress(value: number) {\n        this.container.classList.remove('psv-loader--undefined');\n\n        const angle = (MathUtils.clamp(value, 0, 99.999) / 100) * Math.PI * 2;\n        const halfSize = this.size / 2;\n        const startX = halfSize;\n        const startY = this.thickness / 2 + this.border;\n        const radius = (this.size - this.thickness) / 2 - this.border;\n        const endX = Math.sin(angle) * radius + halfSize;\n        const endY = -Math.cos(angle) * radius + halfSize;\n        const largeArc = value > 50 ? '1' : '0';\n\n        this.canvas.querySelector('path').setAttributeNS(null, 'd',\n            `M ${startX} ${startY} A ${radius} ${radius} 0 ${largeArc} 1 ${endX} ${endY}`,\n        );\n    }\n\n    /**\n     * Animates the loader with an unknown state\n     */\n    showUndefined() {\n        this.show();\n        this.setProgress(25);\n        this.container.classList.add('psv-loader--undefined');\n    }\n\n    private __updateContent() {\n        const current = this.loader.querySelector('.psv-loader-image, .psv-loader-text');\n        if (current) {\n            this.loader.removeChild(current);\n        }\n\n        let inner;\n        if (this.viewer.config.loadingImg) {\n            inner = document.createElement('img');\n            inner.className = 'psv-loader-image';\n            inner.src = this.viewer.config.loadingImg;\n        } else if (this.viewer.config.loadingTxt !== null) {\n            inner = document.createElement('div');\n            inner.className = 'psv-loader-text';\n            inner.innerHTML = this.viewer.config.loadingTxt || this.viewer.config.lang.loading;\n        }\n        if (inner) {\n            const size = Math.round(Math.sqrt(2 * Math.pow(this.size / 2 - this.thickness / 2 - this.border, 2)));\n            inner.style.maxWidth = size + 'px';\n            inner.style.maxHeight = size + 'px';\n            this.loader.appendChild(inner);\n        }\n    }\n}\n","import { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { HideNotificationEvent, ShowNotificationEvent } from '../events';\nimport { AbstractComponent } from './AbstractComponent';\n\n/**\n * Configuration for {@link Notification.show}\n */\nexport type NotificationConfig = {\n    /**\n     * unique identifier to use with {@link Notification.hide} and {@link Notification.isVisible}\n     */\n    id?: string;\n    /**\n     * notification content\n     */\n    content: string;\n    /**\n     * automatically hide the notification after X milliseconds\n     */\n    timeout?: number;\n};\n\n/**\n * Notification component\n */\nexport class Notification extends AbstractComponent {\n    /**\n     * @internal\n     */\n    protected override readonly state = {\n        visible: false,\n        contentId: null as string,\n        timeout: null as ReturnType<typeof setTimeout>,\n    };\n\n    private readonly content: HTMLElement;\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer, {\n            className: 'psv-notification',\n        });\n\n        this.content = document.createElement('div');\n        this.content.className = 'psv-notification-content';\n        this.container.appendChild(this.content);\n\n        this.content.addEventListener('click', () => this.hide());\n    }\n\n    /**\n     * Checks if the notification is visible\n     */\n    override isVisible(id?: string) {\n        return this.state.visible && (!id || !this.state.contentId || this.state.contentId === id);\n    }\n\n    /**\n     * @throws {@link PSVError} always\n     * @internal\n     */\n    override toggle() {\n        throw new PSVError('Notification cannot be toggled');\n    }\n\n    /**\n     * Displays a notification on the viewer\n     *\n     * @example\n     * viewer.showNotification({ content: 'Hello world', timeout: 5000 })\n     * @example\n     * viewer.showNotification('Hello world')\n     */\n    override show(config: string | NotificationConfig) {\n        if (this.state.timeout) {\n            clearTimeout(this.state.timeout);\n            this.state.timeout = null;\n        }\n\n        if (typeof config === 'string') {\n            config = { content: config };\n        }\n\n        this.state.contentId = config.id || null;\n        this.content.innerHTML = config.content;\n\n        this.container.classList.add('psv-notification--visible');\n        this.state.visible = true;\n\n        this.viewer.dispatchEvent(new ShowNotificationEvent(this.state.contentId));\n\n        if (config.timeout) {\n            this.state.timeout = setTimeout(() => this.hide(this.state.contentId), config.timeout);\n        }\n    }\n\n    /**\n     * Hides the notification\n     */\n    override hide(id?: string) {\n        if (this.isVisible(id)) {\n            const contentId = this.state.contentId;\n\n            this.container.classList.remove('psv-notification--visible');\n            this.state.visible = false;\n\n            this.state.contentId = null;\n\n            this.viewer.dispatchEvent(new HideNotificationEvent(contentId));\n        }\n    }\n}\n","import { CAPTURE_EVENTS_CLASS, KEY_CODES } from '../data/constants';\nimport { HideOverlayEvent, KeypressEvent, ShowOverlayEvent } from '../events';\nimport { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { AbstractComponent } from './AbstractComponent';\n\n/**\n * Configuration for {@link Overlay.show}\n */\nexport type OverlayConfig = {\n    /**\n     * unique identifier to use with {@link Overlay.hide} and {@link Overlay.isVisible}\n     */\n    id?: string;\n    /**\n     * SVG image/icon displayed above the text\n     */\n    image?: string;\n    /**\n     * main message\n     */\n    title: string;\n    /**\n     * secondary message\n     */\n    text?: string;\n    /**\n     * if the user can hide the overlay by clicking\n     * @default true\n     */\n    dismissible?: boolean;\n};\n\n/**\n * Overlay component\n */\nexport class Overlay extends AbstractComponent {\n    /**\n     * @internal\n     */\n    protected override readonly state = {\n        visible: false,\n        contentId: null as string,\n        dismissible: true,\n    };\n\n    private readonly image: HTMLElement;\n    private readonly title: HTMLElement;\n    private readonly text: HTMLElement;\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer, {\n            className: `psv-overlay ${CAPTURE_EVENTS_CLASS}`,\n        });\n\n        this.image = document.createElement('div');\n        this.image.className = 'psv-overlay-image';\n        this.container.appendChild(this.image);\n\n        this.title = document.createElement('div');\n        this.title.className = 'psv-overlay-title';\n        this.container.appendChild(this.title);\n\n        this.text = document.createElement('div');\n        this.text.className = 'psv-overlay-text';\n        this.container.appendChild(this.text);\n\n        this.container.addEventListener('click', this);\n        this.viewer.addEventListener(KeypressEvent.type, this);\n\n        super.hide();\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.viewer.removeEventListener(KeypressEvent.type, this);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e.type === 'click') {\n            if (this.isVisible() && this.state.dismissible) {\n                this.hide();\n                e.stopPropagation();\n            }\n        } else if (e instanceof KeypressEvent) {\n            if (this.isVisible() && this.state.dismissible && e.key === KEY_CODES.Escape) {\n                this.hide();\n                e.preventDefault();\n            }\n        }\n    }\n\n    /**\n     * Checks if the overlay is visible\n     */\n    override isVisible(id?: string) {\n        return this.state.visible && (!id || !this.state.contentId || this.state.contentId === id);\n    }\n\n    /**\n     * @throws {@link PSVError} always\n     * @internal\n     */\n    override toggle() {\n        throw new PSVError('Overlay cannot be toggled');\n    }\n\n    /**\n     * Displays an overlay on the viewer\n     */\n    override show(config: string | OverlayConfig) {\n        if (typeof config === 'string') {\n            config = { title: config };\n        }\n\n        this.state.contentId = config.id || null;\n        this.state.dismissible = config.dismissible !== false;\n        this.image.innerHTML = config.image || '';\n        this.title.innerHTML = config.title || '';\n        this.text.innerHTML = config.text || '';\n\n        super.show();\n\n        this.viewer.dispatchEvent(new ShowOverlayEvent(this.state.contentId));\n    }\n\n    /**\n     * Hides the overlay\n     */\n    override hide(id?: string) {\n        if (this.isVisible(id)) {\n            const contentId = this.state.contentId;\n\n            super.hide();\n\n            this.state.contentId = null;\n\n            this.viewer.dispatchEvent(new HideOverlayEvent(contentId));\n        }\n    }\n}\n","import { CAPTURE_EVENTS_CLASS, ICONS, KEY_CODES } from '../data/constants';\nimport { PSVError } from '../PSVError';\nimport { getEventTarget, toggleClass } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { HidePanelEvent, KeypressEvent, ShowPanelEvent } from '../events';\nimport { AbstractComponent } from './AbstractComponent';\n\nconst PANEL_MIN_WIDTH = 200;\n\nconst PANEL_CLASS_NO_INTERACTION = 'psv-panel-content--no-interaction';\n\n/**\n * Configuration for {@link Panel.show}\n */\nexport type PanelConfig = {\n    /**\n     * unique identifier to use with {@link Panel.hide} and {@link Panel.isVisible} and to store the width\n     */\n    id?: string;\n    /**\n     * HTML content of the panel\n     */\n    content: string;\n    /**\n     * remove the default margins\n     * @default false\n     */\n    noMargin?: boolean;\n    /**\n     * initial width\n     */\n    width?: string;\n    /**\n     * called when the user clicks inside the panel or presses the Enter key while an element focused\n     */\n    clickHandler?: (target: HTMLElement) => void;\n};\n\n/**\n * Panel component\n */\nexport class Panel extends AbstractComponent {\n    /**\n     * @internal\n     */\n    protected override readonly state = {\n        visible: false,\n        contentId: null as string,\n        mouseX: 0,\n        mouseY: 0,\n        mousedown: false,\n        clickHandler: null as (e: MouseEvent) => void,\n        keyHandler: null as (e: KeyboardEvent) => void,\n        width: {} as Record<string, string>,\n    };\n\n    private readonly content: HTMLElement;\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer, {\n            className: `psv-panel ${CAPTURE_EVENTS_CLASS}`,\n        });\n\n        const resizer = document.createElement('div');\n        resizer.className = 'psv-panel-resizer';\n        this.container.appendChild(resizer);\n\n        const closeBtn = document.createElement('div');\n        closeBtn.className = 'psv-panel-close-button';\n        closeBtn.innerHTML = ICONS.close;\n        closeBtn.title = viewer.config.lang.close;\n        this.container.appendChild(closeBtn);\n\n        this.content = document.createElement('div');\n        this.content.className = 'psv-panel-content';\n        this.container.appendChild(this.content);\n\n        closeBtn.addEventListener('click', () => this.hide());\n\n        // Event for panel resizing\n        resizer.addEventListener('mousedown', this);\n        resizer.addEventListener('touchstart', this);\n        this.viewer.container.addEventListener('mouseup', this);\n        this.viewer.container.addEventListener('touchend', this);\n        this.viewer.container.addEventListener('mousemove', this);\n        this.viewer.container.addEventListener('touchmove', this);\n\n        this.viewer.addEventListener(KeypressEvent.type, this);\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.viewer.removeEventListener(KeypressEvent.type, this);\n\n        this.viewer.container.removeEventListener('mousemove', this);\n        this.viewer.container.removeEventListener('touchmove', this);\n        this.viewer.container.removeEventListener('mouseup', this);\n        this.viewer.container.removeEventListener('touchend', this);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case 'mousedown': this.__onMouseDown(e as MouseEvent); break;\n            case 'touchstart': this.__onTouchStart(e as TouchEvent); break;\n            case 'mousemove': this.__onMouseMove(e as MouseEvent); break;\n            case 'touchmove': this.__onTouchMove(e as TouchEvent); break;\n            case 'mouseup': this.__onMouseUp(e as MouseEvent); break;\n            case 'touchend': this.__onTouchEnd(e as TouchEvent); break;\n            case KeypressEvent.type: this.__onKeyPress(e as KeypressEvent); break;\n        }\n    }\n\n    /**\n     * Checks if the panel is visible\n     */\n    override isVisible(id?: string) {\n        return this.state.visible && (!id || !this.state.contentId || this.state.contentId === id);\n    }\n\n    /**\n     * @throws {@link PSVError} always\n     * @internal\n     */\n    override toggle() {\n        throw new PSVError('Panel cannot be toggled');\n    }\n\n    /**\n     * Shows the panel\n     */\n    override show(config: string | PanelConfig) {\n        if (typeof config === 'string') {\n            config = { content: config };\n        }\n        const wasVisible = this.isVisible(config.id);\n\n        this.state.contentId = config.id || null;\n        this.state.visible = true;\n\n        if (this.state.clickHandler) {\n            this.content.removeEventListener('click', this.state.clickHandler);\n            this.content.removeEventListener('keydown', this.state.keyHandler);\n            this.state.clickHandler = null;\n            this.state.keyHandler = null;\n        }\n\n        if (config.id && this.state.width[config.id]) {\n            this.container.style.width = this.state.width[config.id];\n        } else if (config.width) {\n            this.container.style.width = config.width;\n        } else {\n            this.container.style.width = null;\n        }\n\n        this.content.innerHTML = config.content;\n        this.content.scrollTop = 0;\n        this.container.classList.add('psv-panel--open');\n\n        toggleClass(this.content, 'psv-panel-content--no-margin', config.noMargin === true);\n\n        if (config.clickHandler) {\n            this.state.clickHandler = (e) => {\n                config.clickHandler(getEventTarget(e));\n            };\n            this.state.keyHandler = (e) => {\n                if (e.key === KEY_CODES.Enter) {\n                    config.clickHandler(getEventTarget(e));\n                }\n            };\n            this.content.addEventListener('click', this.state.clickHandler);\n            this.content.addEventListener('keydown', this.state.keyHandler);\n\n            // focus the first element if possible, after animation ends\n            if (!wasVisible) {\n                setTimeout(() => {\n                    (this.content.querySelector('a,button,[tabindex]') as HTMLElement)?.focus();\n                }, 300);\n            }\n        }\n\n        this.viewer.dispatchEvent(new ShowPanelEvent(this.state.contentId));\n    }\n\n    /**\n     * Hides the panel\n     */\n    override hide(id?: string) {\n        if (this.isVisible(id)) {\n            const contentId = this.state.contentId;\n\n            this.state.visible = false;\n            this.state.contentId = null;\n\n            this.content.innerHTML = null;\n            this.container.classList.remove('psv-panel--open');\n\n            if (this.state.clickHandler) {\n                this.content.removeEventListener('click', this.state.clickHandler);\n                this.content.removeEventListener('keydown', this.state.keyHandler);\n                this.state.clickHandler = null;\n                this.state.keyHandler = null;\n            }\n\n            this.viewer.dispatchEvent(new HidePanelEvent(contentId));\n        }\n    }\n\n    private __onMouseDown(evt: MouseEvent) {\n        evt.stopPropagation();\n        this.__startResize(evt.clientX, evt.clientY);\n    }\n\n    private __onTouchStart(evt: TouchEvent) {\n        evt.stopPropagation();\n        if (evt.touches.length === 1) {\n            const touch = evt.touches[0];\n            this.__startResize(touch.clientX, touch.clientY);\n        }\n    }\n\n    private __onMouseUp(evt: MouseEvent) {\n        if (this.state.mousedown) {\n            evt.stopPropagation();\n            this.state.mousedown = false;\n            this.content.classList.remove(PANEL_CLASS_NO_INTERACTION);\n        }\n    }\n\n    private __onTouchEnd(evt: TouchEvent) {\n        if (this.state.mousedown) {\n            evt.stopPropagation();\n            if (evt.touches.length === 0) {\n                this.state.mousedown = false;\n                this.content.classList.remove(PANEL_CLASS_NO_INTERACTION);\n            }\n        }\n    }\n\n    private __onMouseMove(evt: MouseEvent) {\n        if (this.state.mousedown) {\n            evt.stopPropagation();\n            this.__resize(evt.clientX, evt.clientY);\n        }\n    }\n\n    private __onTouchMove(evt: TouchEvent) {\n        if (this.state.mousedown) {\n            const touch = evt.touches[0];\n            this.__resize(touch.clientX, touch.clientY);\n        }\n    }\n\n    private __onKeyPress(evt: KeypressEvent) {\n        if (this.isVisible() && evt.key === KEY_CODES.Escape) {\n            this.hide();\n            evt.preventDefault();\n        }\n    }\n\n    private __startResize(clientX: number, clientY: number) {\n        this.state.mouseX = clientX;\n        this.state.mouseY = clientY;\n        this.state.mousedown = true;\n        this.content.classList.add(PANEL_CLASS_NO_INTERACTION);\n    }\n\n    private __resize(clientX: number, clientY: number) {\n        const x = clientX;\n        const y = clientY;\n        const width = Math.max(PANEL_MIN_WIDTH, this.container.offsetWidth - (x - this.state.mouseX)) + 'px';\n\n        if (this.state.contentId) {\n            this.state.width[this.state.contentId] = width;\n        }\n\n        this.container.style.width = width;\n\n        this.state.mouseX = x;\n        this.state.mouseY = y;\n    }\n}\n","import { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { HideTooltipEvent, ShowTooltipEvent } from '../events';\nimport { addClasses, cleanCssPosition, cssPositionIsOrdered, getStyleProperty } from '../utils';\nimport { AbstractComponent } from './AbstractComponent';\n\n/**\n * Object defining the tooltip position\n */\nexport type TooltipPosition = {\n    /**\n     * Position of the tip of the arrow of the tooltip, in pixels\n     */\n    top: number;\n    /**\n     * Position of the tip of the arrow of the tooltip, in pixels\n     */\n    left: number;\n    /**\n     * Tooltip position toward it's arrow tip.\n     * Accepted values are combinations of `top`, `center`, `bottom` and `left`, `center`, `right`.\n     */\n    position?: string | [string, string];\n    /**\n     * @internal\n     */\n    box?: { width: number; height: number };\n};\n\n/**\n * Configuration for {@link Viewer.createTooltip}\n */\nexport type TooltipConfig = TooltipPosition & {\n    /**\n     * HTML content of the tooltip\n     */\n    content: string;\n    /**\n     * Additional CSS class added to the tooltip\n     */\n    className?: string;\n    /**\n     * CSS properties added to the tooltip\n     */\n    style?: Record<string, string>;\n    /**\n     * Userdata associated to the tooltip\n     */\n    data?: any;\n};\n\ntype TooltipStyle = {\n    posClass: [string, string];\n    width: number;\n    height: number;\n    top: number;\n    left: number;\n    arrowTop: number;\n    arrowLeft: number;\n};\n\nconst enum TooltipState {\n    NONE,\n    SHOWING,\n    HIDING,\n    READY,\n}\n\n/**\n * Tooltip component\n * Never instanciate tooltips directly use {@link Viewer#createTooltip} instead\n */\nexport class Tooltip extends AbstractComponent {\n    /**\n     * @internal\n     */\n    protected override readonly state = {\n        visible: true,\n        arrow: 0,\n        border: 0,\n        state: TooltipState.NONE,\n        width: 0,\n        height: 0,\n        pos: '',\n        config: null as TooltipPosition,\n        data: null as any,\n        hideTimeout: null as ReturnType<typeof setTimeout>,\n    };\n\n    private readonly content: HTMLElement;\n    private readonly arrow: HTMLElement;\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer, config: TooltipConfig) {\n        super(viewer, {\n            className: 'psv-tooltip',\n        });\n\n        this.content = document.createElement('div');\n        this.content.className = 'psv-tooltip-content';\n        this.container.appendChild(this.content);\n\n        this.arrow = document.createElement('div');\n        this.arrow.className = 'psv-tooltip-arrow';\n        this.container.appendChild(this.arrow);\n\n        this.container.addEventListener('transitionend', this);\n\n        // allows to interact with static tooltips\n        this.container.addEventListener('touchdown', e => e.stopPropagation());\n        this.container.addEventListener('mousedown', e => e.stopPropagation());\n\n        this.container.style.top = '-1000px';\n        this.container.style.left = '-1000px';\n\n        this.show(config);\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e.type === 'transitionend') {\n            this.__onTransitionEnd(e as TransitionEvent);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        clearTimeout(this.state.hideTimeout);\n        delete this.state.data;\n        super.destroy();\n    }\n\n    /**\n     * @throws {@link PSVError} always\n     * @internal\n     */\n    override toggle() {\n        throw new PSVError('Tooltip cannot be toggled');\n    }\n\n    /**\n     * Displays the tooltip on the viewer\n     * @internal\n     */\n    override show(config: TooltipConfig) {\n        if (this.state.state !== TooltipState.NONE) {\n            throw new PSVError('Initialized tooltip cannot be re-initialized');\n        }\n\n        if (config.className) {\n            addClasses(this.container, config.className);\n        }\n        if (config.style) {\n            Object.assign(this.container.style, config.style);\n        }\n\n        this.state.state = TooltipState.READY;\n\n        this.update(config.content, config);\n\n        this.state.data = config.data;\n        this.state.state = TooltipState.SHOWING;\n\n        this.viewer.dispatchEvent(new ShowTooltipEvent(this, this.state.data));\n\n        this.__waitImages();\n    }\n\n    /**\n     * Updates the content of the tooltip, optionally with a new position\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    update(content: string, config?: TooltipPosition) {\n        this.content.innerHTML = content;\n\n        const rect = this.container.getBoundingClientRect();\n        this.state.width = rect.right - rect.left;\n        this.state.height = rect.bottom - rect.top;\n        this.state.arrow = parseInt(getStyleProperty(this.arrow, 'border-top-width'), 10);\n        this.state.border = parseInt(getStyleProperty(this.container, 'border-top-left-radius'), 10);\n\n        this.move(config ?? this.state.config);\n        this.__waitImages();\n    }\n\n    /**\n     * Moves the tooltip to a new position\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    move(config: TooltipPosition) {\n        if (this.state.state !== TooltipState.SHOWING && this.state.state !== TooltipState.READY) {\n            throw new PSVError('Uninitialized tooltip cannot be moved');\n        }\n\n        config.box = config.box ?? this.state.config?.box ?? { width: 0, height: 0 };\n        this.state.config = config;\n\n        const t = this.container;\n        const a = this.arrow;\n\n        // compute size\n        const style: TooltipStyle = {\n            posClass: cleanCssPosition(config.position, { allowCenter: false, cssOrder: false }) || ['top', 'center'],\n            width: this.state.width,\n            height: this.state.height,\n            top: 0,\n            left: 0,\n            arrowTop: 0,\n            arrowLeft: 0,\n        };\n\n        // set initial position\n        this.__computeTooltipPosition(style, config);\n\n        // correct position if overflow\n        let swapY = null;\n        let swapX = null;\n        if (style.top < 0) {\n            swapY = 'bottom';\n        } else if (style.top + style.height > this.viewer.state.size.height) {\n            swapY = 'top';\n        }\n        if (style.left < 0) {\n            swapX = 'right';\n        } else if (style.left + style.width > this.viewer.state.size.width) {\n            swapX = 'left';\n        }\n        if (swapX || swapY) {\n            const ordered = cssPositionIsOrdered(style.posClass);\n            if (swapY) {\n                style.posClass[ordered ? 0 : 1] = swapY;\n            }\n            if (swapX) {\n                style.posClass[ordered ? 1 : 0] = swapX;\n            }\n            this.__computeTooltipPosition(style, config);\n        }\n\n        // apply position\n        t.style.top = style.top + 'px';\n        t.style.left = style.left + 'px';\n\n        a.style.top = style.arrowTop + 'px';\n        a.style.left = style.arrowLeft + 'px';\n\n        const newPos = style.posClass.join('-');\n        if (newPos !== this.state.pos) {\n            t.classList.remove(`psv-tooltip--${this.state.pos}`);\n\n            this.state.pos = newPos;\n            t.classList.add(`psv-tooltip--${this.state.pos}`);\n        }\n    }\n\n    /**\n     * Hides the tooltip\n     */\n    override hide() {\n        this.container.classList.remove('psv-tooltip--visible');\n        this.state.state = TooltipState.HIDING;\n\n        this.viewer.dispatchEvent(new HideTooltipEvent(this.state.data));\n\n        // watchdog in case the \"transitionend\" event is not received\n        const duration = parseFloat(getStyleProperty(this.container, 'transition-duration'));\n        this.state.hideTimeout = setTimeout(() => {\n            this.destroy();\n        }, duration * 2);\n    }\n\n    /**\n     * Finalize transition\n     */\n    private __onTransitionEnd(e: TransitionEvent) {\n        if (e.propertyName === 'transform') {\n            switch (this.state.state) {\n                case TooltipState.SHOWING:\n                    this.container.classList.add('psv-tooltip--visible');\n                    this.state.state = TooltipState.READY;\n                    break;\n\n                case TooltipState.HIDING:\n                    this.state.state = TooltipState.NONE;\n                    this.destroy();\n                    break;\n\n                default:\n                // nothing\n            }\n        }\n    }\n\n    /**\n     * Computes the position of the tooltip and its arrow\n     */\n    private __computeTooltipPosition(style: TooltipStyle, config: TooltipPosition) {\n        const arrow = this.state.arrow;\n        const top = config.top;\n        const height = style.height;\n        const left = config.left;\n        const width = style.width;\n        const offsetSide = arrow + this.state.border;\n        const offsetX = config.box.width / 2 + arrow * 2;\n        const offsetY = config.box.height / 2 + arrow * 2;\n\n        switch (style.posClass.join('-')) {\n            case 'top-left':\n                style.top = top - offsetY - height;\n                style.left = left + offsetSide - width;\n                style.arrowTop = height;\n                style.arrowLeft = width - offsetSide - arrow;\n                break;\n            case 'top-center':\n                style.top = top - offsetY - height;\n                style.left = left - width / 2;\n                style.arrowTop = height;\n                style.arrowLeft = width / 2 - arrow;\n                break;\n            case 'top-right':\n                style.top = top - offsetY - height;\n                style.left = left - offsetSide;\n                style.arrowTop = height;\n                style.arrowLeft = arrow;\n                break;\n            case 'bottom-left':\n                style.top = top + offsetY;\n                style.left = left + offsetSide - width;\n                style.arrowTop = -arrow * 2;\n                style.arrowLeft = width - offsetSide - arrow;\n                break;\n            case 'bottom-center':\n                style.top = top + offsetY;\n                style.left = left - width / 2;\n                style.arrowTop = -arrow * 2;\n                style.arrowLeft = width / 2 - arrow;\n                break;\n            case 'bottom-right':\n                style.top = top + offsetY;\n                style.left = left - offsetSide;\n                style.arrowTop = -arrow * 2;\n                style.arrowLeft = arrow;\n                break;\n            case 'left-top':\n                style.top = top + offsetSide - height;\n                style.left = left - offsetX - width;\n                style.arrowTop = height - offsetSide - arrow;\n                style.arrowLeft = width;\n                break;\n            case 'center-left':\n                style.top = top - height / 2;\n                style.left = left - offsetX - width;\n                style.arrowTop = height / 2 - arrow;\n                style.arrowLeft = width;\n                break;\n            case 'left-bottom':\n                style.top = top - offsetSide;\n                style.left = left - offsetX - width;\n                style.arrowTop = arrow;\n                style.arrowLeft = width;\n                break;\n            case 'right-top':\n                style.top = top + offsetSide - height;\n                style.left = left + offsetX;\n                style.arrowTop = height - offsetSide - arrow;\n                style.arrowLeft = -arrow * 2;\n                break;\n            case 'center-right':\n                style.top = top - height / 2;\n                style.left = left + offsetX;\n                style.arrowTop = height / 2 - arrow;\n                style.arrowLeft = -arrow * 2;\n                break;\n            case 'right-bottom':\n                style.top = top - offsetSide;\n                style.left = left + offsetX;\n                style.arrowTop = arrow;\n                style.arrowLeft = -arrow * 2;\n                break;\n\n            // no default\n        }\n    }\n\n    /**\n     * If the tooltip contains images, recompute its size once they are loaded\n     */\n    private __waitImages() {\n        const images = this.content.querySelectorAll('img') as NodeListOf<HTMLImageElement>;\n\n        if (images.length > 0) {\n            const promises: Array<Promise<any>> = [];\n\n            images.forEach((image) => {\n                if (!image.complete) {\n                    promises.push(\n                        new Promise((resolve) => {\n                            image.onload = resolve;\n                            image.onerror = resolve;\n                        }),\n                    );\n                }\n            });\n\n            if (promises.length) {\n                Promise.all(promises).then(() => {\n                    if (this.state.state === TooltipState.SHOWING || this.state.state === TooltipState.READY) {\n                        const rect = this.container.getBoundingClientRect();\n                        this.state.width = rect.right - rect.left;\n                        this.state.height = rect.bottom - rect.top;\n                        this.move(this.state.config);\n                    }\n                });\n            }\n        }\n    }\n}\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"15 15 70 70\"><path fill=\"currentColor\" d=\"M50,16.2c-18.6,0-33.8,15.1-33.8,33.8S31.4,83.7,50,83.7S83.8,68.6,83.8,50S68.6,16.2,50,16.2z M50,80.2c-16.7,0-30.2-13.6-30.2-30.2S33.3,19.7,50,19.7S80.3,33.3,80.3,50S66.7,80.2,50,80.2z\"/><rect fill=\"currentColor\" x=\"48\" y=\"31.7\" width=\"4\" height=\"28\"/><rect fill=\"currentColor\" x=\"48\" y=\"63.2\" width=\"4\" height=\"5\"/><!--Created by Shastry from the Noun Project--></svg>\n","import { Euler, MathUtils, Vector3 } from 'three';\nimport { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { DEFAULTS } from '../data/config';\nimport { ANIMATION_MIN_DURATION, SPHERE_RADIUS, VIEWER_DATA } from '../data/constants';\nimport {\n    ExtendedPosition,\n    PanoData,\n    PanoramaOptions,\n    PanoramaPosition,\n    Point,\n    Position,\n    SphereCorrection,\n    TransitionOptions,\n} from '../model';\nimport {\n    AnimationOptions,\n    applyEulerInverse,\n    getAngle,\n    getShortestArc,\n    isExtendedPosition,\n    isNil,\n    parseAngle,\n    speedToDuration,\n} from '../utils';\nimport { AbstractService } from './AbstractService';\n\nconst vector3 = new Vector3();\nconst EULER_ZERO = new Euler(0, 0, 0, 'ZXY');\n\n/**\n * Collections of data converters for the viewer\n */\nexport class DataHelper extends AbstractService {\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n    }\n\n    /**\n     * Converts vertical FOV to zoom level\n     */\n    fovToZoomLevel(fov: number): number {\n        const temp = Math.round(((fov - this.config.minFov) / (this.config.maxFov - this.config.minFov)) * 100);\n        return MathUtils.clamp(temp - 2 * (temp - 50), 0, 100);\n    }\n\n    /**\n     * Converts zoom level to vertical FOV\n     */\n    zoomLevelToFov(level: number): number {\n        return this.config.maxFov + (level / 100) * (this.config.minFov - this.config.maxFov);\n    }\n\n    /**\n     * Converts vertical FOV to horizontal FOV\n     */\n    vFovToHFov(vFov: number): number {\n        return MathUtils.radToDeg(2 * Math.atan(Math.tan(MathUtils.degToRad(vFov) / 2) * this.state.aspect));\n    }\n\n    /**\n     * Converts horizontal FOV to vertical FOV\n     */\n    hFovToVFov(hFov: number): number {\n        return MathUtils.radToDeg(2 * Math.atan(Math.tan(MathUtils.degToRad(hFov) / 2) / this.state.aspect));\n    }\n\n    /**\n     * @internal\n     */\n    getAnimationProperties(\n        speed: number | string,\n        targetPosition: Position,\n        targetZoom: number,\n    ): {\n            duration: number;\n            properties: AnimationOptions<{ yaw: any; pitch: any; zoom: any }>['properties'];\n        } {\n        const positionProvided = !isNil(targetPosition);\n        const zoomProvided = !isNil(targetZoom);\n\n        const properties: AnimationOptions<{ yaw: any; pitch: any; zoom: any }>['properties'] = {};\n        let duration = null;\n\n        // clean/filter position and compute duration\n        if (positionProvided) {\n            const currentPosition = this.viewer.getPosition();\n            const dYaw = getShortestArc(currentPosition.yaw, targetPosition.yaw);\n\n            properties.yaw = { start: currentPosition.yaw, end: currentPosition.yaw + dYaw };\n            properties.pitch = { start: currentPosition.pitch, end: targetPosition.pitch };\n\n            duration = speedToDuration(speed, getAngle(currentPosition, targetPosition));\n        }\n\n        // clean/filter zoom and compute duration\n        if (zoomProvided) {\n            const currentZoom = this.viewer.getZoomLevel();\n            const dZoom = Math.abs(targetZoom - currentZoom);\n\n            properties.zoom = { start: currentZoom, end: targetZoom };\n\n            if (duration === null) {\n                // if animating zoom only and a speed is given, use an arbitrary PI/4 to compute the duration\n                duration = speedToDuration(speed, ((Math.PI / 4) * dZoom) / 100);\n            }\n        }\n\n        // if nothing to animate\n        if (duration === null) {\n            if (typeof speed === 'number') {\n                duration = speed;\n            } else {\n                duration = ANIMATION_MIN_DURATION;\n            }\n        } else {\n            duration = Math.max(ANIMATION_MIN_DURATION, duration);\n        }\n\n        return { duration, properties };\n    }\n\n    /**\n     * @internal\n     */\n    getTransitionOptions(options: PanoramaOptions): TransitionOptions {\n        let transition: TransitionOptions;\n        const defaultTransition = this.config.defaultTransition ?? DEFAULTS.defaultTransition;\n\n        if (options.transition === false || options.transition === null) {\n            transition = null;\n        } else if (options.transition === true) {\n            transition = {\n                ...defaultTransition,\n            };\n        } else if (typeof options.transition === 'object') {\n            transition = {\n                ...defaultTransition,\n                ...options.transition,\n            };\n        } else {\n            transition = this.config.defaultTransition;\n        }\n\n        return transition;\n    }\n\n    /**\n     * Converts pixel texture coordinates to spherical radians coordinates\n     * @throws {@link PSVError} when the current adapter does not support texture coordinates\n     */\n    textureCoordsToSphericalCoords(point: PanoramaPosition): Position {\n        if (!this.state.textureData?.panoData) {\n            throw new PSVError('Current adapter does not support texture coordinates or no texture has been loaded');\n        }\n\n        const result = this.viewer.adapter.textureCoordsToSphericalCoords(point, this.state.textureData.panoData);\n\n        if (\n            !EULER_ZERO.equals(this.viewer.renderer.panoramaPose)\n            || !EULER_ZERO.equals(this.viewer.renderer.sphereCorrection)\n        ) {\n            this.sphericalCoordsToVector3(result, vector3);\n            vector3.applyEuler(this.viewer.renderer.panoramaPose);\n            vector3.applyEuler(this.viewer.renderer.sphereCorrection);\n            return this.vector3ToSphericalCoords(vector3);\n        } else {\n            return result;\n        }\n    }\n\n    /**\n     * Converts spherical radians coordinates to pixel texture coordinates\n     * @throws {@link PSVError} when the current adapter does not support texture coordinates\n     */\n    sphericalCoordsToTextureCoords(position: Position): PanoramaPosition {\n        if (!this.state.textureData?.panoData) {\n            throw new PSVError('Current adapter does not support texture coordinates or no texture has been loaded');\n        }\n\n        if (\n            !EULER_ZERO.equals(this.viewer.renderer.panoramaPose)\n            || !EULER_ZERO.equals(this.viewer.renderer.sphereCorrection)\n        ) {\n            this.sphericalCoordsToVector3(position, vector3);\n            applyEulerInverse(vector3, this.viewer.renderer.sphereCorrection);\n            applyEulerInverse(vector3, this.viewer.renderer.panoramaPose);\n            position = this.vector3ToSphericalCoords(vector3);\n        }\n\n        return this.viewer.adapter.sphericalCoordsToTextureCoords(position, this.state.textureData.panoData);\n    }\n\n    /**\n     * Converts spherical radians coordinates to a Vector3\n     */\n    sphericalCoordsToVector3(position: Position, vector?: Vector3, distance = SPHERE_RADIUS): Vector3 {\n        if (!vector) {\n            vector = new Vector3();\n        }\n        vector.x = distance * -Math.cos(position.pitch) * Math.sin(position.yaw);\n        vector.y = distance * Math.sin(position.pitch);\n        vector.z = distance * Math.cos(position.pitch) * Math.cos(position.yaw);\n        return vector;\n    }\n\n    /**\n     * Converts a Vector3 to spherical radians coordinates\n     */\n    vector3ToSphericalCoords(vector: Vector3): Position {\n        const phi = Math.acos(vector.y / Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z));\n        const theta = Math.atan2(vector.x, vector.z);\n\n        return {\n            yaw: theta < 0 ? -theta : Math.PI * 2 - theta,\n            pitch: Math.PI / 2 - phi,\n        };\n    }\n\n    /**\n     * Converts position on the viewer to a THREE.Vector3\n     */\n    viewerCoordsToVector3(viewerPoint: Point): Vector3 {\n        const sphereIntersect = this.viewer.renderer\n            .getIntersections(viewerPoint)\n            .filter(i => i.object.userData[VIEWER_DATA]);\n\n        if (sphereIntersect.length) {\n            return sphereIntersect[0].point;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Converts position on the viewer to spherical radians coordinates\n     */\n    viewerCoordsToSphericalCoords(viewerPoint: Point): Position {\n        const vector = this.viewerCoordsToVector3(viewerPoint);\n        return vector ? this.vector3ToSphericalCoords(vector) : null;\n    }\n\n    /**\n     * Converts a Vector3 to position on the viewer\n     */\n    vector3ToViewerCoords(vector: Vector3): Point {\n        const vectorClone = vector.clone();\n        vectorClone.project(this.viewer.renderer.camera);\n\n        return {\n            x: Math.round(((vectorClone.x + 1) / 2) * this.state.size.width),\n            y: Math.round(((1 - vectorClone.y) / 2) * this.state.size.height),\n        };\n    }\n\n    /**\n     * Converts spherical radians coordinates to position on the viewer\n     */\n    sphericalCoordsToViewerCoords(position: Position): Point {\n        this.sphericalCoordsToVector3(position, vector3);\n        return this.vector3ToViewerCoords(vector3);\n    }\n\n    /**\n     * Checks if a point in the 3D scene is currently visible\n     */\n    isPointVisible(vector: Vector3): boolean;\n\n    /**\n     * Checks if a point on the sphere is currently visible\n     */\n    isPointVisible(position: Position): boolean;\n\n    /**\n     * @internal\n     */\n    isPointVisible(point: Vector3 | Position): boolean {\n        let vector: Vector3;\n        let viewerPoint: Point;\n\n        if (point instanceof Vector3) {\n            vector = point;\n            viewerPoint = this.vector3ToViewerCoords(point);\n        } else if (isExtendedPosition(point)) {\n            vector = this.sphericalCoordsToVector3(point, vector3);\n            viewerPoint = this.vector3ToViewerCoords(vector);\n        } else {\n            return false;\n        }\n\n        return (\n            vector.dot(this.viewer.state.direction) > 0\n            && viewerPoint.x >= 0\n            && viewerPoint.x <= this.viewer.state.size.width\n            && viewerPoint.y >= 0\n            && viewerPoint.y <= this.viewer.state.size.height\n        );\n    }\n\n    /**\n     * Converts pixel position to angles if present and ensure boundaries\n     */\n    cleanPosition(position: ExtendedPosition): Position {\n        if ('yaw' in position || 'pitch' in position) {\n            if (!('yaw' in position) || !('pitch' in position)) {\n                throw new PSVError(`Position is missing 'yaw' or 'pitch'`);\n            }\n            return {\n                yaw: parseAngle(position.yaw),\n                pitch: parseAngle(position.pitch, true),\n            };\n        } else {\n            return this.textureCoordsToSphericalCoords(position);\n        }\n    }\n\n    /**\n     * Ensure a SphereCorrection object is valid\n     */\n    cleanSphereCorrection(sphereCorrection: SphereCorrection): SphereCorrection<number> {\n        return {\n            pan: parseAngle(sphereCorrection?.pan || 0),\n            tilt: parseAngle(sphereCorrection?.tilt || 0, true),\n            roll: parseAngle(sphereCorrection?.roll || 0, true, false),\n        };\n    }\n\n    /**\n     * Parse the pose angles of the pano data\n     */\n    cleanPanoramaPose(panoData: PanoData): SphereCorrection<number> {\n        return {\n            pan: MathUtils.degToRad(panoData?.poseHeading || 0),\n            tilt: MathUtils.degToRad(panoData?.posePitch || 0),\n            roll: MathUtils.degToRad(panoData?.poseRoll || 0),\n        };\n    }\n\n    /**\n     * Update the panorama options if the panorama files contains \"InitialView\" metadata\n     */\n    cleanPanoramaOptions(options: PanoramaOptions, panoData: PanoData): PanoramaOptions {\n        if (!panoData?.isEquirectangular) {\n            return options;\n        }\n\n        if (isNil(options.zoom) && !isNil(panoData.initialFov)) {\n            options = {\n                ...options,\n                zoom: this.fovToZoomLevel(this.hFovToVFov(panoData.initialFov)),\n            };\n        }\n        if (isNil(options.position) && !isNil(panoData.initialHeading) && !isNil(panoData.initialPitch)) {\n            options = {\n                ...options,\n                position: {\n                    yaw: parseAngle(panoData.initialHeading),\n                    pitch: parseAngle(panoData.initialPitch, true),\n                },\n            };\n        }\n        return options;\n    }\n}\n","import { ParsedViewerConfig } from '../model';\nimport type { Viewer } from '../Viewer';\nimport { ViewerState } from './ViewerState';\n\n/**\n * Base class for services\n */\nexport abstract class AbstractService {\n    protected readonly config: ParsedViewerConfig;\n    protected readonly state: ViewerState;\n\n    /**\n     * @internal\n     */\n    constructor(protected readonly viewer: Viewer) {\n        this.config = viewer.config;\n        this.state = viewer.state;\n    }\n\n    /**\n     * Destroys the service\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    destroy() {}\n}\n","import { MathUtils, Mesh } from 'three';\nimport {\n    ACTIONS,\n    CAPTURE_EVENTS_CLASS,\n    CTRLZOOM_TIMEOUT,\n    DBLCLICK_DELAY,\n    IDS,\n    KEY_CODES,\n    LONGTOUCH_DELAY,\n    MOVE_THRESHOLD,\n    TWOFINGERSOVERLAY_DELAY,\n    VIEWER_DATA,\n} from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport {\n    BeforeRenderEvent,\n    ClickEvent,\n    DoubleClickEvent,\n    FullscreenEvent,\n    KeypressEvent,\n    ObjectEnterEvent,\n    ObjectHoverEvent,\n    ObjectLeaveEvent,\n    StopAllEvent,\n    ViewerEvents,\n} from '../events';\nimport gestureIcon from '../icons/gesture.svg';\nimport mousewheelIcon from '../icons/mousewheel.svg';\nimport { ClickData, Point, Position } from '../model';\nimport {\n    clone,\n    getEventTarget,\n    getMatchingTarget,\n    getPosition,\n    getTouchData,\n    isEmpty,\n    throttle,\n} from '../utils';\nimport { PressHandler } from '../utils/PressHandler';\nimport type { Viewer } from '../Viewer';\nimport { AbstractService } from './AbstractService';\n\nclass Step {\n    static IDLE = 0;\n    static CLICK = 1;\n    static MOVING = 2;\n\n    private $: number = Step.IDLE;\n\n    is(...steps: number[]): boolean {\n        return steps.some(step => this.$ & step);\n    }\n\n    set(step: number) {\n        this.$ = step;\n    }\n\n    add(step: number) {\n        this.$ |= step;\n    }\n\n    remove(step: number) {\n        this.$ &= ~step;\n    }\n}\n\n/**\n * Events handler\n * @internal\n */\nexport class EventsHandler extends AbstractService {\n    private readonly data = {\n        /** start x position of the click/touch */\n        startMouseX: 0,\n        /** start y position of the click/touch */\n        startMouseY: 0,\n        /** current x position of the cursor */\n        mouseX: 0,\n        /** current y position of the cursor */\n        mouseY: 0,\n        /** current distance between fingers */\n        pinchDist: 0,\n        /** accumulator for smooth movement */\n        moveDelta: { yaw: 0, pitch: 0, zoom: 0 },\n        accumulatorFactor: 0,\n        /** when the Ctrl key is pressed */\n        ctrlKeyDown: false,\n        /** temporary storage of click data between two clicks */\n        dblclickData: null as ClickData,\n        dblclickTimeout: null as ReturnType<typeof setTimeout>,\n        longtouchTimeout: null as ReturnType<typeof setTimeout>,\n        twofingersTimeout: null as ReturnType<typeof setTimeout>,\n        ctrlZoomTimeout: null as ReturnType<typeof setTimeout>,\n    };\n\n    private readonly step = new Step();\n    private readonly keyHandler = new PressHandler<ACTIONS>();\n    private readonly resizeObserver = new ResizeObserver(throttle(() => this.viewer.autoSize(), 50));\n    private readonly moveThreshold = MOVE_THRESHOLD * SYSTEM.pixelRatio;\n\n    constructor(viewer: Viewer) {\n        super(viewer);\n    }\n\n    /**\n     * @internal\n     */\n    init() {\n        window.addEventListener('keydown', this, { passive: false });\n        window.addEventListener('keyup', this);\n        this.viewer.container.addEventListener('mousedown', this);\n        window.addEventListener('mousemove', this, { passive: false });\n        window.addEventListener('mouseup', this);\n        this.viewer.container.addEventListener('touchstart', this, { passive: false });\n        window.addEventListener('touchmove', this, { passive: false });\n        window.addEventListener('touchend', this, { passive: false });\n        this.viewer.container.addEventListener('wheel', this, { passive: false });\n        document.addEventListener('fullscreenchange', this);\n        this.resizeObserver.observe(this.viewer.container);\n\n        this.viewer.addEventListener(BeforeRenderEvent.type, this);\n        this.viewer.addEventListener(StopAllEvent.type, this);\n    }\n\n    override destroy() {\n        window.removeEventListener('keydown', this);\n        window.removeEventListener('keyup', this);\n        this.viewer.container.removeEventListener('mousedown', this);\n        window.removeEventListener('mousemove', this);\n        window.removeEventListener('mouseup', this);\n        this.viewer.container.removeEventListener('touchstart', this);\n        window.removeEventListener('touchmove', this);\n        window.removeEventListener('touchend', this);\n        this.viewer.container.removeEventListener('wheel', this);\n        document.removeEventListener('fullscreenchange', this);\n        this.resizeObserver.disconnect();\n\n        this.viewer.removeEventListener(BeforeRenderEvent.type, this);\n        this.viewer.removeEventListener(StopAllEvent.type, this);\n\n        clearTimeout(this.data.dblclickTimeout);\n        clearTimeout(this.data.longtouchTimeout);\n        clearTimeout(this.data.twofingersTimeout);\n        clearTimeout(this.data.ctrlZoomTimeout);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(evt: Event) {\n        switch (evt.type) {\n            case 'keydown': this.__onKeyDown(evt as KeyboardEvent); break;\n            case 'keyup': this.__onKeyUp(); break;\n            case 'mousemove': this.__onMouseMove(evt as MouseEvent); break;\n            case 'mouseup': this.__onMouseUp(evt as MouseEvent); break;\n            case 'touchmove': this.__onTouchMove(evt as TouchEvent); break;\n            case 'touchend': this.__onTouchEnd(evt as TouchEvent); break;\n            case 'fullscreenchange': this.__onFullscreenChange(); break;\n            case BeforeRenderEvent.type: this.__applyMoveDelta(); break;\n            case StopAllEvent.type: this.__clearMoveDelta(); break;\n        }\n\n        if (!getMatchingTarget(evt, '.' + CAPTURE_EVENTS_CLASS)) {\n            switch (evt.type) {\n                case 'mousedown': this.__onMouseDown(evt as MouseEvent); break;\n                case 'touchstart': this.__onTouchStart(evt as TouchEvent); break;\n                case 'wheel': this.__onMouseWheel(evt as WheelEvent); break;\n            }\n        }\n    }\n\n    /**\n     * Handles keyboard events\n     */\n    private __onKeyDown(e: KeyboardEvent) {\n        if (this.config.mousewheelCtrlKey) {\n            this.data.ctrlKeyDown = e.key === KEY_CODES.Control;\n\n            if (this.data.ctrlKeyDown) {\n                clearTimeout(this.data.ctrlZoomTimeout);\n                this.viewer.overlay.hide(IDS.CTRL_ZOOM);\n            }\n        }\n\n        if (!this.viewer.dispatchEvent(new KeypressEvent(e.key, e))) {\n            return;\n        }\n\n        if (!this.state.keyboardEnabled) {\n            return;\n        }\n\n        const action = this.config.keyboardActions?.[e.key];\n\n        if (typeof action === 'function') {\n            action(this.viewer, e);\n            e.preventDefault();\n            return;\n        }\n\n        if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) {\n            return;\n        }\n\n        if (action && !this.keyHandler.pending) {\n            if (action !== ACTIONS.ZOOM_IN && action !== ACTIONS.ZOOM_OUT) {\n                this.viewer.stopAll();\n            }\n\n            switch (action) {\n                case ACTIONS.ROTATE_UP: this.viewer.dynamics.position.roll({ pitch: false }); break;\n                case ACTIONS.ROTATE_DOWN: this.viewer.dynamics.position.roll({ pitch: true }); break;\n                case ACTIONS.ROTATE_RIGHT: this.viewer.dynamics.position.roll({ yaw: false }); break;\n                case ACTIONS.ROTATE_LEFT: this.viewer.dynamics.position.roll({ yaw: true }); break;\n                case ACTIONS.ZOOM_IN: this.viewer.dynamics.zoom.roll(false); break;\n                case ACTIONS.ZOOM_OUT: this.viewer.dynamics.zoom.roll(true); break;\n            }\n\n            this.keyHandler.down(action);\n            e.preventDefault();\n        }\n    }\n\n    /**\n     * Handles keyboard events\n     */\n    private __onKeyUp() {\n        this.data.ctrlKeyDown = false;\n\n        if (!this.state.keyboardEnabled) {\n            return;\n        }\n\n        this.keyHandler.up((action) => {\n            if (action === ACTIONS.ZOOM_IN || action === ACTIONS.ZOOM_OUT) {\n                this.viewer.dynamics.zoom.stop();\n            } else {\n                this.viewer.dynamics.position.stop();\n                this.viewer.resetIdleTimer();\n            }\n        });\n    }\n\n    /**\n     * Handles mouse down events\n     */\n    private __onMouseDown(evt: MouseEvent) {\n        this.step.add(Step.CLICK);\n        this.data.startMouseX = evt.clientX;\n        this.data.startMouseY = evt.clientY;\n    }\n\n    /**\n     *Handles mouse up events\n     */\n    private __onMouseUp(evt: MouseEvent) {\n        if (this.step.is(Step.CLICK, Step.MOVING)) {\n            this.__stopMove(evt.clientX, evt.clientY, evt, evt.button === 2);\n        }\n    }\n\n    /**\n     * Handles mouse move events\n     */\n    private __onMouseMove(evt: MouseEvent) {\n        if (this.config.mousemove && this.step.is(Step.CLICK, Step.MOVING)) {\n            evt.preventDefault();\n            this.__doMove(evt.clientX, evt.clientY);\n        }\n\n        this.__handleObjectsEvents(evt);\n    }\n\n    /**\n     * Handles touch events\n     */\n    private __onTouchStart(evt: TouchEvent) {\n        if (evt.touches.length === 1) {\n            this.step.add(Step.CLICK);\n            this.data.startMouseX = evt.touches[0].clientX;\n            this.data.startMouseY = evt.touches[0].clientY;\n\n            if (!this.data.longtouchTimeout) {\n                this.data.longtouchTimeout = setTimeout(() => {\n                    const touch = evt.touches[0];\n                    this.__stopMove(touch.clientX, touch.clientY, evt, true);\n                    this.data.longtouchTimeout = null;\n                }, LONGTOUCH_DELAY);\n            }\n        } else if (evt.touches.length === 2) {\n            this.step.set(Step.IDLE);\n            this.__cancelLongTouch();\n\n            if (this.config.mousemove) {\n                this.__cancelTwoFingersOverlay();\n                this.__startMoveZoom(evt);\n                evt.preventDefault();\n            }\n        }\n    }\n\n    /**\n     * Handles touch events\n     */\n    private __onTouchEnd(evt: TouchEvent) {\n        this.__cancelLongTouch();\n\n        if (this.step.is(Step.CLICK, Step.MOVING)) {\n            evt.preventDefault();\n            this.__cancelTwoFingersOverlay();\n\n            if (evt.touches.length === 1) {\n                this.__stopMove(this.data.mouseX, this.data.mouseY);\n            } else if (evt.touches.length === 0) {\n                const touch = evt.changedTouches[0];\n                this.__stopMove(touch.clientX, touch.clientY, evt);\n            }\n        }\n    }\n\n    /**\n     * Handles touch move events\n     */\n    private __onTouchMove(evt: TouchEvent) {\n        this.__cancelLongTouch();\n\n        if (!this.config.mousemove) {\n            return;\n        }\n\n        if (evt.touches.length === 1) {\n            if (this.config.touchmoveTwoFingers) {\n                if (this.step.is(Step.CLICK) && !this.data.twofingersTimeout) {\n                    this.data.twofingersTimeout = setTimeout(() => {\n                        this.viewer.overlay.show({\n                            id: IDS.TWO_FINGERS,\n                            image: gestureIcon,\n                            title: this.config.lang.twoFingers,\n                        });\n                    }, TWOFINGERSOVERLAY_DELAY);\n                }\n            } else if (this.step.is(Step.CLICK, Step.MOVING)) {\n                evt.preventDefault();\n                const touch = evt.touches[0];\n                this.__doMove(touch.clientX, touch.clientY);\n            }\n        } else {\n            this.__doMoveZoom(evt);\n            this.__cancelTwoFingersOverlay();\n        }\n    }\n\n    /**\n     * Cancel the long touch timer if any\n     */\n    private __cancelLongTouch() {\n        if (this.data.longtouchTimeout) {\n            clearTimeout(this.data.longtouchTimeout);\n            this.data.longtouchTimeout = null;\n        }\n    }\n\n    /**\n     * Cancel the two fingers overlay timer if any\n     */\n    private __cancelTwoFingersOverlay() {\n        if (this.config.touchmoveTwoFingers) {\n            if (this.data.twofingersTimeout) {\n                clearTimeout(this.data.twofingersTimeout);\n                this.data.twofingersTimeout = null;\n            }\n            this.viewer.overlay.hide(IDS.TWO_FINGERS);\n        }\n    }\n\n    /**\n     * Handles mouse wheel events\n     */\n    private __onMouseWheel(evt: WheelEvent) {\n        if (!this.config.mousewheel || !evt.deltaY) {\n            return;\n        }\n\n        if (this.config.mousewheelCtrlKey && !this.data.ctrlKeyDown) {\n            this.viewer.overlay.show({\n                id: IDS.CTRL_ZOOM,\n                image: mousewheelIcon,\n                title: this.config.lang.ctrlZoom,\n            });\n\n            clearTimeout(this.data.ctrlZoomTimeout);\n            this.data.ctrlZoomTimeout = setTimeout(() => this.viewer.overlay.hide(IDS.CTRL_ZOOM), CTRLZOOM_TIMEOUT);\n\n            return;\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n\n        const delta = (evt.deltaY / Math.abs(evt.deltaY)) * 5 * this.config.zoomSpeed;\n        if (delta !== 0) {\n            this.viewer.dynamics.zoom.step(-delta, 5);\n        }\n    }\n\n    /**\n     * Handles fullscreen events\n     */\n    private __onFullscreenChange() {\n        const fullscreen = this.viewer.isFullscreenEnabled();\n\n        if (this.config.keyboard === 'fullscreen') {\n            if (fullscreen) {\n                this.viewer.startKeyboardControl();\n            } else {\n                this.viewer.stopKeyboardControl();\n            }\n        }\n\n        this.viewer.dispatchEvent(new FullscreenEvent(fullscreen));\n    }\n\n    /**\n     * Resets all state variables\n     */\n    private __resetMove() {\n        this.step.set(Step.IDLE);\n        this.data.mouseX = 0;\n        this.data.mouseY = 0;\n        this.data.startMouseX = 0;\n        this.data.startMouseY = 0;\n    }\n\n    /**\n     * Initializes the combines move and zoom\n     */\n    private __startMoveZoom(evt: TouchEvent) {\n        this.viewer.stopAll();\n        this.__resetMove();\n\n        const touchData = getTouchData(evt);\n\n        this.step.set(Step.MOVING);\n        this.data.accumulatorFactor = this.config.moveInertia;\n        ({\n            distance: this.data.pinchDist,\n            center: { x: this.data.mouseX, y: this.data.mouseY },\n        } = touchData);\n    }\n\n    /**\n     * Stops the movement\n     * @description If the move threshold was not reached a click event is triggered\n     */\n    private __stopMove(clientX: number, clientY: number, event?: Event, rightclick = false) {\n        if (this.step.is(Step.CLICK) && !this.__moveThresholdReached(clientX, clientY)) {\n            this.__doClick(clientX, clientY, event, rightclick);\n        }\n\n        if (this.config.moveInertia) {\n            this.data.accumulatorFactor = Math.pow(this.config.moveInertia, 0.5);\n        }\n\n        this.__resetMove();\n        this.viewer.resetIdleTimer();\n    }\n\n    /**\n     * Triggers an event with all coordinates when a simple click is performed\n     */\n    private __doClick(clientX: number, clientY: number, event?: Event, rightclick = false) {\n        const boundingRect = this.viewer.container.getBoundingClientRect();\n\n        const viewerX = clientX - boundingRect.left;\n        const viewerY = clientY - boundingRect.top;\n\n        const intersections = this.viewer.renderer.getIntersections({ x: viewerX, y: viewerY });\n        const sphereIntersection = intersections.find(i => i.object.userData[VIEWER_DATA]);\n\n        if (sphereIntersection) {\n            const sphericalCoords = this.viewer.dataHelper.vector3ToSphericalCoords(sphereIntersection.point);\n\n            const data: ClickData = {\n                rightclick: rightclick,\n                originalEvent: event,\n                target: getEventTarget(event),\n                clientX,\n                clientY,\n                viewerX,\n                viewerY,\n                yaw: sphericalCoords.yaw,\n                pitch: sphericalCoords.pitch,\n                objects: intersections.map(i => i.object).filter(o => !o.userData[VIEWER_DATA]),\n            };\n\n            try {\n                const textureCoords = this.viewer.dataHelper.sphericalCoordsToTextureCoords(data);\n                Object.assign(data, textureCoords);\n            } catch {\n                // nothing\n            }\n\n            if (!this.data.dblclickTimeout) {\n                this.viewer.dispatchEvent(new ClickEvent(data));\n\n                this.data.dblclickData = clone(data);\n                this.data.dblclickTimeout = setTimeout(() => {\n                    this.data.dblclickTimeout = null;\n                    this.data.dblclickData = null;\n                }, DBLCLICK_DELAY);\n            } else {\n                if (\n                    Math.abs(this.data.dblclickData.clientX - data.clientX) < this.moveThreshold\n                    && Math.abs(this.data.dblclickData.clientY - data.clientY) < this.moveThreshold\n                ) {\n                    this.viewer.dispatchEvent(new DoubleClickEvent(this.data.dblclickData));\n                }\n\n                clearTimeout(this.data.dblclickTimeout);\n                this.data.dblclickTimeout = null;\n                this.data.dblclickData = null;\n            }\n        }\n    }\n\n    /**\n     * Trigger events for observed THREE objects\n     */\n    private __handleObjectsEvents(evt: MouseEvent) {\n        if (!isEmpty(this.state.objectsObservers) && evt.composedPath().includes(this.viewer.container)) {\n            const viewerPos = getPosition(this.viewer.container);\n\n            const viewerPoint: Point = {\n                x: evt.clientX - viewerPos.x,\n                y: evt.clientY - viewerPos.y,\n            };\n\n            const intersections = this.viewer.renderer.getIntersections(viewerPoint);\n\n            const emit = (\n                object: Mesh,\n                key: string,\n                evtCtor: new (e: MouseEvent, o: Mesh, pt: Point, data: any) => ViewerEvents,\n            ) => {\n                this.viewer.dispatchEvent(new evtCtor(evt, object, viewerPoint, key));\n            };\n\n            for (const [key, object] of Object.entries(this.state.objectsObservers) as Array<[string, Mesh | null]>) {\n                const intersection = intersections.find(i => i.object.userData[key]);\n\n                if (intersection) {\n                    if (object && intersection.object !== object) {\n                        emit(object, key, ObjectLeaveEvent);\n                        this.state.objectsObservers[key] = null;\n                    }\n\n                    if (!object) {\n                        this.state.objectsObservers[key] = intersection.object;\n                        emit(intersection.object, key, ObjectEnterEvent);\n                    } else {\n                        emit(intersection.object, key, ObjectHoverEvent);\n                    }\n                } else if (object) {\n                    emit(object, key, ObjectLeaveEvent);\n                    this.state.objectsObservers[key] = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * Starts moving when crossing moveThreshold and performs movement\n     */\n    private __doMove(clientX: number, clientY: number) {\n        if (this.step.is(Step.CLICK) && this.__moveThresholdReached(clientX, clientY)) {\n            this.viewer.stopAll();\n            this.__resetMove();\n            this.step.set(Step.MOVING);\n            this.data.mouseX = clientX;\n            this.data.mouseY = clientY;\n            this.data.accumulatorFactor = this.config.moveInertia;\n        } else if (this.step.is(Step.MOVING)) {\n            const x = (clientX - this.data.mouseX) * Math.cos(this.state.roll) - (clientY - this.data.mouseY) * Math.sin(this.state.roll);\n            const y = (clientY - this.data.mouseY) * Math.cos(this.state.roll) + (clientX - this.data.mouseX) * Math.sin(this.state.roll);\n\n            const rotation: Position = {\n                yaw: this.config.moveSpeed * (x / this.state.size.width) * MathUtils.degToRad(this.state.hFov),\n                pitch: this.config.moveSpeed * (y / this.state.size.height) * MathUtils.degToRad(this.state.vFov),\n            };\n\n            this.data.moveDelta.yaw += rotation.yaw;\n            this.data.moveDelta.pitch += rotation.pitch;\n\n            this.data.mouseX = clientX;\n            this.data.mouseY = clientY;\n        }\n    }\n\n    /**\n     * Checks if the cursor was move beyond the move threshold\n     */\n    private __moveThresholdReached(clientX: number, clientY: number) {\n        return (\n            Math.abs(clientX - this.data.startMouseX) >= this.moveThreshold\n            || Math.abs(clientY - this.data.startMouseY) >= this.moveThreshold\n        );\n    }\n\n    /**\n     * Perfoms combined move and zoom\n     */\n    private __doMoveZoom(evt: TouchEvent) {\n        if (this.step.is(Step.MOVING)) {\n            evt.preventDefault();\n\n            const touchData = getTouchData(evt);\n\n            this.__doMove(touchData.center.x, touchData.center.y);\n\n            this.data.moveDelta.zoom += this.config.zoomSpeed * ((touchData.distance - this.data.pinchDist) / SYSTEM.pixelRatio);\n\n            this.data.pinchDist = touchData.distance;\n        }\n    }\n\n    private __applyMoveDelta() {\n        const EPS = 0.001;\n\n        if (Math.abs(this.data.moveDelta.yaw) > 0 || Math.abs(this.data.moveDelta.pitch) > 0) {\n            const currentPosition = this.viewer.getPosition();\n            this.viewer.rotate({\n                yaw: currentPosition.yaw - this.data.moveDelta.yaw * (1 - this.config.moveInertia),\n                pitch: currentPosition.pitch + this.data.moveDelta.pitch * (1 - this.config.moveInertia),\n            });\n\n            this.data.moveDelta.yaw *= this.data.accumulatorFactor;\n            this.data.moveDelta.pitch *= this.data.accumulatorFactor;\n\n            if (Math.abs(this.data.moveDelta.yaw) <= EPS) {\n                this.data.moveDelta.yaw = 0;\n            }\n            if (Math.abs(this.data.moveDelta.pitch) <= EPS) {\n                this.data.moveDelta.pitch = 0;\n            }\n        }\n\n        if (Math.abs(this.data.moveDelta.zoom) > 0) {\n            const currentZoom = this.viewer.getZoomLevel();\n            this.viewer.zoom(currentZoom + this.data.moveDelta.zoom * (1 - this.config.moveInertia));\n\n            this.data.moveDelta.zoom *= this.config.moveInertia;\n\n            if (Math.abs(this.data.moveDelta.zoom) <= EPS) {\n                this.data.moveDelta.zoom = 0;\n            }\n        }\n    }\n\n    private __clearMoveDelta() {\n        this.data.moveDelta.yaw = 0;\n        this.data.moveDelta.pitch = 0;\n        this.data.moveDelta.zoom = 0;\n    }\n}\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><path fill=\"currentColor\" d=\"M33.38 33.2a1.96 1.96 0 0 0 1.5-3.23 10.61 10.61 0 0 1 7.18-17.51c.7-.06 1.31-.49 1.61-1.12a13.02 13.02 0 0 1 11.74-7.43c7.14 0 12.96 5.8 12.96 12.9 0 3.07-1.1 6.05-3.1 8.38-.7.82-.61 2.05.21 2.76.83.7 2.07.6 2.78-.22a16.77 16.77 0 0 0 4.04-10.91C72.3 7.54 64.72 0 55.4 0a16.98 16.98 0 0 0-14.79 8.7 14.6 14.6 0 0 0-12.23 14.36c0 3.46 1.25 6.82 3.5 9.45.4.45.94.69 1.5.69m45.74 43.55a22.13 22.13 0 0 1-5.23 12.4c-4 4.55-9.53 6.86-16.42 6.86-12.6 0-20.1-10.8-20.17-10.91a1.82 1.82 0 0 0-.08-.1c-5.3-6.83-14.55-23.82-17.27-28.87-.05-.1 0-.21.02-.23a6.3 6.3 0 0 1 8.24 1.85l9.38 12.59a1.97 1.97 0 0 0 3.54-1.17V25.34a4 4 0 0 1 1.19-2.87 3.32 3.32 0 0 1 2.4-.95c1.88.05 3.4 1.82 3.4 3.94v24.32a1.96 1.96 0 0 0 3.93 0v-33.1a3.5 3.5 0 0 1 7 0v35.39a1.96 1.96 0 0 0 3.93 0v-.44c.05-2.05 1.6-3.7 3.49-3.7 1.93 0 3.5 1.7 3.5 3.82v5.63c0 .24.04.48.13.71l.1.26a1.97 1.97 0 0 0 3.76-.37c.33-1.78 1.77-3.07 3.43-3.07 1.9 0 3.45 1.67 3.5 3.74l-1.77 18.1zM77.39 51c-1.25 0-2.45.32-3.5.9v-.15c0-4.27-3.33-7.74-7.42-7.74-1.26 0-2.45.33-3.5.9V16.69a7.42 7.42 0 0 0-14.85 0v1.86a7 7 0 0 0-3.28-.94 7.21 7.21 0 0 0-5.26 2.07 7.92 7.92 0 0 0-2.38 5.67v37.9l-5.83-7.82a10.2 10.2 0 0 0-13.35-2.92 4.1 4.1 0 0 0-1.53 5.48C20 64.52 28.74 80.45 34.07 87.34c.72 1.04 9.02 12.59 23.4 12.59 7.96 0 14.66-2.84 19.38-8.2a26.06 26.06 0 0 0 6.18-14.6l1.78-18.2v-.2c0-4.26-3.32-7.73-7.42-7.73z\"/><!--Created by AomAm from the Noun Project--></svg>\n","<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 17 79 79\"><path fill=\"currentColor\" d=\"M38.1 29.27c-.24 0-.44.2-.44.45v10.7a.45.45 0 00.9 0v-10.7c0-.25-.2-.45-.45-.45zm10.2 26.66a11.54 11.54 0 01-8.48-6.14.45.45 0 10-.8.41 12.45 12.45 0 009.22 6.62.45.45 0 00.07-.9zm24.55-13.08a23.04 23.04 0 00-22.56-23v7.07l-.01.05a2.83 2.83 0 012.39 2.78v14.03l.09-.02h8.84v-9.22a.45.45 0 11.9 0v9.22h10.35v-.9zm0 27.33V44.66H62.5c-.02 2.01-.52 4-1.47 5.76a.45.45 0 01-.61.18.45.45 0 01-.19-.61 11.54 11.54 0 001.36-5.33h-8.83l-.1-.01a2.83 2.83 0 01-2.83 2.84h-.04-.04a2.83 2.83 0 01-2.83-2.83v-14.9a2.82 2.82 0 012.47-2.8v-7.11a23.04 23.04 0 00-22.57 23v.91h14.72V29.88a8.2 8.2 0 015.02-7.57c.22-.1.5.01.59.24.1.23-.01.5-.24.6a7.3 7.3 0 00-4.47 6.73v13.88h3.9a.45.45 0 110 .9h-3.9v.15a7.32 7.32 0 0011.23 6.17.45.45 0 01.49.76 8.22 8.22 0 01-12.62-6.93v-.15H26.82v25.52a23.04 23.04 0 0023.01 23.01 23.04 23.04 0 0023.02-23.01zm1.8-27.33v27.33A24.85 24.85 0 0149.84 95a24.85 24.85 0 01-24.82-24.82V42.85a24.85 24.85 0 0124.82-24.82 24.85 24.85 0 0124.83 24.82zM57.98 29.88v9.36a.45.45 0 11-.9 0v-9.36a7.28 7.28 0 00-3.4-6.17.45.45 0 01.49-.76 8.18 8.18 0 013.8 6.93z\"/><!-- Created by Icon Island from the Noun Project --></svg>\n","import {\n    Box3,\n    ColorManagement,\n    Euler,\n    Frustum,\n    Group,\n    Intersection,\n    LinearSRGBColorSpace,\n    LinearToneMapping,\n    MathUtils,\n    Matrix4,\n    Mesh,\n    MeshBasicMaterial,\n    Object3D,\n    PerspectiveCamera,\n    Raycaster,\n    Scene,\n    SphereGeometry,\n    Vector2,\n    Vector3,\n    WebGLRenderTarget,\n    WebGLRenderer,\n} from 'three';\nimport { SPHERE_RADIUS, VIEWER_DATA } from '../data/constants';\nimport { SYSTEM } from '../data/system';\nimport {\n    BeforeAnimateEvent,\n    BeforeRenderEvent,\n    ConfigChangedEvent,\n    PositionUpdatedEvent,\n    RenderEvent,\n    RollUpdatedEvent,\n    SizeUpdatedEvent,\n    ZoomUpdatedEvent,\n} from '../events';\nimport {\n    PanoData,\n    PanoramaOptions,\n    Point,\n    SphereCorrection,\n    TextureData,\n    TransitionOptions,\n} from '../model';\nimport { Animation, isNil } from '../utils';\nimport { Viewer } from '../Viewer';\nimport { AbstractService } from './AbstractService';\n\n// https://discourse.threejs.org/t/updates-to-color-management-in-three-js-r152/50791\nColorManagement.enabled = false;\n\nconst vector2 = new Vector2();\nconst matrix4 = new Matrix4();\nconst box3 = new Box3();\n\nexport type CustomRenderer = Pick<WebGLRenderer, 'render'> & {\n    getIntersections?(raycaster: Raycaster, vector: Vector2): Array<Intersection<Mesh>>;\n};\n\n/**\n * Controller for the three.js scene\n */\nexport class Renderer extends AbstractService {\n    private readonly renderer: WebGLRenderer;\n    private readonly scene: Scene;\n    /** @internal */\n    public readonly camera: PerspectiveCamera;\n    /** @internal */\n    public mesh: Object3D;\n    private meshContainer: Group;\n    private readonly raycaster: Raycaster;\n    private readonly frustum: Frustum;\n    private readonly container: HTMLElement;\n\n    private timestamp?: number;\n    private frustumNeedsUpdate = true;\n    private customRenderer?: CustomRenderer;\n\n    get panoramaPose(): Euler {\n        return this.mesh.rotation;\n    }\n\n    get sphereCorrection(): Euler {\n        return this.meshContainer.rotation;\n    }\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n\n        this.renderer = new WebGLRenderer(this.config.rendererParameters);\n        this.renderer.setPixelRatio(SYSTEM.pixelRatio);\n        // https://discourse.threejs.org/t/updates-to-color-management-in-three-js-r152/50791\n        this.renderer.outputColorSpace = LinearSRGBColorSpace;\n        this.renderer.toneMapping = LinearToneMapping;\n        this.renderer.domElement.className = 'psv-canvas';\n        this.renderer.domElement.style.background = this.config.canvasBackground;\n\n        this.scene = new Scene();\n\n        this.camera = new PerspectiveCamera(50, 16 / 9, 0.1, 2 * SPHERE_RADIUS);\n        this.camera.matrixAutoUpdate = false;\n\n        // mesh used to detect clicks on the viewer\n        const raycasterMesh = new Mesh(\n            new SphereGeometry(SPHERE_RADIUS).scale(-1, 1, 1),\n            new MeshBasicMaterial({ opacity: 0, transparent: true, depthTest: false, depthWrite: false }),\n        );\n        raycasterMesh.userData = { [VIEWER_DATA]: true };\n        this.scene.add(raycasterMesh);\n\n        this.raycaster = new Raycaster();\n        this.frustum = new Frustum();\n\n        this.container = document.createElement('div');\n        this.container.className = 'psv-canvas-container';\n        this.container.appendChild(this.renderer.domElement);\n        this.viewer.container.appendChild(this.container);\n\n        this.container.addEventListener('contextmenu', e => e.preventDefault());\n\n        this.viewer.addEventListener(SizeUpdatedEvent.type, this);\n        this.viewer.addEventListener(ZoomUpdatedEvent.type, this);\n        this.viewer.addEventListener(PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(RollUpdatedEvent.type, this);\n        this.viewer.addEventListener(ConfigChangedEvent.type, this);\n\n        this.hide();\n    }\n\n    /**\n     * @internal\n     */\n    init() {\n        this.show();\n        this.renderer.setAnimationLoop(t => this.__renderLoop(t));\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        // destroy ThreeJS\n        this.renderer.setAnimationLoop(null);\n        this.cleanScene(this.scene);\n        this.renderer.dispose();\n\n        // remove container\n        this.viewer.container.removeChild(this.container);\n\n        this.viewer.removeEventListener(SizeUpdatedEvent.type, this);\n        this.viewer.removeEventListener(ZoomUpdatedEvent.type, this);\n        this.viewer.removeEventListener(PositionUpdatedEvent.type, this);\n        this.viewer.removeEventListener(RollUpdatedEvent.type, this);\n        this.viewer.removeEventListener(ConfigChangedEvent.type, this);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case SizeUpdatedEvent.type: this.__onSizeUpdated(); break;\n            case ZoomUpdatedEvent.type: this.__onZoomUpdated(); break;\n            case PositionUpdatedEvent.type: this.__onPositionUpdated(); break;\n            case RollUpdatedEvent.type: this.__onPositionUpdated(); break;\n            case ConfigChangedEvent.type:\n                if ((e as ConfigChangedEvent).containsOptions('fisheye')) {\n                    this.__onPositionUpdated();\n                }\n                if ((e as ConfigChangedEvent).containsOptions('canvasBackground')) {\n                    this.renderer.domElement.style.background = this.config.canvasBackground;\n                }\n                break;\n        }\n    }\n\n    /**\n     * Hides the viewer\n     */\n    hide() {\n        this.container.style.opacity = '0';\n    }\n\n    /**\n     * Shows the viewer\n     */\n    show() {\n        this.container.style.opacity = '1';\n    }\n\n    /**\n     * Resets or replaces the THREE renderer by a custom one\n     */\n    setCustomRenderer(factory: ((renderer: WebGLRenderer) => CustomRenderer) | null) {\n        if (factory) {\n            this.customRenderer = factory(this.renderer);\n        } else {\n            this.customRenderer = null;\n        }\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Updates the size of the renderer and the aspect of the camera\n     */\n    private __onSizeUpdated() {\n        this.renderer.setSize(this.state.size.width, this.state.size.height);\n        this.camera.aspect = this.state.aspect;\n        this.camera.updateProjectionMatrix();\n        this.viewer.needsUpdate();\n        this.frustumNeedsUpdate = true;\n    }\n\n    /**\n     * Updates the fov of the camera\n     */\n    private __onZoomUpdated() {\n        this.camera.fov = this.state.vFov;\n        this.camera.updateProjectionMatrix();\n        this.viewer.needsUpdate();\n        this.frustumNeedsUpdate = true;\n    }\n\n    /**\n     * Updates the position of the camera\n     */\n    private __onPositionUpdated() {\n        this.camera.position.set(0, 0, 0);\n        this.camera.lookAt(this.state.direction);\n        if (this.config.fisheye) {\n            this.camera.position\n                .copy(this.state.direction)\n                .multiplyScalar(this.config.fisheye / 2)\n                .negate();\n        }\n        this.camera.rotateZ(-this.state.roll);\n\n        this.camera.updateMatrix();\n        this.camera.updateMatrixWorld();\n\n        this.viewer.needsUpdate();\n        this.frustumNeedsUpdate = true;\n    }\n\n    /**\n     * Main event loop, performs a render if `state.needsUpdate` is true\n     */\n    private __renderLoop(timestamp: number) {\n        const elapsed = !this.timestamp ? 0 : timestamp - this.timestamp;\n        this.timestamp = timestamp;\n\n        this.viewer.dispatchEvent(new BeforeRenderEvent(timestamp, elapsed));\n        this.viewer.dynamics.update(elapsed);\n\n        if (this.state.needsUpdate || this.state.continuousUpdateCount > 0) {\n            this.state.needsUpdate = false;\n            (this.customRenderer || this.renderer).render(this.scene, this.camera);\n            this.viewer.dispatchEvent(new RenderEvent());\n        }\n    }\n\n    /**\n     * Applies the texture to the scene, creates the scene if needed\n     * @internal\n     */\n    setTexture(textureData: TextureData) {\n        if (!this.meshContainer) {\n            this.meshContainer = new Group();\n            this.scene.add(this.meshContainer);\n        }\n\n        if (this.state.textureData) {\n            this.viewer.adapter.disposeTexture(this.state.textureData);\n        }\n\n        if (this.mesh) {\n            this.meshContainer.remove(this.mesh);\n            this.viewer.adapter.disposeMesh(this.mesh);\n        }\n\n        this.mesh = this.viewer.adapter.createMesh(textureData.panoData);\n        this.viewer.adapter.setTexture(this.mesh, textureData, false);\n        this.meshContainer.add(this.mesh);\n\n        this.state.textureData = textureData;\n\n        this.viewer.needsUpdate();\n    }\n\n    /**\n     * Applies a panorama data pose to a Mesh\n     * @internal\n     */\n    setPanoramaPose(panoData: PanoData, mesh: Object3D = this.mesh) {\n        const cleanCorrection = this.viewer.dataHelper.cleanPanoramaPose(panoData);\n        mesh.rotation.set(cleanCorrection.tilt, cleanCorrection.pan, cleanCorrection.roll, 'YXZ');\n    }\n\n    /**\n     * Applies a SphereCorrection to a Group\n     * @internal\n     */\n    setSphereCorrection(sphereCorrection: SphereCorrection, group: Object3D = this.meshContainer) {\n        const cleanCorrection = this.viewer.dataHelper.cleanSphereCorrection(sphereCorrection);\n        group.rotation.set(cleanCorrection.tilt, cleanCorrection.pan, cleanCorrection.roll, 'YXZ');\n    }\n\n    /**\n     * Performs transition between the current and a new texture\n     * @internal\n     */\n    transition(textureData: TextureData, options: PanoramaOptions, transition: TransitionOptions): Animation<any> {\n        // do not animate zoom in black/white transition without rotation\n        const zoomTransition = transition.effect === 'fade' || transition.rotation;\n\n        const positionProvided = !isNil(options.position);\n        const zoomProvided = !isNil(options.zoom);\n\n        const e = new BeforeAnimateEvent(\n            positionProvided ? this.viewer.dataHelper.cleanPosition(options.position) : undefined,\n            options.zoom,\n        );\n        this.viewer.dispatchEvent(e);\n\n        const tempContainer = new Group();\n        const newMesh = this.viewer.adapter.createMesh(textureData.panoData);\n        this.viewer.adapter.setTexture(newMesh, textureData, true);\n        this.viewer.adapter.setTextureOpacity(newMesh, 0);\n        this.setPanoramaPose(textureData.panoData, newMesh);\n        this.setSphereCorrection(options.sphereCorrection, tempContainer);\n\n        // rotate the new sphere to make the target position face the camera\n        if (positionProvided && !transition.rotation) {\n            const currentPosition = this.viewer.getPosition();\n\n            // rotation along the vertical axis\n            const verticalAxis = new Vector3(0, 1, 0);\n            tempContainer.rotateOnWorldAxis(verticalAxis, e.position.yaw - currentPosition.yaw);\n\n            // rotation along the camera horizontal axis\n            const horizontalAxis = new Vector3(0, 1, 0).cross(this.camera.getWorldDirection(new Vector3())).normalize();\n            tempContainer.rotateOnWorldAxis(horizontalAxis, e.position.pitch - currentPosition.pitch);\n        }\n\n        tempContainer.add(newMesh);\n        this.scene.add(tempContainer);\n\n        // make sure the new texture is transfered to the GPU before starting the animation\n        this.renderer.setRenderTarget(new WebGLRenderTarget<any>());\n        this.renderer.render(this.scene, this.camera);\n        this.renderer.setRenderTarget(null);\n\n        const { duration, properties } = this.viewer.dataHelper.getAnimationProperties(\n            transition.speed,\n            transition.rotation ? e.position : null,\n            zoomTransition ? e.zoomLevel : null,\n        );\n\n        const animation = new Animation({\n            properties: {\n                ...properties,\n                opacity: { start: 0.0, end: 1.0 },\n            },\n            duration: duration,\n            easing: 'inOutCubic',\n            onTick: (props) => {\n                switch (transition.effect) {\n                    case 'fade':\n                        this.viewer.adapter.setTextureOpacity(newMesh, props.opacity);\n                        break;\n                    case 'black':\n                    case 'white':\n                        if (props.opacity < 0.5) {\n                            this.renderer.toneMappingExposure = transition.effect === 'black'\n                                ? MathUtils.mapLinear(props.opacity, 0, 0.5, 1, 0)\n                                : MathUtils.mapLinear(props.opacity, 0, 0.5, 1, 4);\n                        } else {\n                            this.renderer.toneMappingExposure = transition.effect === 'black'\n                                ? MathUtils.mapLinear(props.opacity, 0.5, 1, 0, 1)\n                                : MathUtils.mapLinear(props.opacity, 0.5, 1, 4, 1);\n\n                            this.mesh.visible = false;\n                            this.viewer.adapter.setTextureOpacity(newMesh, 1);\n\n                            if (zoomProvided && !zoomTransition) {\n                                this.viewer.dynamics.zoom.setValue(e.zoomLevel);\n                            }\n                        }\n                        break;\n                }\n\n                if (positionProvided && transition.rotation) {\n                    this.viewer.dynamics.position.setValue({\n                        yaw: props.yaw,\n                        pitch: props.pitch,\n                    });\n                }\n                if (zoomProvided && zoomTransition) {\n                    this.viewer.dynamics.zoom.setValue(props.zoom);\n                }\n\n                this.viewer.needsUpdate();\n            },\n        });\n\n        animation.then((completed) => {\n            tempContainer.remove(newMesh);\n            this.scene.remove(tempContainer);\n\n            if (completed) {\n                // remove old texture and mesh\n                this.viewer.adapter.disposeTexture(this.state.textureData);\n                this.meshContainer.remove(this.mesh);\n                this.viewer.adapter.disposeMesh(this.mesh);\n\n                // promote new texture and mesh\n                this.mesh = newMesh;\n                this.meshContainer.add(newMesh);\n                this.state.textureData = textureData;\n\n                // apply rotations\n                this.setPanoramaPose(textureData.panoData);\n                this.setSphereCorrection(options.sphereCorrection);\n\n                if (positionProvided && !transition.rotation) {\n                    this.viewer.rotate(options.position);\n                }\n            } else {\n                this.viewer.adapter.disposeTexture(textureData);\n                this.viewer.adapter.disposeMesh(newMesh);\n            }\n        });\n\n        return animation;\n    }\n\n    /**\n     * Returns intersections with objects in the scene\n     */\n    getIntersections(viewerPoint: Point): Array<Intersection<Mesh>> {\n        vector2.x = (2 * viewerPoint.x) / this.state.size.width - 1;\n        vector2.y = (-2 * viewerPoint.y) / this.state.size.height + 1;\n\n        this.raycaster.setFromCamera(vector2, this.camera);\n\n        const intersections = this.raycaster\n            .intersectObjects(this.scene.children, true)\n            .filter(i => i.object.visible)\n            .filter(i => (i.object as Mesh).isMesh && !!i.object.userData) as Array<Intersection<Mesh>>;\n\n        if (this.customRenderer?.getIntersections) {\n            intersections.push(...this.customRenderer.getIntersections(this.raycaster, vector2));\n        }\n\n        return intersections;\n    }\n\n    /**\n     * Checks if an object/point is currently visible\n     */\n    isObjectVisible(value: Object3D | Vector3): boolean {\n        if (!value) {\n            return false;\n        }\n\n        if (this.frustumNeedsUpdate) {\n            matrix4.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse);\n            this.frustum.setFromProjectionMatrix(matrix4);\n            this.frustumNeedsUpdate = false;\n        }\n\n        if ((value as Vector3).isVector3) {\n            return this.frustum.containsPoint(value as Vector3);\n        } else if ((value as Mesh).isMesh && (value as Mesh).geometry) {\n            // Frustum.intersectsObject uses the boundingSphere by default\n            // for better precision we prefer the boundingBox\n            const mesh = value as Mesh;\n            if (!mesh.geometry.boundingBox) {\n                mesh.geometry.computeBoundingBox();\n            }\n            box3.copy(mesh.geometry.boundingBox).applyMatrix4(mesh.matrixWorld);\n            return this.frustum.intersectsBox(box3);\n        } else if ((value as Object3D).isObject3D) {\n            return this.frustum.intersectsObject(value as Object3D);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Adds an object to the THREE scene\n     */\n    addObject(object: Object3D) {\n        this.scene.add(object);\n    }\n\n    /**\n     * Removes an object from the THREE scene\n     */\n    removeObject(object: Object3D) {\n        this.scene.remove(object);\n    }\n\n    /**\n     * Calls `dispose` on all objects and textures\n     * @internal\n     */\n    cleanScene(object: any) {\n        const disposeMaterial = (material: any) => {\n            material.map?.dispose();\n\n            if (material.uniforms) {\n                Object.values(material.uniforms).forEach((uniform: any) => {\n                    uniform.value?.dispose?.();\n                });\n            }\n\n            material.dispose();\n        };\n\n        object.traverse((item: any) => {\n            item.geometry?.dispose();\n\n            if (item.material) {\n                if (Array.isArray(item.material)) {\n                    item.material.forEach((material: any) => {\n                        disposeMaterial(material);\n                    });\n                } else {\n                    disposeMaterial(item.material);\n                }\n            }\n\n            if (!(item instanceof Scene)) {\n                item.dispose?.();\n            }\n\n            if (item !== object) {\n                this.cleanScene(item);\n            }\n        });\n    }\n}\n","import { Loader } from 'three';\n\n/**\n * Copy of ThreeJS FileLoader with support of an AbortSignal and only supporting Blob response\n * Also removing all unused features for PSV\n */\nexport class BlobLoader extends Loader<Blob, string> {\n    // @ts-ignore\n    load(\n        url: string,\n        onLoad: (data: Blob) => void,\n        onProgress: (event: ProgressEvent) => void,\n        onError: (err: unknown) => void,\n        abortSignal?: AbortSignal,\n    ) {\n        // create request\n        const req = new Request(url, {\n            headers: new Headers(this.requestHeader),\n            credentials: this.withCredentials ? 'include' : 'same-origin',\n        });\n\n        // start the fetch\n        fetch(req, {\n            signal: abortSignal,\n        })\n            .then((response) => {\n                if (response.status === 200 || response.status === 0) {\n                    const reader = response.body.getReader();\n\n                    // Nginx needs X-File-Size check\n                    // https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n                    const contentLength = response.headers.get('Content-Length') || response.headers.get('X-File-Size');\n                    const total = contentLength ? parseInt(contentLength) : 0;\n                    const lengthComputable = total !== 0;\n                    let loaded = 0;\n\n                    // periodically read data into the new stream tracking while download progress\n                    const stream = new ReadableStream({\n                        start(controller) {\n                            readData();\n\n                            function readData() {\n                                reader.read()\n                                    .then(({ done, value }) => {\n                                        if (done) {\n                                            controller.close();\n                                        } else {\n                                            loaded += value.byteLength;\n                                            const event = new ProgressEvent('progress', { lengthComputable, loaded, total });\n                                            onProgress(event);\n                                            controller.enqueue(value);\n                                            readData();\n                                        }\n                                    })\n                                    .catch((err) => {\n                                        onError(err);\n                                    });\n                            }\n                        },\n                    });\n\n                    return new Response(stream);\n                } else {\n                    throw new Error(`fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`);\n                }\n            })\n            .then((response) => {\n                return response.blob();\n            })\n            .then((data) => {\n                onLoad(data);\n            })\n            .catch((err) => {\n                onError(err);\n            });\n    }\n}\n","import { Loader } from 'three';\n\n/**\n * Copy of ThreeJS ImageLoader with support of an AbortSignal\n * Also removing all unused features for PSV\n */\nexport class ImageLoader extends Loader<HTMLImageElement, string> {\n    // @ts-ignore\n    load(\n        url: string,\n        onLoad: (data: HTMLImageElement) => void,\n        onError: (err: unknown) => void,\n        abortSignal?: AbortSignal,\n    ) {\n        const image = document.createElement('img');\n\n        function onImageLoad(this: HTMLImageElement) {\n            removeEventListeners();\n            onLoad(this);\n        }\n\n        function onImageError(event: ErrorEvent) {\n            removeEventListeners();\n\n            if (abortSignal?.aborted) {\n                // Simulate an error similar to the DOMException thrown by the Fetch API\n                // (DOMException is not instanciable)\n                const e = new Error();\n                e.name = 'AbortError';\n                e.message = 'The operation was aborted.';\n                onError(e);\n            } else {\n                onError(event);\n            }\n        }\n\n        function onAbortSignal() {\n            image.src = '';\n        }\n\n        function removeEventListeners() {\n            image.removeEventListener('load', onImageLoad, false);\n            image.removeEventListener('error', onImageError, false);\n\n            abortSignal?.removeEventListener('abort', onAbortSignal, false);\n        }\n\n        image.addEventListener('load', onImageLoad, false);\n        image.addEventListener('error', onImageError, false);\n\n        abortSignal?.addEventListener('abort', onAbortSignal, false);\n\n        if (!url.startsWith('data:') && this.crossOrigin !== undefined) {\n            image.crossOrigin = this.crossOrigin;\n        }\n\n        image.src = url;\n\n        return image;\n    }\n}\n","import { PSVError } from '../PSVError';\nimport type { Viewer } from '../Viewer';\nimport { Cache } from '../data/cache';\nimport { LoadProgressEvent } from '../events';\nimport { BlobLoader } from '../lib/BlobLoader';\nimport { ImageLoader } from '../lib/ImageLoader';\nimport { AbstractService } from './AbstractService';\n\n/**\n * Image and texture loading system\n */\nexport class TextureLoader extends AbstractService {\n    private readonly fileLoader: BlobLoader;\n    private readonly imageLoader: ImageLoader;\n\n    private abortCtrl: Record<string, AbortController> = {};\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n\n        this.fileLoader = new BlobLoader();\n        this.imageLoader = new ImageLoader();\n\n        if (this.config.withCredentials) {\n            this.fileLoader.setWithCredentials(true);\n            this.imageLoader.setCrossOrigin('use-credentials');\n        }\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.abortLoading();\n        super.destroy();\n    }\n\n    /**\n     * Cancels current HTTP requests\n     * @internal\n     */\n    abortLoading() {\n        Object.values(this.abortCtrl).forEach(ctrl => ctrl.abort());\n        this.abortCtrl = {};\n    }\n\n    /**\n     * Loads a Blob with FileLoader\n     */\n    loadFile(url: string, onProgress?: (p: number) => void, cacheKey?: string): Promise<Blob> {\n        const cached = Cache.get(url, cacheKey);\n\n        if (cached) {\n            if (cached instanceof Blob) {\n                onProgress?.(100);\n                return Promise.resolve(cached);\n            } else {\n                // unlikely case when the image has already been loaded with the ImageLoader\n                Cache.remove(url, cacheKey);\n            }\n        }\n\n        if (this.config.requestHeaders) {\n            this.fileLoader.setRequestHeader(this.config.requestHeaders(url));\n        }\n\n        return new Promise((resolve, reject) => {\n            let progress = 0;\n            onProgress?.(progress);\n\n            this.fileLoader.load(\n                url,\n                (result) => {\n                    progress = 100;\n                    onProgress?.(progress);\n                    Cache.add(url, cacheKey, result);\n                    resolve(result);\n                },\n                (e) => {\n                    if (e.lengthComputable) {\n                        const newProgress = (e.loaded / e.total) * 100;\n                        if (newProgress > progress) {\n                            progress = newProgress;\n                            onProgress?.(progress);\n                        }\n                    }\n                },\n                (err) => {\n                    reject(err);\n                },\n                this.__getAbortSignal(cacheKey),\n            );\n        });\n    }\n\n    /**\n     * Loads an image with ImageLoader or with FileLoader if progress is tracked or if request headers are configured\n     */\n    loadImage(url: string, onProgress?: (p: number) => void, cacheKey?: string): Promise<HTMLImageElement> {\n        const cached = Cache.get(url, cacheKey);\n\n        if (cached) {\n            onProgress?.(100);\n            if (cached instanceof Blob) {\n                // unlikely case when the image has already been loaded with the FileLoader\n                return this.blobToImage(cached);\n            } else {\n                return Promise.resolve(cached);\n            }\n        }\n\n        if (!onProgress && !this.config.requestHeaders) {\n            return new Promise((resolve, reject) => {\n                this.imageLoader.load(\n                    url,\n                    (result) => {\n                        Cache.add(url, cacheKey, result);\n                        resolve(result);\n                    },\n                    (err) => {\n                        reject(err);\n                    },\n                    this.__getAbortSignal(cacheKey),\n                );\n            });\n        } else {\n            return this.loadFile(url, onProgress, cacheKey).then(blob => this.blobToImage(blob));\n        }\n    }\n\n    /**\n     * Converts a file loaded with {@link loadFile} into an image\n     */\n    blobToImage(blob: Blob): Promise<HTMLImageElement> {\n        return new Promise((resolve, reject) => {\n            const img = document.createElement('img');\n            img.onload = () => {\n                URL.revokeObjectURL(img.src);\n                resolve(img);\n            };\n            img.onerror = reject;\n            img.src = URL.createObjectURL(blob);\n        });\n    }\n\n    /**\n     * Preload a panorama file without displaying it\n     */\n    preloadPanorama(panorama: any): Promise<unknown> {\n        if (this.viewer.adapter.supportsPreload(panorama)) {\n            return this.viewer.adapter.loadTexture(panorama, false);\n        } else {\n            return Promise.reject(new PSVError('Current adapter does not support preload'));\n        }\n    }\n\n    /**\n     * @internal\n     */\n    dispatchProgress(progress: number) {\n        this.viewer.loader.setProgress(progress);\n        this.viewer.dispatchEvent(new LoadProgressEvent(Math.round(progress)));\n    }\n\n    /**\n     * Get an abort signal\n     * the signal is shared accross all requests with the same cache key (for tiles adapters)\n     */\n    private __getAbortSignal(cacheKey: string): AbortSignal {\n        if (cacheKey) {\n            if (this.abortCtrl[cacheKey]?.signal.aborted) {\n                delete this.abortCtrl[cacheKey];\n            }\n            if (!this.abortCtrl[cacheKey]) {\n                this.abortCtrl[cacheKey] = new AbortController();\n            }\n            return this.abortCtrl[cacheKey].signal;\n        }\n        return null;\n    }\n}\n","import { MathUtils } from 'three';\nimport { Dynamic, MultiDynamic } from '../utils';\nimport type { Viewer } from '../Viewer';\nimport { PositionUpdatedEvent, RollUpdatedEvent, ZoomUpdatedEvent } from '../events';\nimport { AbstractService } from './AbstractService';\n\nexport class ViewerDynamics extends AbstractService {\n    readonly zoom = new Dynamic(\n        (zoomLevel) => {\n            this.viewer.state.vFov = this.viewer.dataHelper.zoomLevelToFov(zoomLevel);\n            this.viewer.state.hFov = this.viewer.dataHelper.vFovToHFov(this.viewer.state.vFov);\n            this.viewer.dispatchEvent(new ZoomUpdatedEvent(zoomLevel));\n        },\n        {\n            defaultValue: this.viewer.config.defaultZoomLvl,\n            min: 0,\n            max: 100,\n            wrap: false,\n        },\n    );\n\n    readonly position = new MultiDynamic(\n        (position) => {\n            this.viewer.dataHelper.sphericalCoordsToVector3(position, this.viewer.state.direction);\n            this.viewer.dispatchEvent(new PositionUpdatedEvent(position));\n        },\n        {\n            yaw: new Dynamic(null, {\n                defaultValue: this.config.defaultYaw,\n                min: 0,\n                max: 2 * Math.PI,\n                wrap: true,\n            }),\n            pitch: new Dynamic(null, {\n                defaultValue: this.config.defaultPitch,\n                min: -Math.PI / 2,\n                max: Math.PI / 2,\n                wrap: false,\n            }),\n        },\n    );\n\n    readonly roll = new Dynamic(\n        (roll) => {\n            this.viewer.state.roll = roll;\n            this.viewer.dispatchEvent(new RollUpdatedEvent(roll));\n        },\n        {\n            defaultValue: 0,\n            min: -Math.PI,\n            max: Math.PI,\n            wrap: false,\n        },\n    );\n\n    /**\n     * @internal\n     */\n    constructor(viewer: Viewer) {\n        super(viewer);\n        this.updateSpeeds();\n    }\n\n    /**\n     * @internal\n     */\n    updateSpeeds() {\n        this.zoom.setSpeed(this.config.zoomSpeed * 50);\n        this.position.setSpeed(MathUtils.degToRad(this.config.moveSpeed * 50));\n        this.roll.setSpeed(MathUtils.degToRad(this.config.moveSpeed * 50));\n    }\n\n    /**\n     * @internal\n     */\n    update(elapsed: number) {\n        this.zoom.update(elapsed);\n        this.position.update(elapsed);\n        this.roll.update(elapsed);\n    }\n}\n","import { Mesh, Vector3 } from 'three';\nimport { SPHERE_RADIUS } from '../data/constants';\nimport { Size, TextureData } from '../model';\nimport type { Animation } from '../utils';\n\n/**\n * Internal properties of the viewer\n */\nexport class ViewerState {\n    /**\n     * when all components are loaded\n     */\n    ready = false;\n\n    /**\n     * if the view needs to be renderer\n     */\n    needsUpdate = false;\n\n    /**\n     * number of plugins requesting to continuously render the scene\n     */\n    continuousUpdateCount = 0;\n\n    /**\n     * if the keyboard events are currently listened to\n     */\n    keyboardEnabled = false;\n\n    /**\n     * direction of the camera\n     */\n    direction = new Vector3(0, 0, SPHERE_RADIUS);\n\n    /**\n     * current camera roll\n     */\n    roll = 0;\n\n    /**\n     * vertical FOV\n     */\n    vFov = 60;\n\n    /**\n     * horizontal FOV\n     */\n    hFov = 60;\n\n    /**\n     * renderer aspect ratio\n     */\n    aspect = 1;\n\n    /**\n     * currently running animation\n     */\n    animation: Animation = null;\n\n    /**\n     * currently running transition\n     */\n    transitionAnimation: Animation = null;\n\n    /**\n     * promise of the last \"setPanorama()\" call\n     */\n    loadingPromise: Promise<any> = null;\n\n    /**\n     * time of the last user action\n     */\n    idleTime = -1;\n\n    /**\n     * registered THREE objects observer\n     */\n    objectsObservers: Record<string, Mesh | null> = {};\n\n    /**\n     * size of the container\n     */\n    size: Size = {\n        width: 0,\n        height: 0,\n    };\n\n    /**\n     * Current panorama texture displayed\n     */\n    textureData: TextureData;\n\n    /**\n     * Current override of the global cursor\n     */\n    cursorOverride: string;\n\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line  @typescript-eslint/no-empty-function\n    constructor() {}\n}\n","import { Object3D } from 'three';\nimport { PSVError } from './PSVError';\nimport type { AbstractAdapter } from './adapters/AbstractAdapter';\nimport type { AbstractComponent } from './components/AbstractComponent';\nimport { Loader } from './components/Loader';\nimport { Navbar } from './components/Navbar';\nimport { Notification } from './components/Notification';\nimport { Overlay } from './components/Overlay';\nimport { Panel } from './components/Panel';\nimport { Tooltip, TooltipConfig } from './components/Tooltip';\nimport { Cache } from './data/cache';\nimport { CONFIG_PARSERS, DEFAULTS, getViewerConfig, READONLY_OPTIONS } from './data/config';\nimport { IDS, VIEWER_DATA } from './data/constants';\nimport { SYSTEM } from './data/system';\nimport {\n    BeforeAnimateEvent,\n    BeforeRotateEvent,\n    ConfigChangedEvent,\n    PanoramaErrorEvent,\n    PanoramaLoadedEvent,\n    PanoramaLoadEvent,\n    ReadyEvent,\n    SizeUpdatedEvent,\n    StopAllEvent,\n    TransitionDoneEvent,\n    ViewerEvents,\n    ZoomUpdatedEvent,\n} from './events';\nimport errorIcon from './icons/error.svg';\nimport { TypedEventTarget } from './lib/TypedEventTarget';\nimport {\n    AnimateOptions,\n    CssSize,\n    ExtendedPosition,\n    PanoramaOptions,\n    ParsedViewerConfig,\n    Position,\n    Size,\n    UpdatableViewerConfig,\n    ViewerConfig,\n} from './model';\nimport type { AbstractPlugin, PluginConstructor } from './plugins/AbstractPlugin';\nimport { pluginInterop } from './plugins/AbstractPlugin';\nimport { DataHelper } from './services/DataHelper';\nimport { EventsHandler } from './services/EventsHandler';\nimport { Renderer } from './services/Renderer';\nimport { TextureLoader } from './services/TextureLoader';\nimport { ViewerDynamics } from './services/ViewerDynamics';\nimport { ViewerState } from './services/ViewerState';\nimport {\n    Animation,\n    checkClosedShadowDom,\n    checkStylesheet,\n    exitFullscreen,\n    getAbortError,\n    getElement,\n    isAbortError,\n    isExtendedPosition,\n    isFullscreenEnabled,\n    isNil,\n    logWarn,\n    requestFullscreen,\n    resolveBoolean,\n    toggleClass,\n} from './utils';\n\n/**\n * Photo Sphere Viewer controller\n */\nexport class Viewer extends TypedEventTarget<ViewerEvents> {\n    readonly state: ViewerState;\n    readonly config: ParsedViewerConfig;\n\n    readonly parent: HTMLElement;\n    readonly container: HTMLElement;\n\n    /** @internal */\n    readonly adapter: AbstractAdapter<any, any, any, Object3D>;\n    /** @internal */\n    readonly plugins: Record<string, AbstractPlugin<any>> = {};\n    /** @internal */\n    readonly dynamics: ViewerDynamics;\n\n    readonly renderer: Renderer;\n    readonly textureLoader: TextureLoader;\n    /** @internal */\n    readonly eventsHandler: EventsHandler;\n    readonly dataHelper: DataHelper;\n\n    readonly loader: Loader;\n    readonly navbar: Navbar;\n    readonly notification: Notification;\n    readonly overlay: Overlay;\n    readonly panel: Panel;\n\n    /** @internal */\n    readonly children: AbstractComponent[] = [];\n\n    constructor(config: ViewerConfig) {\n        super();\n\n        // init\n        this.parent = getElement(config.container);\n        if (!this.parent) {\n            throw new PSVError(`\"container\" element not found.`);\n        }\n\n        // @ts-ignore\n        this.parent[VIEWER_DATA] = this;\n\n        this.container = document.createElement('div');\n        this.container.classList.add('psv-container');\n        this.parent.appendChild(this.container);\n\n        checkClosedShadowDom(this.parent);\n        checkStylesheet(this.container, 'core');\n\n        this.state = new ViewerState();\n        this.config = getViewerConfig(config);\n\n        this.__setSize(this.config.size);\n\n        this.overlay = new Overlay(this);\n\n        try {\n            SYSTEM.load();\n        } catch (err) {\n            console.error(err);\n            this.showError(this.config.lang.webglError);\n            return;\n        }\n\n        Cache.init();\n\n        this.adapter = new this.config.adapter[0](this, this.config.adapter[1]);\n\n        this.renderer = new Renderer(this);\n        this.textureLoader = new TextureLoader(this);\n        this.eventsHandler = new EventsHandler(this);\n        this.dataHelper = new DataHelper(this);\n        this.dynamics = new ViewerDynamics(this);\n\n        this.adapter.init?.();\n\n        this.loader = new Loader(this);\n        this.navbar = new Navbar(this);\n        this.panel = new Panel(this);\n        this.notification = new Notification(this);\n\n        this.autoSize();\n        this.setCursor(null);\n\n        resolveBoolean(SYSTEM.isTouchEnabled, (enabled) => {\n            toggleClass(this.container, 'psv--is-touch', enabled);\n        });\n\n        // init plugins\n        this.config.plugins.forEach(([plugin, opts]) => {\n            // @ts-ignore\n            this.plugins[plugin.id] = new plugin(this, opts);\n        });\n        for (const plugin of Object.values(this.plugins)) {\n            plugin.init?.();\n        }\n\n        // init buttons\n        if (this.config.navbar) {\n            this.navbar.setButtons(this.config.navbar);\n        }\n\n        // load panorama\n        if (!this.state.loadingPromise) {\n            if (this.config.panorama) {\n                this.setPanorama(this.config.panorama, {\n                    sphereCorrection: this.config.sphereCorrection,\n                    panoData: this.config.panoData,\n                });\n            } else {\n                this.loader.show();\n            }\n        }\n    }\n\n    /**\n     * Destroys the viewer\n     */\n    destroy() {\n        this.stopAll();\n        this.stopKeyboardControl();\n        this.exitFullscreen();\n\n        for (const [id, plugin] of Object.entries(this.plugins)) {\n            plugin.destroy();\n            delete this.plugins[id];\n        }\n\n        this.children.slice().forEach(child => child.destroy());\n        this.children.length = 0;\n\n        this.eventsHandler?.destroy();\n        this.renderer?.destroy();\n        this.textureLoader?.destroy();\n        this.dataHelper?.destroy();\n        this.adapter?.destroy();\n        this.dynamics?.destroy();\n\n        this.parent.removeChild(this.container);\n        // @ts-ignore\n        delete this.parent[VIEWER_DATA];\n    }\n\n    private init() {\n        this.eventsHandler.init();\n        this.renderer.init();\n\n        if (this.config.navbar) {\n            this.navbar.show();\n        }\n\n        if (this.config.keyboard === 'always') {\n            this.startKeyboardControl();\n        }\n\n        this.resetIdleTimer();\n\n        this.state.ready = true;\n\n        this.dispatchEvent(new ReadyEvent());\n    }\n\n    /**\n     * Restarts the idle timer\n     * @internal\n     */\n    resetIdleTimer() {\n        this.state.idleTime = performance.now();\n    }\n\n    /**\n     * Stops the idle timer\n     * @internal\n     */\n    disableIdleTimer() {\n        this.state.idleTime = -1;\n    }\n\n    /**\n     * Returns the instance of a plugin if it exists\n     * @example By plugin identifier\n     * ```js\n     * viewer.getPlugin('markers')\n     * ```\n     * @example By plugin class with TypeScript support\n     * ```ts\n     * viewer.getPlugin<MarkersPlugin>(MarkersPlugin)\n     * ```\n     */\n    getPlugin<T extends AbstractPlugin<any>>(pluginId: string | PluginConstructor): T {\n        if (typeof pluginId === 'string') {\n            return this.plugins[pluginId] as T;\n        } else {\n            const pluginCtor = pluginInterop(pluginId);\n            return pluginCtor ? (this.plugins[pluginCtor.id] as T) : null;\n        }\n    }\n\n    /**\n     * Returns the current position of the camera\n     */\n    getPosition(): Position {\n        return this.dataHelper.cleanPosition(this.dynamics.position.current);\n    }\n\n    /**\n     * Returns the current zoom level\n     */\n    getZoomLevel(): number {\n        return this.dynamics.zoom.current;\n    }\n\n    /**\n     * Returns the current viewer size\n     */\n    getSize(): Size {\n        return { ...this.state.size };\n    }\n\n    /**\n     * Checks if the viewer is in fullscreen\n     */\n    isFullscreenEnabled(): boolean {\n        return isFullscreenEnabled(this.parent, SYSTEM.isIphone);\n    }\n\n    /**\n     * Request a new render of the scene\n     */\n    needsUpdate() {\n        this.state.needsUpdate = true;\n    }\n\n    /**\n     * Request the scene to be continuously renderer (when using videos)\n     */\n    needsContinuousUpdate(enabled: boolean) {\n        if (enabled) {\n            this.state.continuousUpdateCount++;\n        } else if (this.state.continuousUpdateCount > 0) {\n            this.state.continuousUpdateCount--;\n        }\n    }\n\n    /**\n     * Resizes the scene if the viewer is resized\n     */\n    autoSize() {\n        if (\n            this.container.clientWidth !== this.state.size.width\n            || this.container.clientHeight !== this.state.size.height\n        ) {\n            this.state.size.width = Math.round(this.container.clientWidth);\n            this.state.size.height = Math.round(this.container.clientHeight);\n            this.state.aspect = this.state.size.width / this.state.size.height;\n            this.state.hFov = this.dataHelper.vFovToHFov(this.state.vFov);\n\n            this.dispatchEvent(new SizeUpdatedEvent(this.getSize()));\n            this.navbar.autoSize();\n        }\n    }\n\n    /**\n     * Loads a new panorama file\n     * Loads a new panorama file, optionally changing the camera position/zoom and activating the transition animation.<br>\n     * If the \"options\" parameter is not defined, the camera will not move and the ongoing animation will continue.<br>\n     * If another loading is already in progress it will be aborted.\n     * @returns promise resolved with false if the loading was aborted by another call\n     */\n    setPanorama(path: any, options: PanoramaOptions = {}): Promise<boolean> {\n        this.textureLoader.abortLoading();\n        this.state.transitionAnimation?.cancel();\n\n        const transition = this.dataHelper.getTransitionOptions(options);\n\n        if (options.showLoader === undefined) {\n            options.showLoader = true;\n        }\n        if (options.caption === undefined) {\n            options.caption = this.config.caption;\n        }\n        if (options.description === undefined) {\n            options.description = this.config.description;\n        }\n        if (!options.panoData && typeof this.config.panoData === 'function') {\n            options.panoData = this.config.panoData;\n        }\n\n        this.hideError();\n        this.resetIdleTimer();\n\n        this.config.panorama = path;\n        this.config.caption = options.caption;\n        this.config.description = options.description;\n        this.config.sphereCorrection = options.sphereCorrection;\n\n        const done = (err?: Error) => {\n            if (isAbortError(err)) {\n                return false;\n            }\n\n            this.loader.hide();\n            this.state.loadingPromise = null;\n\n            if (err) {\n                this.navbar.setCaption(null);\n                this.showError(this.config.lang.loadError);\n                console.error(err);\n                this.dispatchEvent(new PanoramaErrorEvent(path, err));\n                throw err;\n            } else {\n                this.navbar.setCaption(this.config.caption);\n                return true;\n            }\n        };\n\n        this.navbar.setCaption(`<em>${this.config.lang.loading}</em>`);\n        if (options.showLoader || !this.state.ready) {\n            this.loader.show();\n        }\n\n        this.dispatchEvent(new PanoramaLoadEvent(path));\n\n        const loadingPromise = this.adapter.loadTexture(this.config.panorama, true, options.panoData).then((textureData) => {\n            // check if another panorama was requested\n            if (textureData.panorama !== this.config.panorama) {\n                this.adapter.disposeTexture(textureData);\n                throw getAbortError();\n            }\n\n            const cleanOptions = this.dataHelper.cleanPanoramaOptions(options, textureData.panoData);\n\n            if (!isNil(cleanOptions.zoom) || !isNil(cleanOptions.position)) {\n                this.stopAll();\n            }\n\n            return {\n                textureData,\n                cleanOptions,\n            };\n        });\n\n        if (!transition || !this.state.ready || !this.adapter.supportsTransition(this.config.panorama)) {\n            this.state.loadingPromise = loadingPromise\n                .then(({ textureData, cleanOptions }) => {\n                    this.renderer.show();\n                    this.renderer.setTexture(textureData);\n                    this.renderer.setPanoramaPose(textureData.panoData);\n                    this.renderer.setSphereCorrection(options.sphereCorrection);\n\n                    if (!this.state.ready) {\n                        this.init();\n                    }\n\n                    this.dispatchEvent(new PanoramaLoadedEvent(textureData));\n\n                    if (!isNil(cleanOptions.zoom)) {\n                        this.zoom(cleanOptions.zoom);\n                    }\n                    if (!isNil(cleanOptions.position)) {\n                        this.rotate(cleanOptions.position);\n                    }\n                })\n                .then(\n                    () => done(),\n                    err => done(err),\n                );\n        } else {\n            this.state.loadingPromise = loadingPromise\n                .then(({ textureData, cleanOptions }) => {\n                    this.loader.hide();\n\n                    this.dispatchEvent(new PanoramaLoadedEvent(textureData));\n\n                    this.state.transitionAnimation = this.renderer.transition(textureData, cleanOptions, transition);\n                    return this.state.transitionAnimation;\n                })\n                .then((completed) => {\n                    this.state.transitionAnimation = null;\n\n                    this.dispatchEvent(new TransitionDoneEvent(completed));\n\n                    if (!completed) {\n                        throw getAbortError();\n                    }\n                })\n                .then(\n                    () => done(),\n                    err => done(err),\n                );\n        }\n\n        return this.state.loadingPromise;\n    }\n\n    /**\n     * Update options\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    setOptions(options: Partial<UpdatableViewerConfig>) {\n        const rawConfig: ViewerConfig = {\n            ...this.config,\n            ...options,\n        };\n\n        for (let [key, value] of Object.entries(options) as Array<[keyof typeof rawConfig, any]>) {\n            if (!(key in DEFAULTS)) {\n                logWarn(`Unknown option ${key}`);\n                continue;\n            }\n\n            if (key in READONLY_OPTIONS) {\n                logWarn((READONLY_OPTIONS as any)[key]);\n                continue;\n            }\n\n            if (key in CONFIG_PARSERS) {\n                // @ts-ignore\n                value = CONFIG_PARSERS[key](value, {\n                    rawConfig: rawConfig,\n                    defValue: DEFAULTS[key],\n                } as any);\n            }\n\n            // @ts-ignore\n            this.config[key] = value;\n\n            switch (key) {\n                case 'mousemove':\n                    if (!this.state.cursorOverride) {\n                        this.setCursor(null);\n                    }\n                    break;\n\n                case 'caption':\n                    this.navbar.setCaption(this.config.caption);\n                    break;\n\n                case 'size':\n                    this.resize(this.config.size);\n                    break;\n\n                case 'sphereCorrection':\n                    this.renderer.setSphereCorrection(this.config.sphereCorrection);\n                    break;\n\n                case 'navbar':\n                case 'lang':\n                    this.navbar.setButtons(this.config.navbar);\n                    break;\n\n                case 'moveSpeed':\n                case 'zoomSpeed':\n                    this.dynamics.updateSpeeds();\n                    break;\n\n                case 'minFov':\n                case 'maxFov':\n                    this.dynamics.zoom.setValue(this.dataHelper.fovToZoomLevel(this.state.vFov));\n                    this.dispatchEvent(new ZoomUpdatedEvent(this.getZoomLevel()));\n                    break;\n\n                case 'keyboard':\n                    if (this.config.keyboard === 'always') {\n                        this.startKeyboardControl();\n                    } else {\n                        this.stopKeyboardControl();\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        this.needsUpdate();\n\n        this.dispatchEvent(new ConfigChangedEvent(Object.keys(options) as any));\n    }\n\n    /**\n     * Update options\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    setOption<T extends keyof UpdatableViewerConfig>(option: T, value: UpdatableViewerConfig[T]) {\n        this.setOptions({ [option]: value });\n    }\n\n    /**\n     * Displays an error message over the viewer\n     */\n    showError(message: string) {\n        this.overlay.show({\n            id: IDS.ERROR,\n            image: errorIcon,\n            title: message,\n            dismissible: false,\n        });\n    }\n\n    /**\n     *  Hides the error message\n     */\n    hideError() {\n        this.overlay.hide(IDS.ERROR);\n    }\n\n    /**\n     * Rotates the view to specific position\n     */\n    rotate(position: ExtendedPosition) {\n        const e = new BeforeRotateEvent(this.dataHelper.cleanPosition(position));\n        this.dispatchEvent(e);\n\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        this.dynamics.position.setValue(e.position);\n    }\n\n    /**\n     * Zooms to a specific level between `maxFov` and `minFov`\n     */\n    zoom(level: number) {\n        this.dynamics.zoom.setValue(level);\n    }\n\n    /**\n     * Increases the zoom level\n     */\n    zoomIn(step = 1) {\n        this.dynamics.zoom.step(step);\n    }\n\n    /**\n     * Decreases the zoom level\n     */\n    zoomOut(step = 1) {\n        this.dynamics.zoom.step(-step);\n    }\n\n    /**\n     * Rotates and zooms the view with a smooth animation\n     */\n    animate(options: AnimateOptions): Animation {\n        const positionProvided = isExtendedPosition(options);\n        const zoomProvided = !isNil(options.zoom);\n\n        const e = new BeforeAnimateEvent(\n            positionProvided ? this.dataHelper.cleanPosition(options) : undefined,\n            options.zoom,\n        );\n        this.dispatchEvent(e);\n\n        if (e.defaultPrevented) {\n            return;\n        }\n\n        this.stopAll();\n\n        const { duration, properties } = this.dataHelper.getAnimationProperties(options.speed, e.position, e.zoomLevel);\n\n        // if no animation needed\n        if (!duration) {\n            if (positionProvided) {\n                this.rotate(e.position);\n            }\n            if (zoomProvided) {\n                this.zoom(e.zoomLevel);\n            }\n\n            return new Animation(null);\n        }\n\n        this.state.animation = new Animation({\n            properties: properties,\n            duration: duration,\n            easing: options.easing || 'inOutSine',\n            onTick: (props) => {\n                if (positionProvided) {\n                    this.dynamics.position.setValue({\n                        yaw: props.yaw,\n                        pitch: props.pitch,\n                    });\n                }\n                if (zoomProvided) {\n                    this.dynamics.zoom.setValue(props.zoom);\n                }\n            },\n        });\n\n        this.state.animation.then(() => {\n            this.state.animation = null;\n            this.resetIdleTimer();\n        });\n\n        return this.state.animation;\n    }\n\n    /**\n     * Stops the ongoing animation\n     * The return value is a Promise because the is no guaranty the animation can be stopped synchronously.\n     */\n    stopAnimation(): PromiseLike<any> {\n        if (this.state.animation) {\n            this.state.animation.cancel();\n            return this.state.animation;\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * Resizes the viewer\n     */\n    resize(size: CssSize) {\n        this.__setSize(size);\n        this.autoSize();\n    }\n\n    private __setSize(size?: CssSize) {\n        (['width', 'height'] as Array<'width' | 'height'>).forEach((dim) => {\n            if (size?.[dim]) {\n                if (/^[0-9.]+$/.test(size[dim])) {\n                    size[dim] += 'px';\n                }\n                this.parent.style[dim] = size[dim];\n            }\n        });\n    }\n\n    /**\n     * Enters the fullscreen mode\n     */\n    enterFullscreen() {\n        if (!this.isFullscreenEnabled()) {\n            requestFullscreen(this.parent, SYSTEM.isIphone);\n        }\n    }\n\n    /**\n     * Exits the fullscreen mode\n     */\n    exitFullscreen() {\n        if (this.isFullscreenEnabled()) {\n            exitFullscreen(SYSTEM.isIphone);\n        }\n    }\n\n    /**\n     * Enters or exits the fullscreen mode\n     */\n    toggleFullscreen() {\n        if (!this.isFullscreenEnabled()) {\n            this.enterFullscreen();\n        } else {\n            this.exitFullscreen();\n        }\n    }\n\n    /**\n     * Enables the keyboard controls\n     */\n    startKeyboardControl() {\n        this.state.keyboardEnabled = true;\n    }\n\n    /**\n     * Disables the keyboard controls\n     */\n    stopKeyboardControl() {\n        this.state.keyboardEnabled = false;\n    }\n\n    /**\n     * Creates a new tooltip\n     * Use {@link Tooltip.move} to update the tooltip without re-create\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    createTooltip(config: TooltipConfig): Tooltip {\n        return new Tooltip(this, config);\n    }\n\n    /**\n     * Changes the global mouse cursor\n     */\n    setCursor(cursor: string | null) {\n        this.state.cursorOverride = cursor;\n        if (!cursor) {\n            this.container.style.cursor = this.config.mousemove ? 'move' : 'default';\n        } else {\n            this.container.style.cursor = cursor;\n        }\n    }\n\n    /**\n     * Subscribes to events on objects in the three.js scene\n     * @param userDataKey - only objects with the following `userData` will be observed\n     */\n    observeObjects(userDataKey: string): void {\n        if (!this.state.objectsObservers[userDataKey]) {\n            this.state.objectsObservers[userDataKey] = null;\n        }\n    }\n\n    /**\n     * Unsubscribes to events on objects\n     */\n    unobserveObjects(userDataKey: string): void {\n        delete this.state.objectsObservers[userDataKey];\n    }\n\n    /**\n     * Stops all current animations\n     * @internal\n     */\n    stopAll(): PromiseLike<void> {\n        this.dispatchEvent(new StopAllEvent());\n\n        this.disableIdleTimer();\n\n        return this.stopAnimation();\n    }\n}\n","import * as CONSTANTS from './data/constants';\nimport * as utils from './utils';\nimport * as events from './events';\n\nexport type { AdapterConstructor } from './adapters/AbstractAdapter';\nexport type { DualFisheyeAdapterConfig } from './adapters/DualFisheyeAdapter';\nexport type { EquirectangularAdapterConfig } from './adapters/EquirectangularAdapter';\nexport type { ButtonConfig, ButtonConstructor } from './buttons/AbstractButton';\nexport type { Tooltip, TooltipConfig, TooltipPosition } from './components/Tooltip';\nexport type { Loader } from './components/Loader';\nexport type { Navbar } from './components/Navbar';\nexport type { Notification, NotificationConfig } from './components/Notification';\nexport type { Overlay, OverlayConfig } from './components/Overlay';\nexport type { Panel, PanelConfig } from './components/Panel';\nexport type { TypedEventTarget } from './lib/TypedEventTarget';\nexport type { PluginConstructor } from './plugins/AbstractPlugin';\nexport type { DataHelper } from './services/DataHelper';\nexport type { Renderer, CustomRenderer } from './services/Renderer';\nexport type { TextureLoader } from './services/TextureLoader';\nexport type { ViewerState } from './services/ViewerState';\n\nexport { AbstractAdapter } from './adapters/AbstractAdapter';\nexport { DualFisheyeAdapter } from './adapters/DualFisheyeAdapter';\nexport { EquirectangularAdapter } from './adapters/EquirectangularAdapter';\nexport { AbstractButton } from './buttons/AbstractButton';\nexport { AbstractComponent } from './components/AbstractComponent';\nexport { registerButton } from './components/Navbar';\nexport { Cache } from './data/cache';\nexport { DEFAULTS } from './data/config';\nexport { SYSTEM } from './data/system';\nexport { TypedEvent } from './lib/TypedEventTarget';\nexport { AbstractPlugin, AbstractConfigurablePlugin } from './plugins/AbstractPlugin';\nexport { PSVError } from './PSVError';\nexport { Viewer } from './Viewer';\nexport * from './model';\nexport { CONSTANTS, events, utils };\nexport const VERSION = PKG_VERSION;\n\n/** @internal  */\nimport './styles/index.scss';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}